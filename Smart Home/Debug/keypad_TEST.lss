
keypad_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000309a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  0000309a  0000312e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080008e  0080008e  0000315c  2**0
                  ALLOC
  3 .stab         00002334  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fa4  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000066e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000832d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009fc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ab83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 4b 18 	jmp	0x3096	; 0x3096 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 18 	jmp	0x3028	; 0x3028 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 18 	jmp	0x3060	; 0x3060 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 20 18 	jmp	0x3040	; 0x3040 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3c 18 	jmp	0x3078	; 0x3078 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 24 18 	jmp	0x3048	; 0x3048 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 40 18 	jmp	0x3080	; 0x3080 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
#include "KEYPAD.h"

uint16 SUM(uint8 FirstNum[] , uint8 SecoundNum[] , uint8 counter , uint8 counter_1);

int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e6 97       	sbiw	r28, 0x36	; 54
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	uint8 u8PresLoc;
	uint8 Operation;
	uint8 FirstNum[4];
	uint8 SecoundNum[4];

	DIO_vidInit();
     b5a:	0e 94 f5 07 	call	0xfea	; 0xfea <DIO_vidInit>
	LCD_vidInit();
     b5e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <LCD_vidInit>
	KEYPAD_vidInit();
     b62:	0e 94 56 0a 	call	0x14ac	; 0x14ac <KEYPAD_vidInit>
	LCD_vidSendCmd(0,LCD_CLR);
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	aa ef       	ldi	r26, 0xFA	; 250
     b74:	b4 e4       	ldi	r27, 0x44	; 68
     b76:	8f a3       	std	Y+39, r24	; 0x27
     b78:	98 a7       	std	Y+40, r25	; 0x28
     b7a:	a9 a7       	std	Y+41, r26	; 0x29
     b7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b7e:	6f a1       	ldd	r22, Y+39	; 0x27
     b80:	78 a5       	ldd	r23, Y+40	; 0x28
     b82:	89 a5       	ldd	r24, Y+41	; 0x29
     b84:	9a a5       	ldd	r25, Y+42	; 0x2a
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	4a ef       	ldi	r20, 0xFA	; 250
     b8c:	54 e4       	ldi	r21, 0x44	; 68
     b8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b92:	dc 01       	movw	r26, r24
     b94:	cb 01       	movw	r24, r22
     b96:	8b a3       	std	Y+35, r24	; 0x23
     b98:	9c a3       	std	Y+36, r25	; 0x24
     b9a:	ad a3       	std	Y+37, r26	; 0x25
     b9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     b9e:	6b a1       	ldd	r22, Y+35	; 0x23
     ba0:	7c a1       	ldd	r23, Y+36	; 0x24
     ba2:	8d a1       	ldd	r24, Y+37	; 0x25
     ba4:	9e a1       	ldd	r25, Y+38	; 0x26
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e8       	ldi	r20, 0x80	; 128
     bac:	5f e3       	ldi	r21, 0x3F	; 63
     bae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb2:	88 23       	and	r24, r24
     bb4:	2c f4       	brge	.+10     	; 0xbc0 <main+0x7a>
		__ticks = 1;
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	9a a3       	std	Y+34, r25	; 0x22
     bbc:	89 a3       	std	Y+33, r24	; 0x21
     bbe:	3f c0       	rjmp	.+126    	; 0xc3e <main+0xf8>
	else if (__tmp > 65535)
     bc0:	6b a1       	ldd	r22, Y+35	; 0x23
     bc2:	7c a1       	ldd	r23, Y+36	; 0x24
     bc4:	8d a1       	ldd	r24, Y+37	; 0x25
     bc6:	9e a1       	ldd	r25, Y+38	; 0x26
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	3f ef       	ldi	r19, 0xFF	; 255
     bcc:	4f e7       	ldi	r20, 0x7F	; 127
     bce:	57 e4       	ldi	r21, 0x47	; 71
     bd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd4:	18 16       	cp	r1, r24
     bd6:	4c f5       	brge	.+82     	; 0xc2a <main+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd8:	6f a1       	ldd	r22, Y+39	; 0x27
     bda:	78 a5       	ldd	r23, Y+40	; 0x28
     bdc:	89 a5       	ldd	r24, Y+41	; 0x29
     bde:	9a a5       	ldd	r25, Y+42	; 0x2a
     be0:	20 e0       	ldi	r18, 0x00	; 0
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e2       	ldi	r20, 0x20	; 32
     be6:	51 e4       	ldi	r21, 0x41	; 65
     be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bec:	dc 01       	movw	r26, r24
     bee:	cb 01       	movw	r24, r22
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	9a a3       	std	Y+34, r25	; 0x22
     bfe:	89 a3       	std	Y+33, r24	; 0x21
     c00:	0f c0       	rjmp	.+30     	; 0xc20 <main+0xda>
     c02:	88 ec       	ldi	r24, 0xC8	; 200
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	98 a3       	std	Y+32, r25	; 0x20
     c08:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c0c:	98 a1       	ldd	r25, Y+32	; 0x20
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <main+0xc8>
     c12:	98 a3       	std	Y+32, r25	; 0x20
     c14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c16:	89 a1       	ldd	r24, Y+33	; 0x21
     c18:	9a a1       	ldd	r25, Y+34	; 0x22
     c1a:	01 97       	sbiw	r24, 0x01	; 1
     c1c:	9a a3       	std	Y+34, r25	; 0x22
     c1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c20:	89 a1       	ldd	r24, Y+33	; 0x21
     c22:	9a a1       	ldd	r25, Y+34	; 0x22
     c24:	00 97       	sbiw	r24, 0x00	; 0
     c26:	69 f7       	brne	.-38     	; 0xc02 <main+0xbc>
     c28:	14 c0       	rjmp	.+40     	; 0xc52 <main+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2a:	6b a1       	ldd	r22, Y+35	; 0x23
     c2c:	7c a1       	ldd	r23, Y+36	; 0x24
     c2e:	8d a1       	ldd	r24, Y+37	; 0x25
     c30:	9e a1       	ldd	r25, Y+38	; 0x26
     c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9a a3       	std	Y+34, r25	; 0x22
     c3c:	89 a3       	std	Y+33, r24	; 0x21
     c3e:	89 a1       	ldd	r24, Y+33	; 0x21
     c40:	9a a1       	ldd	r25, Y+34	; 0x22
     c42:	9e 8f       	std	Y+30, r25	; 0x1e
     c44:	8d 8f       	std	Y+29, r24	; 0x1d
     c46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c48:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c4a:	01 97       	sbiw	r24, 0x01	; 1
     c4c:	f1 f7       	brne	.-4      	; 0xc4a <main+0x104>
     c4e:	9e 8f       	std	Y+30, r25	; 0x1e
     c50:	8d 8f       	std	Y+29, r24	; 0x1d
	while(1)
	{
		_delay_ms(2000);
		LCD_vidSendCmd(0 , LCD_CLR);
     c52:	80 e0       	ldi	r24, 0x00	; 0
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
		uint8 count=0;
     c5a:	1c a6       	std	Y+44, r1	; 0x2c
		uint8 count_1=0;
     c5c:	1b a6       	std	Y+43, r1	; 0x2b

		while(1)
		{
			do{
				KEYPAD_enuGetPressedKey(0,&u8PresLoc);
     c5e:	9e 01       	movw	r18, r28
     c60:	22 5d       	subi	r18, 0xD2	; 210
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	b9 01       	movw	r22, r18
     c68:	0e 94 9a 0a 	call	0x1534	; 0x1534 <KEYPAD_enuGetPressedKey>
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	a6 e1       	ldi	r26, 0x16	; 22
     c72:	b3 e4       	ldi	r27, 0x43	; 67
     c74:	89 8f       	std	Y+25, r24	; 0x19
     c76:	9a 8f       	std	Y+26, r25	; 0x1a
     c78:	ab 8f       	std	Y+27, r26	; 0x1b
     c7a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7c:	69 8d       	ldd	r22, Y+25	; 0x19
     c7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c80:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c82:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c84:	20 e0       	ldi	r18, 0x00	; 0
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	4a ef       	ldi	r20, 0xFA	; 250
     c8a:	54 e4       	ldi	r21, 0x44	; 68
     c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c90:	dc 01       	movw	r26, r24
     c92:	cb 01       	movw	r24, r22
     c94:	8d 8b       	std	Y+21, r24	; 0x15
     c96:	9e 8b       	std	Y+22, r25	; 0x16
     c98:	af 8b       	std	Y+23, r26	; 0x17
     c9a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c9c:	6d 89       	ldd	r22, Y+21	; 0x15
     c9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ca0:	8f 89       	ldd	r24, Y+23	; 0x17
     ca2:	98 8d       	ldd	r25, Y+24	; 0x18
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	2c f4       	brge	.+10     	; 0xcbe <main+0x178>
		__ticks = 1;
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	9c 8b       	std	Y+20, r25	; 0x14
     cba:	8b 8b       	std	Y+19, r24	; 0x13
     cbc:	3f c0       	rjmp	.+126    	; 0xd3c <main+0x1f6>
	else if (__tmp > 65535)
     cbe:	6d 89       	ldd	r22, Y+21	; 0x15
     cc0:	7e 89       	ldd	r23, Y+22	; 0x16
     cc2:	8f 89       	ldd	r24, Y+23	; 0x17
     cc4:	98 8d       	ldd	r25, Y+24	; 0x18
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	3f ef       	ldi	r19, 0xFF	; 255
     cca:	4f e7       	ldi	r20, 0x7F	; 127
     ccc:	57 e4       	ldi	r21, 0x47	; 71
     cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd2:	18 16       	cp	r1, r24
     cd4:	4c f5       	brge	.+82     	; 0xd28 <main+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd6:	69 8d       	ldd	r22, Y+25	; 0x19
     cd8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cda:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cdc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e2       	ldi	r20, 0x20	; 32
     ce4:	51 e4       	ldi	r21, 0x41	; 65
     ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cea:	dc 01       	movw	r26, r24
     cec:	cb 01       	movw	r24, r22
     cee:	bc 01       	movw	r22, r24
     cf0:	cd 01       	movw	r24, r26
     cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf6:	dc 01       	movw	r26, r24
     cf8:	cb 01       	movw	r24, r22
     cfa:	9c 8b       	std	Y+20, r25	; 0x14
     cfc:	8b 8b       	std	Y+19, r24	; 0x13
     cfe:	0f c0       	rjmp	.+30     	; 0xd1e <main+0x1d8>
     d00:	88 ec       	ldi	r24, 0xC8	; 200
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	9a 8b       	std	Y+18, r25	; 0x12
     d06:	89 8b       	std	Y+17, r24	; 0x11
     d08:	89 89       	ldd	r24, Y+17	; 0x11
     d0a:	9a 89       	ldd	r25, Y+18	; 0x12
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	f1 f7       	brne	.-4      	; 0xd0c <main+0x1c6>
     d10:	9a 8b       	std	Y+18, r25	; 0x12
     d12:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d14:	8b 89       	ldd	r24, Y+19	; 0x13
     d16:	9c 89       	ldd	r25, Y+20	; 0x14
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	9c 8b       	std	Y+20, r25	; 0x14
     d1c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1e:	8b 89       	ldd	r24, Y+19	; 0x13
     d20:	9c 89       	ldd	r25, Y+20	; 0x14
     d22:	00 97       	sbiw	r24, 0x00	; 0
     d24:	69 f7       	brne	.-38     	; 0xd00 <main+0x1ba>
     d26:	14 c0       	rjmp	.+40     	; 0xd50 <main+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d28:	6d 89       	ldd	r22, Y+21	; 0x15
     d2a:	7e 89       	ldd	r23, Y+22	; 0x16
     d2c:	8f 89       	ldd	r24, Y+23	; 0x17
     d2e:	98 8d       	ldd	r25, Y+24	; 0x18
     d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d34:	dc 01       	movw	r26, r24
     d36:	cb 01       	movw	r24, r22
     d38:	9c 8b       	std	Y+20, r25	; 0x14
     d3a:	8b 8b       	std	Y+19, r24	; 0x13
     d3c:	8b 89       	ldd	r24, Y+19	; 0x13
     d3e:	9c 89       	ldd	r25, Y+20	; 0x14
     d40:	98 8b       	std	Y+16, r25	; 0x10
     d42:	8f 87       	std	Y+15, r24	; 0x0f
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	98 89       	ldd	r25, Y+16	; 0x10
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	f1 f7       	brne	.-4      	; 0xd48 <main+0x202>
     d4c:	98 8b       	std	Y+16, r25	; 0x10
     d4e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(150);

			}while(u8PresLoc == 0xFF);
     d50:	8e a5       	ldd	r24, Y+46	; 0x2e
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	09 f4       	brne	.+2      	; 0xd58 <main+0x212>
     d56:	83 cf       	rjmp	.-250    	; 0xc5e <main+0x118>

			if(u8PresLoc == '+' || u8PresLoc == '-' || u8PresLoc == '*' || u8PresLoc == '/' )
     d58:	8e a5       	ldd	r24, Y+46	; 0x2e
     d5a:	8b 32       	cpi	r24, 0x2B	; 43
     d5c:	49 f0       	breq	.+18     	; 0xd70 <main+0x22a>
     d5e:	8e a5       	ldd	r24, Y+46	; 0x2e
     d60:	8d 32       	cpi	r24, 0x2D	; 45
     d62:	31 f0       	breq	.+12     	; 0xd70 <main+0x22a>
     d64:	8e a5       	ldd	r24, Y+46	; 0x2e
     d66:	8a 32       	cpi	r24, 0x2A	; 42
     d68:	19 f0       	breq	.+6      	; 0xd70 <main+0x22a>
     d6a:	8e a5       	ldd	r24, Y+46	; 0x2e
     d6c:	8f 32       	cpi	r24, 0x2F	; 47
     d6e:	39 f4       	brne	.+14     	; 0xd7e <main+0x238>
			{
				Operation=u8PresLoc;
     d70:	8e a5       	ldd	r24, Y+46	; 0x2e
     d72:	8d a7       	std	Y+45, r24	; 0x2d
				LCD_vidWriteData(0 , Operation);
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	6d a5       	ldd	r22, Y+45	; 0x2d
     d78:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
     d7c:	15 c0       	rjmp	.+42     	; 0xda8 <main+0x262>
				break;
			}
			FirstNum[count]=u8PresLoc;
     d7e:	8c a5       	ldd	r24, Y+44	; 0x2c
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	4e a5       	ldd	r20, Y+46	; 0x2e
     d86:	ce 01       	movw	r24, r28
     d88:	8f 96       	adiw	r24, 0x2f	; 47
     d8a:	fc 01       	movw	r30, r24
     d8c:	e2 0f       	add	r30, r18
     d8e:	f3 1f       	adc	r31, r19
     d90:	40 83       	st	Z, r20
			count++;
     d92:	8c a5       	ldd	r24, Y+44	; 0x2c
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	8c a7       	std	Y+44, r24	; 0x2c
			LCD_vidWriteData(0 , u8PresLoc+48);
     d98:	8e a5       	ldd	r24, Y+46	; 0x2e
     d9a:	98 2f       	mov	r25, r24
     d9c:	90 5d       	subi	r25, 0xD0	; 208
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	69 2f       	mov	r22, r25
     da2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
     da6:	5b cf       	rjmp	.-330    	; 0xc5e <main+0x118>
		}

		while(1)
		{
			do{
				KEYPAD_enuGetPressedKey(0,&u8PresLoc);
     da8:	9e 01       	movw	r18, r28
     daa:	22 5d       	subi	r18, 0xD2	; 210
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	b9 01       	movw	r22, r18
     db2:	0e 94 9a 0a 	call	0x1534	; 0x1534 <KEYPAD_enuGetPressedKey>
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a6 e1       	ldi	r26, 0x16	; 22
     dbc:	b3 e4       	ldi	r27, 0x43	; 67
     dbe:	8b 87       	std	Y+11, r24	; 0x0b
     dc0:	9c 87       	std	Y+12, r25	; 0x0c
     dc2:	ad 87       	std	Y+13, r26	; 0x0d
     dc4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
     dca:	8d 85       	ldd	r24, Y+13	; 0x0d
     dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
     dce:	20 e0       	ldi	r18, 0x00	; 0
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	4a ef       	ldi	r20, 0xFA	; 250
     dd4:	54 e4       	ldi	r21, 0x44	; 68
     dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dda:	dc 01       	movw	r26, r24
     ddc:	cb 01       	movw	r24, r22
     dde:	8f 83       	std	Y+7, r24	; 0x07
     de0:	98 87       	std	Y+8, r25	; 0x08
     de2:	a9 87       	std	Y+9, r26	; 0x09
     de4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de6:	6f 81       	ldd	r22, Y+7	; 0x07
     de8:	78 85       	ldd	r23, Y+8	; 0x08
     dea:	89 85       	ldd	r24, Y+9	; 0x09
     dec:	9a 85       	ldd	r25, Y+10	; 0x0a
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 e8       	ldi	r20, 0x80	; 128
     df4:	5f e3       	ldi	r21, 0x3F	; 63
     df6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dfa:	88 23       	and	r24, r24
     dfc:	2c f4       	brge	.+10     	; 0xe08 <main+0x2c2>
		__ticks = 1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	9e 83       	std	Y+6, r25	; 0x06
     e04:	8d 83       	std	Y+5, r24	; 0x05
     e06:	3f c0       	rjmp	.+126    	; 0xe86 <main+0x340>
	else if (__tmp > 65535)
     e08:	6f 81       	ldd	r22, Y+7	; 0x07
     e0a:	78 85       	ldd	r23, Y+8	; 0x08
     e0c:	89 85       	ldd	r24, Y+9	; 0x09
     e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	3f ef       	ldi	r19, 0xFF	; 255
     e14:	4f e7       	ldi	r20, 0x7F	; 127
     e16:	57 e4       	ldi	r21, 0x47	; 71
     e18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1c:	18 16       	cp	r1, r24
     e1e:	4c f5       	brge	.+82     	; 0xe72 <main+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e20:	6b 85       	ldd	r22, Y+11	; 0x0b
     e22:	7c 85       	ldd	r23, Y+12	; 0x0c
     e24:	8d 85       	ldd	r24, Y+13	; 0x0d
     e26:	9e 85       	ldd	r25, Y+14	; 0x0e
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e2       	ldi	r20, 0x20	; 32
     e2e:	51 e4       	ldi	r21, 0x41	; 65
     e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e34:	dc 01       	movw	r26, r24
     e36:	cb 01       	movw	r24, r22
     e38:	bc 01       	movw	r22, r24
     e3a:	cd 01       	movw	r24, r26
     e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	9e 83       	std	Y+6, r25	; 0x06
     e46:	8d 83       	std	Y+5, r24	; 0x05
     e48:	0f c0       	rjmp	.+30     	; 0xe68 <main+0x322>
     e4a:	88 ec       	ldi	r24, 0xC8	; 200
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 83       	std	Y+4, r25	; 0x04
     e50:	8b 83       	std	Y+3, r24	; 0x03
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	9c 81       	ldd	r25, Y+4	; 0x04
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <main+0x310>
     e5a:	9c 83       	std	Y+4, r25	; 0x04
     e5c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5e:	8d 81       	ldd	r24, Y+5	; 0x05
     e60:	9e 81       	ldd	r25, Y+6	; 0x06
     e62:	01 97       	sbiw	r24, 0x01	; 1
     e64:	9e 83       	std	Y+6, r25	; 0x06
     e66:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	00 97       	sbiw	r24, 0x00	; 0
     e6e:	69 f7       	brne	.-38     	; 0xe4a <main+0x304>
     e70:	14 c0       	rjmp	.+40     	; 0xe9a <main+0x354>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e72:	6f 81       	ldd	r22, Y+7	; 0x07
     e74:	78 85       	ldd	r23, Y+8	; 0x08
     e76:	89 85       	ldd	r24, Y+9	; 0x09
     e78:	9a 85       	ldd	r25, Y+10	; 0x0a
     e7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	9e 83       	std	Y+6, r25	; 0x06
     e84:	8d 83       	std	Y+5, r24	; 0x05
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	9a 81       	ldd	r25, Y+2	; 0x02
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <main+0x34c>
     e96:	9a 83       	std	Y+2, r25	; 0x02
     e98:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(150);

			}while(u8PresLoc == 0xFF);
     e9a:	8e a5       	ldd	r24, Y+46	; 0x2e
     e9c:	8f 3f       	cpi	r24, 0xFF	; 255
     e9e:	09 f4       	brne	.+2      	; 0xea2 <main+0x35c>
     ea0:	83 cf       	rjmp	.-250    	; 0xda8 <main+0x262>

			if(u8PresLoc == '=')
     ea2:	8e a5       	ldd	r24, Y+46	; 0x2e
     ea4:	8d 33       	cpi	r24, 0x3D	; 61
     ea6:	61 f4       	brne	.+24     	; 0xec0 <main+0x37a>
			{
				LCD_vidWriteData(0 , u8PresLoc);
     ea8:	9e a5       	ldd	r25, Y+46	; 0x2e
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	69 2f       	mov	r22, r25
     eae:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
			SecoundNum[count_1]=u8PresLoc;
			count_1++;
			LCD_vidWriteData(0 , u8PresLoc+48);
		}

		switch (Operation) {
     eb2:	8d a5       	ldd	r24, Y+45	; 0x2d
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	8b 32       	cpi	r24, 0x2B	; 43
     eba:	91 05       	cpc	r25, r1
     ebc:	b1 f0       	breq	.+44     	; 0xeea <main+0x3a4>
     ebe:	57 ce       	rjmp	.-850    	; 0xb6e <main+0x28>
			if(u8PresLoc == '=')
			{
				LCD_vidWriteData(0 , u8PresLoc);
				break;
			}
			SecoundNum[count_1]=u8PresLoc;
     ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	4e a5       	ldd	r20, Y+46	; 0x2e
     ec8:	ce 01       	movw	r24, r28
     eca:	c3 96       	adiw	r24, 0x33	; 51
     ecc:	fc 01       	movw	r30, r24
     ece:	e2 0f       	add	r30, r18
     ed0:	f3 1f       	adc	r31, r19
     ed2:	40 83       	st	Z, r20
			count_1++;
     ed4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ed6:	8f 5f       	subi	r24, 0xFF	; 255
     ed8:	8b a7       	std	Y+43, r24	; 0x2b
			LCD_vidWriteData(0 , u8PresLoc+48);
     eda:	8e a5       	ldd	r24, Y+46	; 0x2e
     edc:	98 2f       	mov	r25, r24
     ede:	90 5d       	subi	r25, 0xD0	; 208
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	69 2f       	mov	r22, r25
     ee4:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
     ee8:	5f cf       	rjmp	.-322    	; 0xda8 <main+0x262>
		}

		switch (Operation) {
		case '+': LCD_vidWriteData(0 , SUM(FirstNum , SecoundNum , count , count_1)+48); break;
     eea:	ce 01       	movw	r24, r28
     eec:	8f 96       	adiw	r24, 0x2f	; 47
     eee:	9e 01       	movw	r18, r28
     ef0:	2d 5c       	subi	r18, 0xCD	; 205
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	b9 01       	movw	r22, r18
     ef6:	4c a5       	ldd	r20, Y+44	; 0x2c
     ef8:	2b a5       	ldd	r18, Y+43	; 0x2b
     efa:	0e 94 86 07 	call	0xf0c	; 0xf0c <SUM>
     efe:	98 2f       	mov	r25, r24
     f00:	90 5d       	subi	r25, 0xD0	; 208
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	69 2f       	mov	r22, r25
     f06:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
     f0a:	31 ce       	rjmp	.-926    	; 0xb6e <main+0x28>

00000f0c <SUM>:
	return  0 ;
}


uint16 SUM(uint8 FirstNum[] , uint8 SecoundNum[] , uint8 counter , uint8 counter_1)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	29 97       	sbiw	r28, 0x09	; 9
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	9d 83       	std	Y+5, r25	; 0x05
     f22:	8c 83       	std	Y+4, r24	; 0x04
     f24:	7f 83       	std	Y+7, r23	; 0x07
     f26:	6e 83       	std	Y+6, r22	; 0x06
     f28:	48 87       	std	Y+8, r20	; 0x08
     f2a:	29 87       	std	Y+9, r18	; 0x09
	uint8 i;
	uint8 Num_1=FirstNum[0];
     f2c:	ec 81       	ldd	r30, Y+4	; 0x04
     f2e:	fd 81       	ldd	r31, Y+5	; 0x05
     f30:	80 81       	ld	r24, Z
     f32:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Num_2=SecoundNum[0];
     f34:	ee 81       	ldd	r30, Y+6	; 0x06
     f36:	ff 81       	ldd	r31, Y+7	; 0x07
     f38:	80 81       	ld	r24, Z
     f3a:	89 83       	std	Y+1, r24	; 0x01

	for(i=1 ; i<counter ; i++)
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	8b 83       	std	Y+3, r24	; 0x03
     f40:	1c c0       	rjmp	.+56     	; 0xf7a <SUM+0x6e>
	{
		Num_1=Num_1*10 + FirstNum[i];
     f42:	8a 81       	ldd	r24, Y+2	; 0x02
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	9c 01       	movw	r18, r24
     f4a:	22 0f       	add	r18, r18
     f4c:	33 1f       	adc	r19, r19
     f4e:	c9 01       	movw	r24, r18
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	48 2f       	mov	r20, r24
     f5e:	8b 81       	ldd	r24, Y+3	; 0x03
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	8c 81       	ldd	r24, Y+4	; 0x04
     f66:	9d 81       	ldd	r25, Y+5	; 0x05
     f68:	fc 01       	movw	r30, r24
     f6a:	e2 0f       	add	r30, r18
     f6c:	f3 1f       	adc	r31, r19
     f6e:	80 81       	ld	r24, Z
     f70:	84 0f       	add	r24, r20
     f72:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i;
	uint8 Num_1=FirstNum[0];
	uint8 Num_2=SecoundNum[0];

	for(i=1 ; i<counter ; i++)
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	8f 5f       	subi	r24, 0xFF	; 255
     f78:	8b 83       	std	Y+3, r24	; 0x03
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	88 85       	ldd	r24, Y+8	; 0x08
     f7e:	98 17       	cp	r25, r24
     f80:	00 f3       	brcs	.-64     	; 0xf42 <SUM+0x36>
	{
		Num_1=Num_1*10 + FirstNum[i];
	}
	for(i=1 ; i<counter ; i++)
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	8b 83       	std	Y+3, r24	; 0x03
     f86:	1c c0       	rjmp	.+56     	; 0xfc0 <SUM+0xb4>
	{
		Num_2=Num_2*10 + FirstNum[i];
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	9c 01       	movw	r18, r24
     f90:	22 0f       	add	r18, r18
     f92:	33 1f       	adc	r19, r19
     f94:	c9 01       	movw	r24, r18
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	8c 81       	ldd	r24, Y+4	; 0x04
     fac:	9d 81       	ldd	r25, Y+5	; 0x05
     fae:	fc 01       	movw	r30, r24
     fb0:	e2 0f       	add	r30, r18
     fb2:	f3 1f       	adc	r31, r19
     fb4:	80 81       	ld	r24, Z
     fb6:	84 0f       	add	r24, r20
     fb8:	89 83       	std	Y+1, r24	; 0x01

	for(i=1 ; i<counter ; i++)
	{
		Num_1=Num_1*10 + FirstNum[i];
	}
	for(i=1 ; i<counter ; i++)
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	8b 83       	std	Y+3, r24	; 0x03
     fc0:	9b 81       	ldd	r25, Y+3	; 0x03
     fc2:	88 85       	ldd	r24, Y+8	; 0x08
     fc4:	98 17       	cp	r25, r24
     fc6:	00 f3       	brcs	.-64     	; 0xf88 <SUM+0x7c>
	{
		Num_2=Num_2*10 + FirstNum[i];
	}
	return (Num_1+Num_2);
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	82 0f       	add	r24, r18
     fd6:	93 1f       	adc	r25, r19
}
     fd8:	29 96       	adiw	r28, 0x09	; 9
     fda:	0f b6       	in	r0, 0x3f	; 63
     fdc:	f8 94       	cli
     fde:	de bf       	out	0x3e, r29	; 62
     fe0:	0f be       	out	0x3f, r0	; 63
     fe2:	cd bf       	out	0x3d, r28	; 61
     fe4:	cf 91       	pop	r28
     fe6:	df 91       	pop	r29
     fe8:	08 95       	ret

00000fea <DIO_vidInit>:
#include "DIO.h"
#include "DIO_cfg.h"
#include "DIO_priv.h"

void DIO_vidInit(void)
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	DDRA = CONC(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
     ff2:	ea e3       	ldi	r30, 0x3A	; 58
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	8f e7       	ldi	r24, 0x7F	; 127
     ff8:	80 83       	st	Z, r24
	DDRB = CONC(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
     ffa:	e7 e3       	ldi	r30, 0x37	; 55
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	88 ef       	ldi	r24, 0xF8	; 248
    1000:	80 83       	st	Z, r24
	DDRC = CONC(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16 );
    1002:	e4 e3       	ldi	r30, 0x34	; 52
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 ef       	ldi	r24, 0xF0	; 240
    1008:	80 83       	st	Z, r24
	DDRD = CONC(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24 );
    100a:	e1 e3       	ldi	r30, 0x31	; 49
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8f ef       	ldi	r24, 0xFF	; 255
    1010:	80 83       	st	Z, r24
	
	
}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <DIO_enuSetPinDir>:

tenuErrorStatus DIO_enuSetPinDir   (uint8 u8PinNumCpy ,uint8  u8PinDirCpy)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <DIO_enuSetPinDir+0x6>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc;
	if(u8PinNumCpy > 31 || u8PinDirCpy > 1)
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	80 32       	cpi	r24, 0x20	; 32
    102c:	18 f4       	brcc	.+6      	; 0x1034 <DIO_enuSetPinDir+0x1c>
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	18 f0       	brcs	.+6      	; 0x103a <DIO_enuSetPinDir+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	89 83       	std	Y+1, r24	; 0x01
    1038:	c2 c0       	rjmp	.+388    	; 0x11be <DIO_enuSetPinDir+0x1a6>
	}
	else
	{
		if(u8PinNumCpy <=7)
    103a:	8a 81       	ldd	r24, Y+2	; 0x02
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	60 f5       	brcc	.+88     	; 0x1098 <DIO_enuSetPinDir+0x80>
		{
			/*DDRA*/
			if (u8PinDirCpy == 0)
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 23       	and	r24, r24
    1044:	a9 f4       	brne	.+42     	; 0x1070 <DIO_enuSetPinDir+0x58>
			{
				// clear pin 
				CLR_BIT(DDRA,u8PinNumCpy);
    1046:	aa e3       	ldi	r26, 0x3A	; 58
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ea e3       	ldi	r30, 0x3A	; 58
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_enuSetPinDir+0x4c>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_enuSetPinDir+0x48>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	a6 c0       	rjmp	.+332    	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRA,u8PinNumCpy);
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_enuSetPinDir+0x76>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_enuSetPinDir+0x72>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	92 c0       	rjmp	.+292    	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=15)
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	80 31       	cpi	r24, 0x10	; 16
    109c:	78 f5       	brcc	.+94     	; 0x10fc <DIO_enuSetPinDir+0xe4>
		{
			/*DDRB*/
			u8PinNumCpy =u8PinNumCpy%8;
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	87 70       	andi	r24, 0x07	; 7
    10a2:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 23       	and	r24, r24
    10a8:	a9 f4       	brne	.+42     	; 0x10d4 <DIO_enuSetPinDir+0xbc>
			{
				// clear pin 
				CLR_BIT(DDRB,u8PinNumCpy);
    10aa:	a7 e3       	ldi	r26, 0x37	; 55
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e7 e3       	ldi	r30, 0x37	; 55
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8a 81       	ldd	r24, Y+2	; 0x02
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_enuSetPinDir+0xb0>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_enuSetPinDir+0xac>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	74 c0       	rjmp	.+232    	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRB,u8PinNumCpy);
    10d4:	a7 e3       	ldi	r26, 0x37	; 55
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e7 e3       	ldi	r30, 0x37	; 55
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8a 81       	ldd	r24, Y+2	; 0x02
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_enuSetPinDir+0xda>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_enuSetPinDir+0xd6>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	60 c0       	rjmp	.+192    	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=23)
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	88 31       	cpi	r24, 0x18	; 24
    1100:	78 f5       	brcc	.+94     	; 0x1160 <DIO_enuSetPinDir+0x148>
		{
			/*DDRC*/
			u8PinNumCpy =u8PinNumCpy%8;
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	87 70       	andi	r24, 0x07	; 7
    1106:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	88 23       	and	r24, r24
    110c:	a9 f4       	brne	.+42     	; 0x1138 <DIO_enuSetPinDir+0x120>
			{
				// clear pin 
				CLR_BIT(DDRC,u8PinNumCpy);
    110e:	a4 e3       	ldi	r26, 0x34	; 52
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e4 e3       	ldi	r30, 0x34	; 52
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	48 2f       	mov	r20, r24
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_enuSetPinDir+0x114>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_enuSetPinDir+0x110>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	42 c0       	rjmp	.+132    	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRC,u8PinNumCpy);
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_enuSetPinDir+0x13e>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_enuSetPinDir+0x13a>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	2e c0       	rjmp	.+92     	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
		}
		else
		{
			/*DDRD*/
			u8PinNumCpy =u8PinNumCpy%8;
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	87 70       	andi	r24, 0x07	; 7
    1164:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	88 23       	and	r24, r24
    116a:	a9 f4       	brne	.+42     	; 0x1196 <DIO_enuSetPinDir+0x17e>
			{
				// clear pin 
				CLR_BIT(DDRD,u8PinNumCpy);
    116c:	a1 e3       	ldi	r26, 0x31	; 49
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e1 e3       	ldi	r30, 0x31	; 49
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_enuSetPinDir+0x172>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_enuSetPinDir+0x16e>
    118e:	80 95       	com	r24
    1190:	84 23       	and	r24, r20
    1192:	8c 93       	st	X, r24
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRD,u8PinNumCpy);
    1196:	a1 e3       	ldi	r26, 0x31	; 49
    1198:	b0 e0       	ldi	r27, 0x00	; 0
    119a:	e1 e3       	ldi	r30, 0x31	; 49
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	48 2f       	mov	r20, r24
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	28 2f       	mov	r18, r24
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	02 2e       	mov	r0, r18
    11ae:	02 c0       	rjmp	.+4      	; 0x11b4 <DIO_enuSetPinDir+0x19c>
    11b0:	88 0f       	add	r24, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	0a 94       	dec	r0
    11b6:	e2 f7       	brpl	.-8      	; 0x11b0 <DIO_enuSetPinDir+0x198>
    11b8:	84 2b       	or	r24, r20
    11ba:	8c 93       	st	X, r24
			}
		}
	 enuErrorStatusLoc = E_OK ;
    11bc:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuErrorStatusLoc;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <DIO_enuSetPinValue>:

tenuErrorStatus DIO_enuSetPinValue (uint8 u8PinNumCpy ,uint8  u8PinStatusCpy)
{
    11cc:	df 93       	push	r29
    11ce:	cf 93       	push	r28
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <DIO_enuSetPinValue+0x6>
    11d2:	0f 92       	push	r0
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	8a 83       	std	Y+2, r24	; 0x02
    11da:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 || u8PinStatusCpy > 1)
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 32       	cpi	r24, 0x20	; 32
    11e0:	18 f4       	brcc	.+6      	; 0x11e8 <DIO_enuSetPinValue+0x1c>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	18 f0       	brcs	.+6      	; 0x11ee <DIO_enuSetPinValue+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
    11e8:	82 e0       	ldi	r24, 0x02	; 2
    11ea:	89 83       	std	Y+1, r24	; 0x01
    11ec:	cb c0       	rjmp	.+406    	; 0x1384 <DIO_enuSetPinValue+0x1b8>
	}
    else
    {
		if(u8PinNumCpy <= 7)
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	60 f5       	brcc	.+88     	; 0x124c <DIO_enuSetPinValue+0x80>
        {
			/*ODRA*/
			if (u8PinStatusCpy == 0)
    11f4:	8b 81       	ldd	r24, Y+3	; 0x03
    11f6:	88 23       	and	r24, r24
    11f8:	a9 f4       	brne	.+42     	; 0x1224 <DIO_enuSetPinValue+0x58>
			{
				//CLR BIT
				CLR_BIT(ODRA , u8PinNumCpy);
    11fa:	ab e3       	ldi	r26, 0x3B	; 59
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_enuSetPinValue+0x4c>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_enuSetPinValue+0x48>
    121c:	80 95       	com	r24
    121e:	84 23       	and	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	af c0       	rjmp	.+350    	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRA , u8PinNumCpy);
    1224:	ab e3       	ldi	r26, 0x3B	; 59
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	eb e3       	ldi	r30, 0x3B	; 59
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_enuSetPinValue+0x76>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_enuSetPinValue+0x72>
    1246:	84 2b       	or	r24, r20
    1248:	8c 93       	st	X, r24
    124a:	9b c0       	rjmp	.+310    	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
		}
        else if(u8PinNumCpy <= 15)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	80 31       	cpi	r24, 0x10	; 16
    1250:	90 f5       	brcc	.+100    	; 0x12b6 <DIO_enuSetPinValue+0xea>
        {
			/*ODRB*/
			if (u8PinStatusCpy == 0)
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 23       	and	r24, r24
    1256:	c1 f4       	brne	.+48     	; 0x1288 <DIO_enuSetPinValue+0xbc>
			{
				//CLR BIT
				CLR_BIT(ODRB , (u8PinNumCpy%8));
    1258:	a8 e3       	ldi	r26, 0x38	; 56
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e8 e3       	ldi	r30, 0x38	; 56
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9c 01       	movw	r18, r24
    126c:	27 70       	andi	r18, 0x07	; 7
    126e:	30 70       	andi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuSetPinValue+0xb0>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuSetPinValue+0xac>
    1280:	80 95       	com	r24
    1282:	84 23       	and	r24, r20
    1284:	8c 93       	st	X, r24
    1286:	7d c0       	rjmp	.+250    	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRB , (u8PinNumCpy%8));
    1288:	a8 e3       	ldi	r26, 0x38	; 56
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	88 2f       	mov	r24, r24
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9c 01       	movw	r18, r24
    129c:	27 70       	andi	r18, 0x07	; 7
    129e:	30 70       	andi	r19, 0x00	; 0
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 2e       	mov	r0, r18
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <DIO_enuSetPinValue+0xe0>
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	0a 94       	dec	r0
    12ae:	e2 f7       	brpl	.-8      	; 0x12a8 <DIO_enuSetPinValue+0xdc>
    12b0:	84 2b       	or	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	66 c0       	rjmp	.+204    	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
		}
        else if(u8PinNumCpy <= 23)
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	88 31       	cpi	r24, 0x18	; 24
    12ba:	90 f5       	brcc	.+100    	; 0x1320 <DIO_enuSetPinValue+0x154>
        {
			/*ODRC*/
			if (u8PinStatusCpy == 0)
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	88 23       	and	r24, r24
    12c0:	c1 f4       	brne	.+48     	; 0x12f2 <DIO_enuSetPinValue+0x126>
			{
				//CLR BIT
				CLR_BIT(ODRC , (u8PinNumCpy%8));
    12c2:	a5 e3       	ldi	r26, 0x35	; 53
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e5 e3       	ldi	r30, 0x35	; 53
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	9c 01       	movw	r18, r24
    12d6:	27 70       	andi	r18, 0x07	; 7
    12d8:	30 70       	andi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <DIO_enuSetPinValue+0x11a>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <DIO_enuSetPinValue+0x116>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	48 c0       	rjmp	.+144    	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRC , (u8PinNumCpy%8));
    12f2:	a5 e3       	ldi	r26, 0x35	; 53
    12f4:	b0 e0       	ldi	r27, 0x00	; 0
    12f6:	e5 e3       	ldi	r30, 0x35	; 53
    12f8:	f0 e0       	ldi	r31, 0x00	; 0
    12fa:	80 81       	ld	r24, Z
    12fc:	48 2f       	mov	r20, r24
    12fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1300:	88 2f       	mov	r24, r24
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9c 01       	movw	r18, r24
    1306:	27 70       	andi	r18, 0x07	; 7
    1308:	30 70       	andi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_enuSetPinValue+0x14a>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_enuSetPinValue+0x146>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	31 c0       	rjmp	.+98     	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
		}
		else
		{
			/*ODRD*/
			if (u8PinStatusCpy == 0)
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	88 23       	and	r24, r24
    1324:	c1 f4       	brne	.+48     	; 0x1356 <DIO_enuSetPinValue+0x18a>
			{
				//CLR BIT
				CLR_BIT(ODRD , (u8PinNumCpy%8));
    1326:	a2 e3       	ldi	r26, 0x32	; 50
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e2 e3       	ldi	r30, 0x32	; 50
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	48 2f       	mov	r20, r24
    1332:	8a 81       	ldd	r24, Y+2	; 0x02
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	9c 01       	movw	r18, r24
    133a:	27 70       	andi	r18, 0x07	; 7
    133c:	30 70       	andi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 2e       	mov	r0, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_enuSetPinValue+0x17e>
    1346:	88 0f       	add	r24, r24
    1348:	99 1f       	adc	r25, r25
    134a:	0a 94       	dec	r0
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_enuSetPinValue+0x17a>
    134e:	80 95       	com	r24
    1350:	84 23       	and	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	16 c0       	rjmp	.+44     	; 0x1382 <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRD , (u8PinNumCpy%8));
    1356:	a2 e3       	ldi	r26, 0x32	; 50
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	e2 e3       	ldi	r30, 0x32	; 50
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	88 2f       	mov	r24, r24
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	9c 01       	movw	r18, r24
    136a:	27 70       	andi	r18, 0x07	; 7
    136c:	30 70       	andi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <DIO_enuSetPinValue+0x1ae>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <DIO_enuSetPinValue+0x1aa>
    137e:	84 2b       	or	r24, r20
    1380:	8c 93       	st	X, r24
			}
		}

        enuErrorStatusLoc = E_OK;
    1382:	19 82       	std	Y+1, r1	; 0x01
		

	}
	return enuErrorStatusLoc ;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
}
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	cf 91       	pop	r28
    138e:	df 91       	pop	r29
    1390:	08 95       	ret

00001392 <DIO_enuReadPinValue>:
tenuErrorStatus DIO_enuReadPinValue(uint8 u8PinNumCpy ,uint8* pu8PinValueCpy)
{
    1392:	df 93       	push	r29
    1394:	cf 93       	push	r28
    1396:	00 d0       	rcall	.+0      	; 0x1398 <DIO_enuReadPinValue+0x6>
    1398:	00 d0       	rcall	.+0      	; 0x139a <DIO_enuReadPinValue+0x8>
    139a:	cd b7       	in	r28, 0x3d	; 61
    139c:	de b7       	in	r29, 0x3e	; 62
    139e:	8a 83       	std	Y+2, r24	; 0x02
    13a0:	7c 83       	std	Y+4, r23	; 0x04
    13a2:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc  ;
	if(u8PinNumCpy > 31)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	80 32       	cpi	r24, 0x20	; 32
    13a8:	18 f0       	brcs	.+6      	; 0x13b0 <DIO_enuReadPinValue+0x1e>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;	
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	89 83       	std	Y+1, r24	; 0x01
    13ae:	66 c0       	rjmp	.+204    	; 0x147c <DIO_enuReadPinValue+0xea>
	}
	else if (pu8PinValueCpy == NULL)
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	19 f4       	brne	.+6      	; 0x13be <DIO_enuReadPinValue+0x2c>
	{
		enuErrorStatusLoc = IS_NULL_POINTER; 
    13b8:	83 e0       	ldi	r24, 0x03	; 3
    13ba:	89 83       	std	Y+1, r24	; 0x01
    13bc:	5f c0       	rjmp	.+190    	; 0x147c <DIO_enuReadPinValue+0xea>
	}
	else
	{
		if(u8PinNumCpy <= 7)
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	a0 f4       	brcc	.+40     	; 0x13ec <DIO_enuReadPinValue+0x5a>
		{
			/*IDRA*/
			*pu8PinValueCpy = GET_BIT(IDRA ,u8PinNumCpy );
    13c4:	e9 e3       	ldi	r30, 0x39	; 57
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	88 2f       	mov	r24, r24
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a9 01       	movw	r20, r18
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_enuReadPinValue+0x4a>
    13d8:	55 95       	asr	r21
    13da:	47 95       	ror	r20
    13dc:	8a 95       	dec	r24
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_enuReadPinValue+0x46>
    13e0:	ca 01       	movw	r24, r20
    13e2:	81 70       	andi	r24, 0x01	; 1
    13e4:	eb 81       	ldd	r30, Y+3	; 0x03
    13e6:	fc 81       	ldd	r31, Y+4	; 0x04
    13e8:	80 83       	st	Z, r24
    13ea:	47 c0       	rjmp	.+142    	; 0x147a <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 15)
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	80 31       	cpi	r24, 0x10	; 16
    13f0:	b0 f4       	brcc	.+44     	; 0x141e <DIO_enuReadPinValue+0x8c>
		{
			/*IDRB*/
			
			*pu8PinValueCpy = GET_BIT(IDRB ,(u8PinNumCpy%8) );
    13f2:	e6 e3       	ldi	r30, 0x36	; 54
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	87 70       	andi	r24, 0x07	; 7
    1404:	90 70       	andi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <DIO_enuReadPinValue+0x7c>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <DIO_enuReadPinValue+0x78>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	eb 81       	ldd	r30, Y+3	; 0x03
    1418:	fc 81       	ldd	r31, Y+4	; 0x04
    141a:	80 83       	st	Z, r24
    141c:	2e c0       	rjmp	.+92     	; 0x147a <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 23)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 31       	cpi	r24, 0x18	; 24
    1422:	b0 f4       	brcc	.+44     	; 0x1450 <DIO_enuReadPinValue+0xbe>
		{
			/*IDRC*/
			
			*pu8PinValueCpy = GET_BIT(IDRC ,(u8PinNumCpy%8) );
    1424:	e3 e3       	ldi	r30, 0x33	; 51
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	88 2f       	mov	r24, r24
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	87 70       	andi	r24, 0x07	; 7
    1436:	90 70       	andi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_enuReadPinValue+0xae>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_enuReadPinValue+0xaa>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	80 83       	st	Z, r24
    144e:	15 c0       	rjmp	.+42     	; 0x147a <DIO_enuReadPinValue+0xe8>
		}
		else 
		{
			/*IDRD*/
			
			*pu8PinValueCpy = GET_BIT(IDRD ,(u8PinNumCpy%8) );
    1450:	e0 e3       	ldi	r30, 0x30	; 48
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	87 70       	andi	r24, 0x07	; 7
    1462:	90 70       	andi	r25, 0x00	; 0
    1464:	a9 01       	movw	r20, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <DIO_enuReadPinValue+0xda>
    1468:	55 95       	asr	r21
    146a:	47 95       	ror	r20
    146c:	8a 95       	dec	r24
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <DIO_enuReadPinValue+0xd6>
    1470:	ca 01       	movw	r24, r20
    1472:	81 70       	andi	r24, 0x01	; 1
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	80 83       	st	Z, r24
		}
		enuErrorStatusLoc = E_OK ;
    147a:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return enuErrorStatusLoc ;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <DIO_enuSetPinPullUp>:
tenuErrorStatus DIO_enuSetPinPullUp(uint8 u8PinNumCpy ,uint8  u8PullupStatusCpy)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	00 d0       	rcall	.+0      	; 0x1492 <DIO_enuSetPinPullUp+0x6>
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuSetPinValue(u8PinNumCpy ,u8PullupStatusCpy);	
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	6a 81       	ldd	r22, Y+2	; 0x02
    149e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
}
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <KEYPAD_vidInit>:
#include "KEYPAD.h"
#include "KEYPAD_cfg.h"
#include "KEYPAD_priv.h"

void KEYPAD_vidInit(void)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <KEYPAD_vidInit+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    14b6:	1a 82       	std	Y+2, r1	; 0x02
    14b8:	35 c0       	rjmp	.+106    	; 0x1524 <KEYPAD_vidInit+0x78>
	{
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
    14ba:	19 82       	std	Y+1, r1	; 0x01
    14bc:	1c c0       	rjmp	.+56     	; 0x14f6 <KEYPAD_vidInit+0x4a>
		{
			DIO_enuSetPinPullUp(KEYPAD_astrCfg[u8CntrLoc].au8InputPins[u8Cntr1Loc] , 1);
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	48 2f       	mov	r20, r24
    14c2:	50 e0       	ldi	r21, 0x00	; 0
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	8a e1       	ldi	r24, 0x1A	; 26
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	bc 01       	movw	r22, r24
    14d0:	46 9f       	mul	r20, r22
    14d2:	c0 01       	movw	r24, r0
    14d4:	47 9f       	mul	r20, r23
    14d6:	90 0d       	add	r25, r0
    14d8:	56 9f       	mul	r21, r22
    14da:	90 0d       	add	r25, r0
    14dc:	11 24       	eor	r1, r1
    14de:	82 0f       	add	r24, r18
    14e0:	93 1f       	adc	r25, r19
    14e2:	fc 01       	movw	r30, r24
    14e4:	e8 59       	subi	r30, 0x98	; 152
    14e6:	ff 4f       	sbci	r31, 0xFF	; 255
    14e8:	80 81       	ld	r24, Z
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	0e 94 46 0a 	call	0x148c	; 0x148c <DIO_enuSetPinPullUp>
void KEYPAD_vidInit(void)
{
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
	{
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	8f 5f       	subi	r24, 0xFF	; 255
    14f4:	89 83       	std	Y+1, r24	; 0x01
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	8a e1       	ldi	r24, 0x1A	; 26
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	ac 01       	movw	r20, r24
    1502:	24 9f       	mul	r18, r20
    1504:	c0 01       	movw	r24, r0
    1506:	25 9f       	mul	r18, r21
    1508:	90 0d       	add	r25, r0
    150a:	34 9f       	mul	r19, r20
    150c:	90 0d       	add	r25, r0
    150e:	11 24       	eor	r1, r1
    1510:	fc 01       	movw	r30, r24
    1512:	e0 58       	subi	r30, 0x80	; 128
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	90 81       	ld	r25, Z
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	89 17       	cp	r24, r25
    151c:	80 f2       	brcs	.-96     	; 0x14be <KEYPAD_vidInit+0x12>
#include "KEYPAD_priv.h"

void KEYPAD_vidInit(void)
{
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	8f 5f       	subi	r24, 0xFF	; 255
    1522:	8a 83       	std	Y+2, r24	; 0x02
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 23       	and	r24, r24
    1528:	41 f2       	breq	.-112    	; 0x14ba <KEYPAD_vidInit+0xe>
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
		{
			DIO_enuSetPinPullUp(KEYPAD_astrCfg[u8CntrLoc].au8InputPins[u8Cntr1Loc] , 1);
		}
	}
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <KEYPAD_enuGetPressedKey>:

tenuErrorStatus  KEYPAD_enuGetPressedKey(uint8 u8KeyNumCpy, uint8 * pu8PressedKeyCpy)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	cd b7       	in	r28, 0x3d	; 61
    153a:	de b7       	in	r29, 0x3e	; 62
    153c:	a6 97       	sbiw	r28, 0x26	; 38
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	8c a3       	std	Y+36, r24	; 0x24
    154a:	7e a3       	std	Y+38, r23	; 0x26
    154c:	6d a3       	std	Y+37, r22	; 0x25
	tenuErrorStatus enuResLoc = E_OK ;
    154e:	1b a2       	std	Y+35, r1	; 0x23
	uint8 u8SeqNumLoc ;
	uint32 u32ReadsLoc = 0 ;
    1550:	1e 8e       	std	Y+30, r1	; 0x1e
    1552:	1f 8e       	std	Y+31, r1	; 0x1f
    1554:	18 a2       	std	Y+32, r1	; 0x20
    1556:	19 a2       	std	Y+33, r1	; 0x21
	uint8 u8RepLoc;
	
	if (u8KeyNumCpy >= KEYPAD_MAX_NUM)
    1558:	8c a1       	ldd	r24, Y+36	; 0x24
    155a:	88 23       	and	r24, r24
    155c:	19 f0       	breq	.+6      	; 0x1564 <KEYPAD_enuGetPressedKey+0x30>
	{
		enuResLoc = OUT_OF_RANG ;
    155e:	82 e0       	ldi	r24, 0x02	; 2
    1560:	8b a3       	std	Y+35, r24	; 0x23
    1562:	20 c1       	rjmp	.+576    	; 0x17a4 <KEYPAD_enuGetPressedKey+0x270>
	}
	else if (pu8PressedKeyCpy == NULL)
    1564:	8d a1       	ldd	r24, Y+37	; 0x25
    1566:	9e a1       	ldd	r25, Y+38	; 0x26
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	19 f4       	brne	.+6      	; 0x1572 <KEYPAD_enuGetPressedKey+0x3e>
	{
		enuResLoc = IS_NULL_POINTER ;
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	8b a3       	std	Y+35, r24	; 0x23
    1570:	19 c1       	rjmp	.+562    	; 0x17a4 <KEYPAD_enuGetPressedKey+0x270>
	}
	else
	{
		for(u8SeqNumLoc = 0 ; u8SeqNumLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8SeqNumLoc++)
    1572:	1a a2       	std	Y+34, r1	; 0x22
    1574:	02 c1       	rjmp	.+516    	; 0x177a <KEYPAD_enuGetPressedKey+0x246>
		{
			 // sequence 
			 PutSequence(u8KeyNumCpy,u8SeqNumLoc);
    1576:	8c a1       	ldd	r24, Y+36	; 0x24
    1578:	6a a1       	ldd	r22, Y+34	; 0x22
    157a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <PutSequence>
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	a0 e2       	ldi	r26, 0x20	; 32
    1584:	b1 e4       	ldi	r27, 0x41	; 65
    1586:	89 8f       	std	Y+25, r24	; 0x19
    1588:	9a 8f       	std	Y+26, r25	; 0x1a
    158a:	ab 8f       	std	Y+27, r26	; 0x1b
    158c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158e:	69 8d       	ldd	r22, Y+25	; 0x19
    1590:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1592:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1594:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	4a ef       	ldi	r20, 0xFA	; 250
    159c:	54 e4       	ldi	r21, 0x44	; 68
    159e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	8d 8b       	std	Y+21, r24	; 0x15
    15a8:	9e 8b       	std	Y+22, r25	; 0x16
    15aa:	af 8b       	std	Y+23, r26	; 0x17
    15ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    15ae:	6d 89       	ldd	r22, Y+21	; 0x15
    15b0:	7e 89       	ldd	r23, Y+22	; 0x16
    15b2:	8f 89       	ldd	r24, Y+23	; 0x17
    15b4:	98 8d       	ldd	r25, Y+24	; 0x18
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e8       	ldi	r20, 0x80	; 128
    15bc:	5f e3       	ldi	r21, 0x3F	; 63
    15be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c2:	88 23       	and	r24, r24
    15c4:	2c f4       	brge	.+10     	; 0x15d0 <KEYPAD_enuGetPressedKey+0x9c>
		__ticks = 1;
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9c 8b       	std	Y+20, r25	; 0x14
    15cc:	8b 8b       	std	Y+19, r24	; 0x13
    15ce:	3f c0       	rjmp	.+126    	; 0x164e <KEYPAD_enuGetPressedKey+0x11a>
	else if (__tmp > 65535)
    15d0:	6d 89       	ldd	r22, Y+21	; 0x15
    15d2:	7e 89       	ldd	r23, Y+22	; 0x16
    15d4:	8f 89       	ldd	r24, Y+23	; 0x17
    15d6:	98 8d       	ldd	r25, Y+24	; 0x18
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	3f ef       	ldi	r19, 0xFF	; 255
    15dc:	4f e7       	ldi	r20, 0x7F	; 127
    15de:	57 e4       	ldi	r21, 0x47	; 71
    15e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e4:	18 16       	cp	r1, r24
    15e6:	4c f5       	brge	.+82     	; 0x163a <KEYPAD_enuGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e8:	69 8d       	ldd	r22, Y+25	; 0x19
    15ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e2       	ldi	r20, 0x20	; 32
    15f6:	51 e4       	ldi	r21, 0x41	; 65
    15f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fc:	dc 01       	movw	r26, r24
    15fe:	cb 01       	movw	r24, r22
    1600:	bc 01       	movw	r22, r24
    1602:	cd 01       	movw	r24, r26
    1604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1608:	dc 01       	movw	r26, r24
    160a:	cb 01       	movw	r24, r22
    160c:	9c 8b       	std	Y+20, r25	; 0x14
    160e:	8b 8b       	std	Y+19, r24	; 0x13
    1610:	0f c0       	rjmp	.+30     	; 0x1630 <KEYPAD_enuGetPressedKey+0xfc>
    1612:	88 ec       	ldi	r24, 0xC8	; 200
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	9a 8b       	std	Y+18, r25	; 0x12
    1618:	89 8b       	std	Y+17, r24	; 0x11
    161a:	89 89       	ldd	r24, Y+17	; 0x11
    161c:	9a 89       	ldd	r25, Y+18	; 0x12
    161e:	01 97       	sbiw	r24, 0x01	; 1
    1620:	f1 f7       	brne	.-4      	; 0x161e <KEYPAD_enuGetPressedKey+0xea>
    1622:	9a 8b       	std	Y+18, r25	; 0x12
    1624:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1626:	8b 89       	ldd	r24, Y+19	; 0x13
    1628:	9c 89       	ldd	r25, Y+20	; 0x14
    162a:	01 97       	sbiw	r24, 0x01	; 1
    162c:	9c 8b       	std	Y+20, r25	; 0x14
    162e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1630:	8b 89       	ldd	r24, Y+19	; 0x13
    1632:	9c 89       	ldd	r25, Y+20	; 0x14
    1634:	00 97       	sbiw	r24, 0x00	; 0
    1636:	69 f7       	brne	.-38     	; 0x1612 <KEYPAD_enuGetPressedKey+0xde>
    1638:	14 c0       	rjmp	.+40     	; 0x1662 <KEYPAD_enuGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163a:	6d 89       	ldd	r22, Y+21	; 0x15
    163c:	7e 89       	ldd	r23, Y+22	; 0x16
    163e:	8f 89       	ldd	r24, Y+23	; 0x17
    1640:	98 8d       	ldd	r25, Y+24	; 0x18
    1642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1646:	dc 01       	movw	r26, r24
    1648:	cb 01       	movw	r24, r22
    164a:	9c 8b       	std	Y+20, r25	; 0x14
    164c:	8b 8b       	std	Y+19, r24	; 0x13
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
    1650:	9c 89       	ldd	r25, Y+20	; 0x14
    1652:	98 8b       	std	Y+16, r25	; 0x10
    1654:	8f 87       	std	Y+15, r24	; 0x0f
    1656:	8f 85       	ldd	r24, Y+15	; 0x0f
    1658:	98 89       	ldd	r25, Y+16	; 0x10
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <KEYPAD_enuGetPressedKey+0x126>
    165e:	98 8b       	std	Y+16, r25	; 0x10
    1660:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(10);
			 // read input 
			 u32ReadsLoc = ReadSequence(u8KeyNumCpy);
    1662:	8c a1       	ldd	r24, Y+36	; 0x24
    1664:	0e 94 3f 0c 	call	0x187e	; 0x187e <ReadSequence>
    1668:	dc 01       	movw	r26, r24
    166a:	cb 01       	movw	r24, r22
    166c:	8e 8f       	std	Y+30, r24	; 0x1e
    166e:	9f 8f       	std	Y+31, r25	; 0x1f
    1670:	a8 a3       	std	Y+32, r26	; 0x20
    1672:	b9 a3       	std	Y+33, r27	; 0x21
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	a0 e2       	ldi	r26, 0x20	; 32
    167a:	b1 e4       	ldi	r27, 0x41	; 65
    167c:	8b 87       	std	Y+11, r24	; 0x0b
    167e:	9c 87       	std	Y+12, r25	; 0x0c
    1680:	ad 87       	std	Y+13, r26	; 0x0d
    1682:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1684:	6b 85       	ldd	r22, Y+11	; 0x0b
    1686:	7c 85       	ldd	r23, Y+12	; 0x0c
    1688:	8d 85       	ldd	r24, Y+13	; 0x0d
    168a:	9e 85       	ldd	r25, Y+14	; 0x0e
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	4a ef       	ldi	r20, 0xFA	; 250
    1692:	54 e4       	ldi	r21, 0x44	; 68
    1694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1698:	dc 01       	movw	r26, r24
    169a:	cb 01       	movw	r24, r22
    169c:	8f 83       	std	Y+7, r24	; 0x07
    169e:	98 87       	std	Y+8, r25	; 0x08
    16a0:	a9 87       	std	Y+9, r26	; 0x09
    16a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16a4:	6f 81       	ldd	r22, Y+7	; 0x07
    16a6:	78 85       	ldd	r23, Y+8	; 0x08
    16a8:	89 85       	ldd	r24, Y+9	; 0x09
    16aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	40 e8       	ldi	r20, 0x80	; 128
    16b2:	5f e3       	ldi	r21, 0x3F	; 63
    16b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b8:	88 23       	and	r24, r24
    16ba:	2c f4       	brge	.+10     	; 0x16c6 <KEYPAD_enuGetPressedKey+0x192>
		__ticks = 1;
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	9e 83       	std	Y+6, r25	; 0x06
    16c2:	8d 83       	std	Y+5, r24	; 0x05
    16c4:	3f c0       	rjmp	.+126    	; 0x1744 <KEYPAD_enuGetPressedKey+0x210>
	else if (__tmp > 65535)
    16c6:	6f 81       	ldd	r22, Y+7	; 0x07
    16c8:	78 85       	ldd	r23, Y+8	; 0x08
    16ca:	89 85       	ldd	r24, Y+9	; 0x09
    16cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16ce:	20 e0       	ldi	r18, 0x00	; 0
    16d0:	3f ef       	ldi	r19, 0xFF	; 255
    16d2:	4f e7       	ldi	r20, 0x7F	; 127
    16d4:	57 e4       	ldi	r21, 0x47	; 71
    16d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16da:	18 16       	cp	r1, r24
    16dc:	4c f5       	brge	.+82     	; 0x1730 <KEYPAD_enuGetPressedKey+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16de:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	40 e2       	ldi	r20, 0x20	; 32
    16ec:	51 e4       	ldi	r21, 0x41	; 65
    16ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f2:	dc 01       	movw	r26, r24
    16f4:	cb 01       	movw	r24, r22
    16f6:	bc 01       	movw	r22, r24
    16f8:	cd 01       	movw	r24, r26
    16fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	9e 83       	std	Y+6, r25	; 0x06
    1704:	8d 83       	std	Y+5, r24	; 0x05
    1706:	0f c0       	rjmp	.+30     	; 0x1726 <KEYPAD_enuGetPressedKey+0x1f2>
    1708:	88 ec       	ldi	r24, 0xC8	; 200
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	8b 83       	std	Y+3, r24	; 0x03
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	9c 81       	ldd	r25, Y+4	; 0x04
    1714:	01 97       	sbiw	r24, 0x01	; 1
    1716:	f1 f7       	brne	.-4      	; 0x1714 <KEYPAD_enuGetPressedKey+0x1e0>
    1718:	9c 83       	std	Y+4, r25	; 0x04
    171a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9e 83       	std	Y+6, r25	; 0x06
    1724:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
    1728:	9e 81       	ldd	r25, Y+6	; 0x06
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	69 f7       	brne	.-38     	; 0x1708 <KEYPAD_enuGetPressedKey+0x1d4>
    172e:	14 c0       	rjmp	.+40     	; 0x1758 <KEYPAD_enuGetPressedKey+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	9e 83       	std	Y+6, r25	; 0x06
    1742:	8d 83       	std	Y+5, r24	; 0x05
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	9a 83       	std	Y+2, r25	; 0x02
    174a:	89 83       	std	Y+1, r24	; 0x01
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <KEYPAD_enuGetPressedKey+0x21c>
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(10);
			 // repesent  0xFF
			 u8RepLoc = RepValue(u8KeyNumCpy ,u32ReadsLoc,u8SeqNumLoc);
    1758:	2e 8d       	ldd	r18, Y+30	; 0x1e
    175a:	3f 8d       	ldd	r19, Y+31	; 0x1f
    175c:	48 a1       	ldd	r20, Y+32	; 0x20
    175e:	59 a1       	ldd	r21, Y+33	; 0x21
    1760:	8c a1       	ldd	r24, Y+36	; 0x24
    1762:	ba 01       	movw	r22, r20
    1764:	a9 01       	movw	r20, r18
    1766:	2a a1       	ldd	r18, Y+34	; 0x22
    1768:	0e 94 b1 0c 	call	0x1962	; 0x1962 <RepValue>
    176c:	8d 8f       	std	Y+29, r24	; 0x1d
			 // check != 0xFF break
			 if (u8RepLoc!=0xFF)
    176e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1770:	8f 3f       	cpi	r24, 0xFF	; 255
    1772:	c1 f4       	brne	.+48     	; 0x17a4 <KEYPAD_enuGetPressedKey+0x270>
	{
		enuResLoc = IS_NULL_POINTER ;
	}
	else
	{
		for(u8SeqNumLoc = 0 ; u8SeqNumLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8SeqNumLoc++)
    1774:	8a a1       	ldd	r24, Y+34	; 0x22
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	8a a3       	std	Y+34, r24	; 0x22
    177a:	8c a1       	ldd	r24, Y+36	; 0x24
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8a e1       	ldi	r24, 0x1A	; 26
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	ac 01       	movw	r20, r24
    1786:	24 9f       	mul	r18, r20
    1788:	c0 01       	movw	r24, r0
    178a:	25 9f       	mul	r18, r21
    178c:	90 0d       	add	r25, r0
    178e:	34 9f       	mul	r19, r20
    1790:	90 0d       	add	r25, r0
    1792:	11 24       	eor	r1, r1
    1794:	fc 01       	movw	r30, r24
    1796:	ef 57       	subi	r30, 0x7F	; 127
    1798:	ff 4f       	sbci	r31, 0xFF	; 255
    179a:	90 81       	ld	r25, Z
    179c:	8a a1       	ldd	r24, Y+34	; 0x22
    179e:	89 17       	cp	r24, r25
    17a0:	08 f4       	brcc	.+2      	; 0x17a4 <KEYPAD_enuGetPressedKey+0x270>
    17a2:	e9 ce       	rjmp	.-558    	; 0x1576 <KEYPAD_enuGetPressedKey+0x42>
			
		}
		
   
 	}
	 *pu8PressedKeyCpy = u8RepLoc ;
    17a4:	ed a1       	ldd	r30, Y+37	; 0x25
    17a6:	fe a1       	ldd	r31, Y+38	; 0x26
    17a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17aa:	80 83       	st	Z, r24
	return enuResLoc ;
    17ac:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    17ae:	a6 96       	adiw	r28, 0x26	; 38
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	cf 91       	pop	r28
    17bc:	df 91       	pop	r29
    17be:	08 95       	ret

000017c0 <PutSequence>:


static void PutSequence (uint8 u8KeyNumCpy , uint8 u8SeqCpy)
{
    17c0:	df 93       	push	r29
    17c2:	cf 93       	push	r28
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <PutSequence+0x6>
    17c6:	0f 92       	push	r0
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	8a 83       	std	Y+2, r24	; 0x02
    17ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8CntrLoc++)
    17d0:	19 82       	std	Y+1, r1	; 0x01
    17d2:	3a c0       	rjmp	.+116    	; 0x1848 <PutSequence+0x88>
	{
		if (u8SeqCpy == u8CntrLoc )
    17d4:	9b 81       	ldd	r25, Y+3	; 0x03
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	98 17       	cp	r25, r24
    17da:	d1 f4       	brne	.+52     	; 0x1810 <PutSequence+0x50>
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],0);
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	48 2f       	mov	r20, r24
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	89 81       	ldd	r24, Y+1	; 0x01
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8a e1       	ldi	r24, 0x1A	; 26
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	bc 01       	movw	r22, r24
    17ee:	46 9f       	mul	r20, r22
    17f0:	c0 01       	movw	r24, r0
    17f2:	47 9f       	mul	r20, r23
    17f4:	90 0d       	add	r25, r0
    17f6:	56 9f       	mul	r21, r22
    17f8:	90 0d       	add	r25, r0
    17fa:	11 24       	eor	r1, r1
    17fc:	82 0f       	add	r24, r18
    17fe:	93 1f       	adc	r25, r19
    1800:	fc 01       	movw	r30, r24
    1802:	e4 59       	subi	r30, 0x94	; 148
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
    180e:	19 c0       	rjmp	.+50     	; 0x1842 <PutSequence+0x82>
		}
		else
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],1);
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	48 2f       	mov	r20, r24
    1814:	50 e0       	ldi	r21, 0x00	; 0
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	8a e1       	ldi	r24, 0x1A	; 26
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	bc 01       	movw	r22, r24
    1822:	46 9f       	mul	r20, r22
    1824:	c0 01       	movw	r24, r0
    1826:	47 9f       	mul	r20, r23
    1828:	90 0d       	add	r25, r0
    182a:	56 9f       	mul	r21, r22
    182c:	90 0d       	add	r25, r0
    182e:	11 24       	eor	r1, r1
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	fc 01       	movw	r30, r24
    1836:	e4 59       	subi	r30, 0x94	; 148
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>


static void PutSequence (uint8 u8KeyNumCpy , uint8 u8SeqCpy)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8CntrLoc++)
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	8f 5f       	subi	r24, 0xFF	; 255
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	8a e1       	ldi	r24, 0x1A	; 26
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	ac 01       	movw	r20, r24
    1854:	24 9f       	mul	r18, r20
    1856:	c0 01       	movw	r24, r0
    1858:	25 9f       	mul	r18, r21
    185a:	90 0d       	add	r25, r0
    185c:	34 9f       	mul	r19, r20
    185e:	90 0d       	add	r25, r0
    1860:	11 24       	eor	r1, r1
    1862:	fc 01       	movw	r30, r24
    1864:	ef 57       	subi	r30, 0x7F	; 127
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	90 81       	ld	r25, Z
    186a:	89 81       	ldd	r24, Y+1	; 0x01
    186c:	89 17       	cp	r24, r25
    186e:	08 f4       	brcc	.+2      	; 0x1872 <PutSequence+0xb2>
    1870:	b1 cf       	rjmp	.-158    	; 0x17d4 <PutSequence+0x14>
		else
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],1);
		}
	}
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <ReadSequence>:

static uint32 ReadSequence(uint8 u8KeyNumCpy )
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	27 97       	sbiw	r28, 0x07	; 7
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    1892:	8f 83       	std	Y+7, r24	; 0x07
	uint8 u8CntrLoc  ;
	uint8 u8ReadsLoc ;
	uint32 u32ReturnLoc =0 ;
    1894:	19 82       	std	Y+1, r1	; 0x01
    1896:	1a 82       	std	Y+2, r1	; 0x02
    1898:	1b 82       	std	Y+3, r1	; 0x03
    189a:	1c 82       	std	Y+4, r1	; 0x04
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++ )
    189c:	1d 82       	std	Y+5, r1	; 0x05
    189e:	3d c0       	rjmp	.+122    	; 0x191a <ReadSequence+0x9c>
	{
		DIO_enuReadPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8InputPins[u8CntrLoc] , &u8ReadsLoc);
    18a0:	8f 81       	ldd	r24, Y+7	; 0x07
    18a2:	48 2f       	mov	r20, r24
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	8d 81       	ldd	r24, Y+5	; 0x05
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8a e1       	ldi	r24, 0x1A	; 26
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	bc 01       	movw	r22, r24
    18b2:	46 9f       	mul	r20, r22
    18b4:	c0 01       	movw	r24, r0
    18b6:	47 9f       	mul	r20, r23
    18b8:	90 0d       	add	r25, r0
    18ba:	56 9f       	mul	r21, r22
    18bc:	90 0d       	add	r25, r0
    18be:	11 24       	eor	r1, r1
    18c0:	82 0f       	add	r24, r18
    18c2:	93 1f       	adc	r25, r19
    18c4:	fc 01       	movw	r30, r24
    18c6:	e8 59       	subi	r30, 0x98	; 152
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	80 81       	ld	r24, Z
    18cc:	9e 01       	movw	r18, r28
    18ce:	2a 5f       	subi	r18, 0xFA	; 250
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	b9 01       	movw	r22, r18
    18d4:	0e 94 c9 09 	call	0x1392	; 0x1392 <DIO_enuReadPinValue>
		u32ReturnLoc|= u8ReadsLoc<< u8CntrLoc;
    18d8:	8e 81       	ldd	r24, Y+6	; 0x06
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	8d 81       	ldd	r24, Y+5	; 0x05
    18e0:	88 2f       	mov	r24, r24
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a9 01       	movw	r20, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <ReadSequence+0x6e>
    18e8:	44 0f       	add	r20, r20
    18ea:	55 1f       	adc	r21, r21
    18ec:	8a 95       	dec	r24
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <ReadSequence+0x6a>
    18f0:	ca 01       	movw	r24, r20
    18f2:	9c 01       	movw	r18, r24
    18f4:	44 27       	eor	r20, r20
    18f6:	37 fd       	sbrc	r19, 7
    18f8:	40 95       	com	r20
    18fa:	54 2f       	mov	r21, r20
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	ab 81       	ldd	r26, Y+3	; 0x03
    1902:	bc 81       	ldd	r27, Y+4	; 0x04
    1904:	82 2b       	or	r24, r18
    1906:	93 2b       	or	r25, r19
    1908:	a4 2b       	or	r26, r20
    190a:	b5 2b       	or	r27, r21
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	ab 83       	std	Y+3, r26	; 0x03
    1912:	bc 83       	std	Y+4, r27	; 0x04
static uint32 ReadSequence(uint8 u8KeyNumCpy )
{
	uint8 u8CntrLoc  ;
	uint8 u8ReadsLoc ;
	uint32 u32ReturnLoc =0 ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++ )
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	8f 5f       	subi	r24, 0xFF	; 255
    1918:	8d 83       	std	Y+5, r24	; 0x05
    191a:	8f 81       	ldd	r24, Y+7	; 0x07
    191c:	28 2f       	mov	r18, r24
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	8a e1       	ldi	r24, 0x1A	; 26
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	bc 01       	movw	r22, r24
    1926:	26 9f       	mul	r18, r22
    1928:	c0 01       	movw	r24, r0
    192a:	27 9f       	mul	r18, r23
    192c:	90 0d       	add	r25, r0
    192e:	36 9f       	mul	r19, r22
    1930:	90 0d       	add	r25, r0
    1932:	11 24       	eor	r1, r1
    1934:	fc 01       	movw	r30, r24
    1936:	e0 58       	subi	r30, 0x80	; 128
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	90 81       	ld	r25, Z
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	89 17       	cp	r24, r25
    1940:	08 f4       	brcc	.+2      	; 0x1944 <ReadSequence+0xc6>
    1942:	ae cf       	rjmp	.-164    	; 0x18a0 <ReadSequence+0x22>
	{
		DIO_enuReadPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8InputPins[u8CntrLoc] , &u8ReadsLoc);
		u32ReturnLoc|= u8ReadsLoc<< u8CntrLoc;
	}
	return u32ReturnLoc;
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	ab 81       	ldd	r26, Y+3	; 0x03
    194a:	bc 81       	ldd	r27, Y+4	; 0x04
}
    194c:	bc 01       	movw	r22, r24
    194e:	cd 01       	movw	r24, r26
    1950:	27 96       	adiw	r28, 0x07	; 7
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <RepValue>:


static uint8 RepValue(uint8 u8KeyNumCpy ,  uint32 u32ValueCpy , uint8 u8SeqCpy)
{
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	28 97       	sbiw	r28, 0x08	; 8
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	de bf       	out	0x3e, r29	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	cd bf       	out	0x3d, r28	; 61
    1976:	8b 83       	std	Y+3, r24	; 0x03
    1978:	4c 83       	std	Y+4, r20	; 0x04
    197a:	5d 83       	std	Y+5, r21	; 0x05
    197c:	6e 83       	std	Y+6, r22	; 0x06
    197e:	7f 83       	std	Y+7, r23	; 0x07
    1980:	28 87       	std	Y+8, r18	; 0x08
	uint8 u8CntrLoc ;
	uint8 u8ReturnLoc = 0xFF ;
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	89 83       	std	Y+1, r24	; 0x01
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++)
    1986:	1a 82       	std	Y+2, r1	; 0x02
    1988:	3b c0       	rjmp	.+118    	; 0x1a00 <RepValue+0x9e>
	{
		if (GET_BIT(u32ValueCpy,u8CntrLoc) == 0)
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	ae 81       	ldd	r26, Y+6	; 0x06
    1996:	bf 81       	ldd	r27, Y+7	; 0x07
    1998:	02 2e       	mov	r0, r18
    199a:	04 c0       	rjmp	.+8      	; 0x19a4 <RepValue+0x42>
    199c:	b6 95       	lsr	r27
    199e:	a7 95       	ror	r26
    19a0:	97 95       	ror	r25
    19a2:	87 95       	ror	r24
    19a4:	0a 94       	dec	r0
    19a6:	d2 f7       	brpl	.-12     	; 0x199c <RepValue+0x3a>
    19a8:	81 70       	andi	r24, 0x01	; 1
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	a0 70       	andi	r26, 0x00	; 0
    19ae:	b0 70       	andi	r27, 0x00	; 0
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	a1 05       	cpc	r26, r1
    19b4:	b1 05       	cpc	r27, r1
    19b6:	09 f5       	brne	.+66     	; 0x19fa <RepValue+0x98>
		{
			u8ReturnLoc = KEYPAD_astrCfg[u8KeyNumCpy].KEYPAD_au8Rep[u8CntrLoc][u8SeqCpy];
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	68 2f       	mov	r22, r24
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	88 85       	ldd	r24, Y+8	; 0x08
    19c6:	48 2f       	mov	r20, r24
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	22 0f       	add	r18, r18
    19cc:	33 1f       	adc	r19, r19
    19ce:	22 0f       	add	r18, r18
    19d0:	33 1f       	adc	r19, r19
    19d2:	8a e1       	ldi	r24, 0x1A	; 26
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	fc 01       	movw	r30, r24
    19d8:	6e 9f       	mul	r22, r30
    19da:	c0 01       	movw	r24, r0
    19dc:	6f 9f       	mul	r22, r31
    19de:	90 0d       	add	r25, r0
    19e0:	7e 9f       	mul	r23, r30
    19e2:	90 0d       	add	r25, r0
    19e4:	11 24       	eor	r1, r1
    19e6:	82 0f       	add	r24, r18
    19e8:	93 1f       	adc	r25, r19
    19ea:	84 0f       	add	r24, r20
    19ec:	95 1f       	adc	r25, r21
    19ee:	fc 01       	movw	r30, r24
    19f0:	e0 59       	subi	r30, 0x90	; 144
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	89 83       	std	Y+1, r24	; 0x01
    19f8:	18 c0       	rjmp	.+48     	; 0x1a2a <RepValue+0xc8>

static uint8 RepValue(uint8 u8KeyNumCpy ,  uint32 u32ValueCpy , uint8 u8SeqCpy)
{
	uint8 u8CntrLoc ;
	uint8 u8ReturnLoc = 0xFF ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++)
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	8f 5f       	subi	r24, 0xFF	; 255
    19fe:	8a 83       	std	Y+2, r24	; 0x02
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	8a e1       	ldi	r24, 0x1A	; 26
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	24 9f       	mul	r18, r20
    1a0e:	c0 01       	movw	r24, r0
    1a10:	25 9f       	mul	r18, r21
    1a12:	90 0d       	add	r25, r0
    1a14:	34 9f       	mul	r19, r20
    1a16:	90 0d       	add	r25, r0
    1a18:	11 24       	eor	r1, r1
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	e0 58       	subi	r30, 0x80	; 128
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	90 81       	ld	r25, Z
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	89 17       	cp	r24, r25
    1a26:	08 f4       	brcc	.+2      	; 0x1a2a <RepValue+0xc8>
    1a28:	b0 cf       	rjmp	.-160    	; 0x198a <RepValue+0x28>
		{
			u8ReturnLoc = KEYPAD_astrCfg[u8KeyNumCpy].KEYPAD_au8Rep[u8CntrLoc][u8SeqCpy];
			break ;
		}
	}
	return u8ReturnLoc ;
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01

	
	
}
    1a2c:	28 96       	adiw	r28, 0x08	; 8
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	f8 94       	cli
    1a32:	de bf       	out	0x3e, r29	; 62
    1a34:	0f be       	out	0x3f, r0	; 63
    1a36:	cd bf       	out	0x3d, r28	; 61
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <LCD_vidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"

static uint8 InitFinshed=0;
void LCD_vidInit(void)
{
    1a3e:	0f 93       	push	r16
    1a40:	1f 93       	push	r17
    1a42:	df 93       	push	r29
    1a44:	cf 93       	push	r28
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	ce 58       	subi	r28, 0x8E	; 142
    1a4c:	d0 40       	sbci	r29, 0x00	; 0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc =0;
    1a58:	fe 01       	movw	r30, r28
    1a5a:	e3 57       	subi	r30, 0x73	; 115
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	10 82       	st	Z, r1
	for(u8CntrLoc = 0 ;u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++ )
    1a60:	fe 01       	movw	r30, r28
    1a62:	e2 57       	subi	r30, 0x72	; 114
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	10 82       	st	Z, r1
    1a68:	0c 94 83 15 	jmp	0x2b06	; 0x2b06 <LCD_vidInit+0x10c8>
	{
		if (LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e2 57       	subi	r30, 0x72	; 114
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	c9 01       	movw	r24, r18
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	82 0f       	add	r24, r18
    1a80:	93 1f       	adc	r25, r19
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	88 0f       	add	r24, r24
    1a88:	99 1f       	adc	r25, r25
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	e3 57       	subi	r30, 0x73	; 115
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	81 70       	andi	r24, 0x01	; 1
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	09 f0       	breq	.+2      	; 0x1a9a <LCD_vidInit+0x5c>
    1a98:	75 c4       	rjmp	.+2282   	; 0x2384 <LCD_vidInit+0x946>
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	e7 57       	subi	r30, 0x77	; 119
    1a9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	a0 ef       	ldi	r26, 0xF0	; 240
    1aa6:	b1 e4       	ldi	r27, 0x41	; 65
    1aa8:	80 83       	st	Z, r24
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	a2 83       	std	Z+2, r26	; 0x02
    1aae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	0b 57       	subi	r16, 0x7B	; 123
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 57       	subi	r30, 0x77	; 119
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4a ef       	ldi	r20, 0xFA	; 250
    1aca:	54 e4       	ldi	r21, 0x44	; 68
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	f8 01       	movw	r30, r16
    1ad6:	80 83       	st	Z, r24
    1ad8:	91 83       	std	Z+1, r25	; 0x01
    1ada:	a2 83       	std	Z+2, r26	; 0x02
    1adc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ade:	fe 01       	movw	r30, r28
    1ae0:	eb 57       	subi	r30, 0x7B	; 123
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	60 81       	ld	r22, Z
    1ae6:	71 81       	ldd	r23, Z+1	; 0x01
    1ae8:	82 81       	ldd	r24, Z+2	; 0x02
    1aea:	93 81       	ldd	r25, Z+3	; 0x03
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	40 e8       	ldi	r20, 0x80	; 128
    1af2:	5f e3       	ldi	r21, 0x3F	; 63
    1af4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1af8:	88 23       	and	r24, r24
    1afa:	44 f4       	brge	.+16     	; 0x1b0c <LCD_vidInit+0xce>
		__ticks = 1;
    1afc:	fe 01       	movw	r30, r28
    1afe:	ed 57       	subi	r30, 0x7D	; 125
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	91 83       	std	Z+1, r25	; 0x01
    1b08:	80 83       	st	Z, r24
    1b0a:	64 c0       	rjmp	.+200    	; 0x1bd4 <LCD_vidInit+0x196>
	else if (__tmp > 65535)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	eb 57       	subi	r30, 0x7B	; 123
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	60 81       	ld	r22, Z
    1b14:	71 81       	ldd	r23, Z+1	; 0x01
    1b16:	82 81       	ldd	r24, Z+2	; 0x02
    1b18:	93 81       	ldd	r25, Z+3	; 0x03
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	0c f0       	brlt	.+2      	; 0x1b2c <LCD_vidInit+0xee>
    1b2a:	43 c0       	rjmp	.+134    	; 0x1bb2 <LCD_vidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2c:	fe 01       	movw	r30, r28
    1b2e:	e7 57       	subi	r30, 0x77	; 119
    1b30:	ff 4f       	sbci	r31, 0xFF	; 255
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	93 81       	ldd	r25, Z+3	; 0x03
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	40 e2       	ldi	r20, 0x20	; 32
    1b40:	51 e4       	ldi	r21, 0x41	; 65
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8e 01       	movw	r16, r28
    1b4c:	0d 57       	subi	r16, 0x7D	; 125
    1b4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b50:	bc 01       	movw	r22, r24
    1b52:	cd 01       	movw	r24, r26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	1f c0       	rjmp	.+62     	; 0x1ba2 <LCD_vidInit+0x164>
    1b64:	fe 01       	movw	r30, r28
    1b66:	ef 57       	subi	r30, 0x7F	; 127
    1b68:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6a:	88 ec       	ldi	r24, 0xC8	; 200
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	91 83       	std	Z+1, r25	; 0x01
    1b70:	80 83       	st	Z, r24
    1b72:	fe 01       	movw	r30, r28
    1b74:	ef 57       	subi	r30, 0x7F	; 127
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	91 81       	ldd	r25, Z+1	; 0x01
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <LCD_vidInit+0x13e>
    1b80:	fe 01       	movw	r30, r28
    1b82:	ef 57       	subi	r30, 0x7F	; 127
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	91 83       	std	Z+1, r25	; 0x01
    1b88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b8a:	de 01       	movw	r26, r28
    1b8c:	ad 57       	subi	r26, 0x7D	; 125
    1b8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b90:	fe 01       	movw	r30, r28
    1b92:	ed 57       	subi	r30, 0x7D	; 125
    1b94:	ff 4f       	sbci	r31, 0xFF	; 255
    1b96:	80 81       	ld	r24, Z
    1b98:	91 81       	ldd	r25, Z+1	; 0x01
    1b9a:	01 97       	sbiw	r24, 0x01	; 1
    1b9c:	11 96       	adiw	r26, 0x01	; 1
    1b9e:	9c 93       	st	X, r25
    1ba0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 57       	subi	r30, 0x7D	; 125
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	d1 f6       	brne	.-76     	; 0x1b64 <LCD_vidInit+0x126>
    1bb0:	27 c0       	rjmp	.+78     	; 0x1c00 <LCD_vidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb2:	8e 01       	movw	r16, r28
    1bb4:	0d 57       	subi	r16, 0x7D	; 125
    1bb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb8:	fe 01       	movw	r30, r28
    1bba:	eb 57       	subi	r30, 0x7B	; 123
    1bbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbe:	60 81       	ld	r22, Z
    1bc0:	71 81       	ldd	r23, Z+1	; 0x01
    1bc2:	82 81       	ldd	r24, Z+2	; 0x02
    1bc4:	93 81       	ldd	r25, Z+3	; 0x03
    1bc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	cb 01       	movw	r24, r22
    1bce:	f8 01       	movw	r30, r16
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    1bd4:	de 01       	movw	r26, r28
    1bd6:	a1 58       	subi	r26, 0x81	; 129
    1bd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bda:	fe 01       	movw	r30, r28
    1bdc:	ed 57       	subi	r30, 0x7D	; 125
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	91 81       	ldd	r25, Z+1	; 0x01
    1be4:	8d 93       	st	X+, r24
    1be6:	9c 93       	st	X, r25
    1be8:	fe 01       	movw	r30, r28
    1bea:	e1 58       	subi	r30, 0x81	; 129
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	91 81       	ldd	r25, Z+1	; 0x01
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_vidInit+0x1b4>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e1 58       	subi	r30, 0x81	; 129
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	91 83       	std	Z+1, r25	; 0x01
    1bfe:	80 83       	st	Z, r24
		{
			
			_delay_ms(30);
			/*0b0011NF00*/
			u8CmdLoc = 0b00110000 |
    1c00:	fe 01       	movw	r30, r28
    1c02:	e2 57       	subi	r30, 0x72	; 114
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	28 2f       	mov	r18, r24
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	82 0f       	add	r24, r18
    1c14:	93 1f       	adc	r25, r19
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	88 0f       	add	r24, r24
    1c1c:	99 1f       	adc	r25, r25
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e3 57       	subi	r30, 0x73	; 115
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
    1c24:	80 81       	ld	r24, Z
    1c26:	86 95       	lsr	r24
    1c28:	81 70       	andi	r24, 0x01	; 1
    1c2a:	88 2f       	mov	r24, r24
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	88 0f       	add	r24, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	88 0f       	add	r24, r24
    1c34:	99 1f       	adc	r25, r25
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	40 63       	ori	r20, 0x30	; 48
    1c3e:	fe 01       	movw	r30, r28
    1c40:	e2 57       	subi	r30, 0x72	; 114
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	80 81       	ld	r24, Z
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	82 0f       	add	r24, r18
    1c52:	93 1f       	adc	r25, r19
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e3 57       	subi	r30, 0x73	; 115
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	80 81       	ld	r24, Z
    1c64:	86 95       	lsr	r24
    1c66:	86 95       	lsr	r24
    1c68:	81 70       	andi	r24, 0x01	; 1
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	88 0f       	add	r24, r24
    1c74:	99 1f       	adc	r25, r25
    1c76:	84 2b       	or	r24, r20
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e3 57       	subi	r30, 0x73	; 115
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8LineNum<<3|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Font<<2;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1c80:	fe 01       	movw	r30, r28
    1c82:	e2 57       	subi	r30, 0x72	; 114
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	de 01       	movw	r26, r28
    1c88:	a3 57       	subi	r26, 0x73	; 115
    1c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	6c 91       	ld	r22, X
    1c90:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e5 58       	subi	r30, 0x85	; 133
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ca0:	bf e3       	ldi	r27, 0x3F	; 63
    1ca2:	80 83       	st	Z, r24
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	a2 83       	std	Z+2, r26	; 0x02
    1ca8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	8e 01       	movw	r16, r28
    1cac:	09 58       	subi	r16, 0x89	; 137
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e5 58       	subi	r30, 0x85	; 133
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a ef       	ldi	r20, 0xFA	; 250
    1cc4:	54 e4       	ldi	r21, 0x44	; 68
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	f8 01       	movw	r30, r16
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e9 58       	subi	r30, 0x89	; 137
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	44 f4       	brge	.+16     	; 0x1d06 <LCD_vidInit+0x2c8>
		__ticks = 1;
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	eb 58       	subi	r30, 0x8B	; 139
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	64 c0       	rjmp	.+200    	; 0x1dce <LCD_vidInit+0x390>
	else if (__tmp > 65535)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e9 58       	subi	r30, 0x89	; 137
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <LCD_vidInit+0x2e8>
    1d24:	43 c0       	rjmp	.+134    	; 0x1dac <LCD_vidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	e5 58       	subi	r30, 0x85	; 133
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8e 01       	movw	r16, r28
    1d46:	0b 58       	subi	r16, 0x8B	; 139
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <LCD_vidInit+0x35e>
    1d5e:	fe 01       	movw	r30, r28
    1d60:	ed 58       	subi	r30, 0x8D	; 141
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	88 ec       	ldi	r24, 0xC8	; 200
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ed 58       	subi	r30, 0x8D	; 141
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_vidInit+0x338>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	ed 58       	subi	r30, 0x8D	; 141
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	de 01       	movw	r26, r28
    1d86:	ab 58       	subi	r26, 0x8B	; 139
    1d88:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	eb 58       	subi	r30, 0x8B	; 139
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	eb 58       	subi	r30, 0x8B	; 139
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	d1 f6       	brne	.-76     	; 0x1d5e <LCD_vidInit+0x320>
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <LCD_vidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	8e 01       	movw	r16, r28
    1dae:	0b 58       	subi	r16, 0x8B	; 139
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e9 58       	subi	r30, 0x89	; 137
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	de 01       	movw	r26, r28
    1dd0:	af 58       	subi	r26, 0x8F	; 143
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	eb 58       	subi	r30, 0x8B	; 139
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	8d 93       	st	X+, r24
    1de0:	9c 93       	st	X, r25
    1de2:	fe 01       	movw	r30, r28
    1de4:	ef 58       	subi	r30, 0x8F	; 143
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <LCD_vidInit+0x3ae>
    1df0:	fe 01       	movw	r30, r28
    1df2:	ef 58       	subi	r30, 0x8F	; 143
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
			_delay_ms(1);

			/*0b00001DCB*/
			u8CmdLoc = 0b00001000|
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	e2 57       	subi	r30, 0x72	; 114
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	80 81       	ld	r24, Z
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	c9 01       	movw	r24, r18
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e3 57       	subi	r30, 0x73	; 115
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	86 95       	lsr	r24
    1e22:	86 95       	lsr	r24
    1e24:	86 95       	lsr	r24
    1e26:	81 70       	andi	r24, 0x01	; 1
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	88 0f       	add	r24, r24
    1e32:	99 1f       	adc	r25, r25
    1e34:	48 2f       	mov	r20, r24
    1e36:	48 60       	ori	r20, 0x08	; 8
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e2 57       	subi	r30, 0x72	; 114
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	c9 01       	movw	r24, r18
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	82 0f       	add	r24, r18
    1e4c:	93 1f       	adc	r25, r19
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	fc 01       	movw	r30, r24
    1e58:	e3 57       	subi	r30, 0x73	; 115
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	80 81       	ld	r24, Z
    1e5e:	82 95       	swap	r24
    1e60:	8f 70       	andi	r24, 0x0F	; 15
    1e62:	81 70       	andi	r24, 0x01	; 1
    1e64:	88 2f       	mov	r24, r24
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	88 0f       	add	r24, r24
    1e6a:	99 1f       	adc	r25, r25
    1e6c:	48 2b       	or	r20, r24
    1e6e:	fe 01       	movw	r30, r28
    1e70:	e2 57       	subi	r30, 0x72	; 114
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 81       	ld	r24, Z
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	88 0f       	add	r24, r24
    1e8a:	99 1f       	adc	r25, r25
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e3 57       	subi	r30, 0x73	; 115
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	82 95       	swap	r24
    1e96:	86 95       	lsr	r24
    1e98:	87 70       	andi	r24, 0x07	; 7
    1e9a:	81 70       	andi	r24, 0x01	; 1
    1e9c:	84 2b       	or	r24, r20
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e3 57       	subi	r30, 0x73	; 115
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8DisplayStatus<< 2|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8CursorStatus<<1|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8BlinkStatus<<0;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	e2 57       	subi	r30, 0x72	; 114
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	de 01       	movw	r26, r28
    1eae:	a3 57       	subi	r26, 0x73	; 115
    1eb0:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	6c 91       	ld	r22, X
    1eb6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e3 59       	subi	r30, 0x93	; 147
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	a0 e8       	ldi	r26, 0x80	; 128
    1ec6:	bf e3       	ldi	r27, 0x3F	; 63
    1ec8:	80 83       	st	Z, r24
    1eca:	91 83       	std	Z+1, r25	; 0x01
    1ecc:	a2 83       	std	Z+2, r26	; 0x02
    1ece:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed0:	8e 01       	movw	r16, r28
    1ed2:	07 59       	subi	r16, 0x97	; 151
    1ed4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e3 59       	subi	r30, 0x93	; 147
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	4a ef       	ldi	r20, 0xFA	; 250
    1eea:	54 e4       	ldi	r21, 0x44	; 68
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	80 83       	st	Z, r24
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	a2 83       	std	Z+2, r26	; 0x02
    1efc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 59       	subi	r30, 0x97	; 151
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e8       	ldi	r20, 0x80	; 128
    1f12:	5f e3       	ldi	r21, 0x3F	; 63
    1f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f18:	88 23       	and	r24, r24
    1f1a:	44 f4       	brge	.+16     	; 0x1f2c <LCD_vidInit+0x4ee>
		__ticks = 1;
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	e9 59       	subi	r30, 0x99	; 153
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
    1f2a:	64 c0       	rjmp	.+200    	; 0x1ff4 <LCD_vidInit+0x5b6>
	else if (__tmp > 65535)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e7 59       	subi	r30, 0x97	; 151
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	60 81       	ld	r22, Z
    1f34:	71 81       	ldd	r23, Z+1	; 0x01
    1f36:	82 81       	ldd	r24, Z+2	; 0x02
    1f38:	93 81       	ldd	r25, Z+3	; 0x03
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	0c f0       	brlt	.+2      	; 0x1f4c <LCD_vidInit+0x50e>
    1f4a:	43 c0       	rjmp	.+134    	; 0x1fd2 <LCD_vidInit+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e3 59       	subi	r30, 0x93	; 147
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	60 81       	ld	r22, Z
    1f54:	71 81       	ldd	r23, Z+1	; 0x01
    1f56:	82 81       	ldd	r24, Z+2	; 0x02
    1f58:	93 81       	ldd	r25, Z+3	; 0x03
    1f5a:	20 e0       	ldi	r18, 0x00	; 0
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	40 e2       	ldi	r20, 0x20	; 32
    1f60:	51 e4       	ldi	r21, 0x41	; 65
    1f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f66:	dc 01       	movw	r26, r24
    1f68:	cb 01       	movw	r24, r22
    1f6a:	8e 01       	movw	r16, r28
    1f6c:	09 59       	subi	r16, 0x99	; 153
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	91 83       	std	Z+1, r25	; 0x01
    1f80:	80 83       	st	Z, r24
    1f82:	1f c0       	rjmp	.+62     	; 0x1fc2 <LCD_vidInit+0x584>
    1f84:	fe 01       	movw	r30, r28
    1f86:	eb 59       	subi	r30, 0x9B	; 155
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	88 ec       	ldi	r24, 0xC8	; 200
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	91 83       	std	Z+1, r25	; 0x01
    1f90:	80 83       	st	Z, r24
    1f92:	fe 01       	movw	r30, r28
    1f94:	eb 59       	subi	r30, 0x9B	; 155
    1f96:	ff 4f       	sbci	r31, 0xFF	; 255
    1f98:	80 81       	ld	r24, Z
    1f9a:	91 81       	ldd	r25, Z+1	; 0x01
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	f1 f7       	brne	.-4      	; 0x1f9c <LCD_vidInit+0x55e>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	eb 59       	subi	r30, 0x9B	; 155
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	de 01       	movw	r26, r28
    1fac:	a9 59       	subi	r26, 0x99	; 153
    1fae:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb0:	fe 01       	movw	r30, r28
    1fb2:	e9 59       	subi	r30, 0x99	; 153
    1fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb6:	80 81       	ld	r24, Z
    1fb8:	91 81       	ldd	r25, Z+1	; 0x01
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	11 96       	adiw	r26, 0x01	; 1
    1fbe:	9c 93       	st	X, r25
    1fc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e9 59       	subi	r30, 0x99	; 153
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	d1 f6       	brne	.-76     	; 0x1f84 <LCD_vidInit+0x546>
    1fd0:	27 c0       	rjmp	.+78     	; 0x2020 <LCD_vidInit+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd2:	8e 01       	movw	r16, r28
    1fd4:	09 59       	subi	r16, 0x99	; 153
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	fe 01       	movw	r30, r28
    1fda:	e7 59       	subi	r30, 0x97	; 151
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	60 81       	ld	r22, Z
    1fe0:	71 81       	ldd	r23, Z+1	; 0x01
    1fe2:	82 81       	ldd	r24, Z+2	; 0x02
    1fe4:	93 81       	ldd	r25, Z+3	; 0x03
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fea:	dc 01       	movw	r26, r24
    1fec:	cb 01       	movw	r24, r22
    1fee:	f8 01       	movw	r30, r16
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
    1ff4:	de 01       	movw	r26, r28
    1ff6:	ad 59       	subi	r26, 0x9D	; 157
    1ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	e9 59       	subi	r30, 0x99	; 153
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 81       	ld	r24, Z
    2002:	91 81       	ldd	r25, Z+1	; 0x01
    2004:	8d 93       	st	X+, r24
    2006:	9c 93       	st	X, r25
    2008:	fe 01       	movw	r30, r28
    200a:	ed 59       	subi	r30, 0x9D	; 157
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	80 81       	ld	r24, Z
    2010:	91 81       	ldd	r25, Z+1	; 0x01
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <LCD_vidInit+0x5d4>
    2016:	fe 01       	movw	r30, r28
    2018:	ed 59       	subi	r30, 0x9D	; 157
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	80 83       	st	Z, r24
			_delay_ms(1);
			
			LCD_vidSendCmd(u8CntrLoc , LCD_CLR);
    2020:	fe 01       	movw	r30, r28
    2022:	e2 57       	subi	r30, 0x72	; 114
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	61 e0       	ldi	r22, 0x01	; 1
    202a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    202e:	fe 01       	movw	r30, r28
    2030:	e1 5a       	subi	r30, 0xA1	; 161
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e4       	ldi	r27, 0x40	; 64
    203c:	80 83       	st	Z, r24
    203e:	91 83       	std	Z+1, r25	; 0x01
    2040:	a2 83       	std	Z+2, r26	; 0x02
    2042:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2044:	8e 01       	movw	r16, r28
    2046:	05 5a       	subi	r16, 0xA5	; 165
    2048:	1f 4f       	sbci	r17, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	e1 5a       	subi	r30, 0xA1	; 161
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	60 81       	ld	r22, Z
    2052:	71 81       	ldd	r23, Z+1	; 0x01
    2054:	82 81       	ldd	r24, Z+2	; 0x02
    2056:	93 81       	ldd	r25, Z+3	; 0x03
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	4a ef       	ldi	r20, 0xFA	; 250
    205e:	54 e4       	ldi	r21, 0x44	; 68
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	f8 01       	movw	r30, r16
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2072:	fe 01       	movw	r30, r28
    2074:	e5 5a       	subi	r30, 0xA5	; 165
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	60 81       	ld	r22, Z
    207a:	71 81       	ldd	r23, Z+1	; 0x01
    207c:	82 81       	ldd	r24, Z+2	; 0x02
    207e:	93 81       	ldd	r25, Z+3	; 0x03
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 e8       	ldi	r20, 0x80	; 128
    2086:	5f e3       	ldi	r21, 0x3F	; 63
    2088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    208c:	88 23       	and	r24, r24
    208e:	44 f4       	brge	.+16     	; 0x20a0 <LCD_vidInit+0x662>
		__ticks = 1;
    2090:	fe 01       	movw	r30, r28
    2092:	e7 5a       	subi	r30, 0xA7	; 167
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	64 c0       	rjmp	.+200    	; 0x2168 <LCD_vidInit+0x72a>
	else if (__tmp > 65535)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5a       	subi	r30, 0xA5	; 165
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	3f ef       	ldi	r19, 0xFF	; 255
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	57 e4       	ldi	r21, 0x47	; 71
    20b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <LCD_vidInit+0x682>
    20be:	43 c0       	rjmp	.+134    	; 0x2146 <LCD_vidInit+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c0:	fe 01       	movw	r30, r28
    20c2:	e1 5a       	subi	r30, 0xA1	; 161
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	60 81       	ld	r22, Z
    20c8:	71 81       	ldd	r23, Z+1	; 0x01
    20ca:	82 81       	ldd	r24, Z+2	; 0x02
    20cc:	93 81       	ldd	r25, Z+3	; 0x03
    20ce:	20 e0       	ldi	r18, 0x00	; 0
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	40 e2       	ldi	r20, 0x20	; 32
    20d4:	51 e4       	ldi	r21, 0x41	; 65
    20d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20da:	dc 01       	movw	r26, r24
    20dc:	cb 01       	movw	r24, r22
    20de:	8e 01       	movw	r16, r28
    20e0:	07 5a       	subi	r16, 0xA7	; 167
    20e2:	1f 4f       	sbci	r17, 0xFF	; 255
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	f8 01       	movw	r30, r16
    20f2:	91 83       	std	Z+1, r25	; 0x01
    20f4:	80 83       	st	Z, r24
    20f6:	1f c0       	rjmp	.+62     	; 0x2136 <LCD_vidInit+0x6f8>
    20f8:	fe 01       	movw	r30, r28
    20fa:	e9 5a       	subi	r30, 0xA9	; 169
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	88 ec       	ldi	r24, 0xC8	; 200
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	91 83       	std	Z+1, r25	; 0x01
    2104:	80 83       	st	Z, r24
    2106:	fe 01       	movw	r30, r28
    2108:	e9 5a       	subi	r30, 0xA9	; 169
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_vidInit+0x6d2>
    2114:	fe 01       	movw	r30, r28
    2116:	e9 5a       	subi	r30, 0xA9	; 169
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    211e:	de 01       	movw	r26, r28
    2120:	a7 5a       	subi	r26, 0xA7	; 167
    2122:	bf 4f       	sbci	r27, 0xFF	; 255
    2124:	fe 01       	movw	r30, r28
    2126:	e7 5a       	subi	r30, 0xA7	; 167
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 93       	st	X, r25
    2134:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	fe 01       	movw	r30, r28
    2138:	e7 5a       	subi	r30, 0xA7	; 167
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	00 97       	sbiw	r24, 0x00	; 0
    2142:	d1 f6       	brne	.-76     	; 0x20f8 <LCD_vidInit+0x6ba>
    2144:	27 c0       	rjmp	.+78     	; 0x2194 <LCD_vidInit+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2146:	8e 01       	movw	r16, r28
    2148:	07 5a       	subi	r16, 0xA7	; 167
    214a:	1f 4f       	sbci	r17, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	e5 5a       	subi	r30, 0xA5	; 165
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	60 81       	ld	r22, Z
    2154:	71 81       	ldd	r23, Z+1	; 0x01
    2156:	82 81       	ldd	r24, Z+2	; 0x02
    2158:	93 81       	ldd	r25, Z+3	; 0x03
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	f8 01       	movw	r30, r16
    2164:	91 83       	std	Z+1, r25	; 0x01
    2166:	80 83       	st	Z, r24
    2168:	de 01       	movw	r26, r28
    216a:	ab 5a       	subi	r26, 0xAB	; 171
    216c:	bf 4f       	sbci	r27, 0xFF	; 255
    216e:	fe 01       	movw	r30, r28
    2170:	e7 5a       	subi	r30, 0xA7	; 167
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	80 81       	ld	r24, Z
    2176:	91 81       	ldd	r25, Z+1	; 0x01
    2178:	8d 93       	st	X+, r24
    217a:	9c 93       	st	X, r25
    217c:	fe 01       	movw	r30, r28
    217e:	eb 5a       	subi	r30, 0xAB	; 171
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 81       	ld	r24, Z
    2184:	91 81       	ldd	r25, Z+1	; 0x01
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	f1 f7       	brne	.-4      	; 0x2186 <LCD_vidInit+0x748>
    218a:	fe 01       	movw	r30, r28
    218c:	eb 5a       	subi	r30, 0xAB	; 171
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	80 83       	st	Z, r24
			_delay_ms(2);
			
			/*0b000001 I/D SH*/
			u8CmdLoc = 0b00000100|
    2194:	fe 01       	movw	r30, r28
    2196:	e2 57       	subi	r30, 0x72	; 114
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	c9 01       	movw	r24, r18
    21a2:	88 0f       	add	r24, r24
    21a4:	99 1f       	adc	r25, r25
    21a6:	82 0f       	add	r24, r18
    21a8:	93 1f       	adc	r25, r19
    21aa:	88 0f       	add	r24, r24
    21ac:	99 1f       	adc	r25, r25
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	fc 01       	movw	r30, r24
    21b4:	e3 57       	subi	r30, 0x73	; 115
    21b6:	ff 4f       	sbci	r31, 0xFF	; 255
    21b8:	80 81       	ld	r24, Z
    21ba:	82 95       	swap	r24
    21bc:	86 95       	lsr	r24
    21be:	86 95       	lsr	r24
    21c0:	83 70       	andi	r24, 0x03	; 3
    21c2:	81 70       	andi	r24, 0x01	; 1
    21c4:	88 2f       	mov	r24, r24
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	88 0f       	add	r24, r24
    21ca:	99 1f       	adc	r25, r25
    21cc:	48 2f       	mov	r20, r24
    21ce:	44 60       	ori	r20, 0x04	; 4
    21d0:	fe 01       	movw	r30, r28
    21d2:	e2 57       	subi	r30, 0x72	; 114
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	80 81       	ld	r24, Z
    21d8:	28 2f       	mov	r18, r24
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	c9 01       	movw	r24, r18
    21de:	88 0f       	add	r24, r24
    21e0:	99 1f       	adc	r25, r25
    21e2:	82 0f       	add	r24, r18
    21e4:	93 1f       	adc	r25, r19
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	fc 01       	movw	r30, r24
    21f0:	e3 57       	subi	r30, 0x73	; 115
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	80 81       	ld	r24, Z
    21f6:	88 1f       	adc	r24, r24
    21f8:	88 27       	eor	r24, r24
    21fa:	88 1f       	adc	r24, r24
    21fc:	84 2b       	or	r24, r20
    21fe:	fe 01       	movw	r30, r28
    2200:	e3 57       	subi	r30, 0x73	; 115
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8In_DecrementMode<< 1|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8ShiftStatus<< 0;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2206:	fe 01       	movw	r30, r28
    2208:	e2 57       	subi	r30, 0x72	; 114
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	de 01       	movw	r26, r28
    220e:	a3 57       	subi	r26, 0x73	; 115
    2210:	bf 4f       	sbci	r27, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	6c 91       	ld	r22, X
    2216:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    221a:	fe 01       	movw	r30, r28
    221c:	ef 5a       	subi	r30, 0xAF	; 175
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e0       	ldi	r26, 0x00	; 0
    2226:	b0 e4       	ldi	r27, 0x40	; 64
    2228:	80 83       	st	Z, r24
    222a:	91 83       	std	Z+1, r25	; 0x01
    222c:	a2 83       	std	Z+2, r26	; 0x02
    222e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	8e 01       	movw	r16, r28
    2232:	03 5b       	subi	r16, 0xB3	; 179
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	fe 01       	movw	r30, r28
    2238:	ef 5a       	subi	r30, 0xAF	; 175
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	4a ef       	ldi	r20, 0xFA	; 250
    224a:	54 e4       	ldi	r21, 0x44	; 68
    224c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2250:	dc 01       	movw	r26, r24
    2252:	cb 01       	movw	r24, r22
    2254:	f8 01       	movw	r30, r16
    2256:	80 83       	st	Z, r24
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	a2 83       	std	Z+2, r26	; 0x02
    225c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    225e:	fe 01       	movw	r30, r28
    2260:	e3 5b       	subi	r30, 0xB3	; 179
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	60 81       	ld	r22, Z
    2266:	71 81       	ldd	r23, Z+1	; 0x01
    2268:	82 81       	ldd	r24, Z+2	; 0x02
    226a:	93 81       	ldd	r25, Z+3	; 0x03
    226c:	20 e0       	ldi	r18, 0x00	; 0
    226e:	30 e0       	ldi	r19, 0x00	; 0
    2270:	40 e8       	ldi	r20, 0x80	; 128
    2272:	5f e3       	ldi	r21, 0x3F	; 63
    2274:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2278:	88 23       	and	r24, r24
    227a:	44 f4       	brge	.+16     	; 0x228c <LCD_vidInit+0x84e>
		__ticks = 1;
    227c:	fe 01       	movw	r30, r28
    227e:	e5 5b       	subi	r30, 0xB5	; 181
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	64 c0       	rjmp	.+200    	; 0x2354 <LCD_vidInit+0x916>
	else if (__tmp > 65535)
    228c:	fe 01       	movw	r30, r28
    228e:	e3 5b       	subi	r30, 0xB3	; 179
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	3f ef       	ldi	r19, 0xFF	; 255
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	57 e4       	ldi	r21, 0x47	; 71
    22a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	0c f0       	brlt	.+2      	; 0x22ac <LCD_vidInit+0x86e>
    22aa:	43 c0       	rjmp	.+134    	; 0x2332 <LCD_vidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ac:	fe 01       	movw	r30, r28
    22ae:	ef 5a       	subi	r30, 0xAF	; 175
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e2       	ldi	r20, 0x20	; 32
    22c0:	51 e4       	ldi	r21, 0x41	; 65
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8e 01       	movw	r16, r28
    22cc:	05 5b       	subi	r16, 0xB5	; 181
    22ce:	1f 4f       	sbci	r17, 0xFF	; 255
    22d0:	bc 01       	movw	r22, r24
    22d2:	cd 01       	movw	r24, r26
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	f8 01       	movw	r30, r16
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
    22e2:	1f c0       	rjmp	.+62     	; 0x2322 <LCD_vidInit+0x8e4>
    22e4:	fe 01       	movw	r30, r28
    22e6:	e7 5b       	subi	r30, 0xB7	; 183
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	88 ec       	ldi	r24, 0xC8	; 200
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	80 83       	st	Z, r24
    22f2:	fe 01       	movw	r30, r28
    22f4:	e7 5b       	subi	r30, 0xB7	; 183
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_vidInit+0x8be>
    2300:	fe 01       	movw	r30, r28
    2302:	e7 5b       	subi	r30, 0xB7	; 183
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230a:	de 01       	movw	r26, r28
    230c:	a5 5b       	subi	r26, 0xB5	; 181
    230e:	bf 4f       	sbci	r27, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	e5 5b       	subi	r30, 0xB5	; 181
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	80 81       	ld	r24, Z
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	11 96       	adiw	r26, 0x01	; 1
    231e:	9c 93       	st	X, r25
    2320:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2322:	fe 01       	movw	r30, r28
    2324:	e5 5b       	subi	r30, 0xB5	; 181
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	d1 f6       	brne	.-76     	; 0x22e4 <LCD_vidInit+0x8a6>
    2330:	e1 c3       	rjmp	.+1986   	; 0x2af4 <LCD_vidInit+0x10b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2332:	8e 01       	movw	r16, r28
    2334:	05 5b       	subi	r16, 0xB5	; 181
    2336:	1f 4f       	sbci	r17, 0xFF	; 255
    2338:	fe 01       	movw	r30, r28
    233a:	e3 5b       	subi	r30, 0xB3	; 179
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	60 81       	ld	r22, Z
    2340:	71 81       	ldd	r23, Z+1	; 0x01
    2342:	82 81       	ldd	r24, Z+2	; 0x02
    2344:	93 81       	ldd	r25, Z+3	; 0x03
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	f8 01       	movw	r30, r16
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	80 83       	st	Z, r24
    2354:	de 01       	movw	r26, r28
    2356:	a9 5b       	subi	r26, 0xB9	; 185
    2358:	bf 4f       	sbci	r27, 0xFF	; 255
    235a:	fe 01       	movw	r30, r28
    235c:	e5 5b       	subi	r30, 0xB5	; 181
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	91 81       	ldd	r25, Z+1	; 0x01
    2364:	11 96       	adiw	r26, 0x01	; 1
    2366:	9c 93       	st	X, r25
    2368:	8e 93       	st	-X, r24
    236a:	fe 01       	movw	r30, r28
    236c:	e9 5b       	subi	r30, 0xB9	; 185
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_vidInit+0x936>
    2378:	fe 01       	movw	r30, r28
    237a:	e9 5b       	subi	r30, 0xB9	; 185
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	91 83       	std	Z+1, r25	; 0x01
    2380:	80 83       	st	Z, r24
    2382:	b8 c3       	rjmp	.+1904   	; 0x2af4 <LCD_vidInit+0x10b6>
    2384:	fe 01       	movw	r30, r28
    2386:	ed 5b       	subi	r30, 0xBD	; 189
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 ef       	ldi	r26, 0xF0	; 240
    2390:	b1 e4       	ldi	r27, 0x41	; 65
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	8e 01       	movw	r16, r28
    239c:	01 5c       	subi	r16, 0xC1	; 193
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 5b       	subi	r30, 0xBD	; 189
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c8:	fe 01       	movw	r30, r28
    23ca:	ff 96       	adiw	r30, 0x3f	; 63
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_vidInit+0x9b0>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e af       	std	Y+62, r25	; 0x3e
    23ea:	8d af       	std	Y+61, r24	; 0x3d
    23ec:	46 c0       	rjmp	.+140    	; 0x247a <LCD_vidInit+0xa3c>
	else if (__tmp > 65535)
    23ee:	fe 01       	movw	r30, r28
    23f0:	ff 96       	adiw	r30, 0x3f	; 63
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	64 f5       	brge	.+88     	; 0x2462 <LCD_vidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	fe 01       	movw	r30, r28
    240c:	ed 5b       	subi	r30, 0xBD	; 189
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e af       	std	Y+62, r25	; 0x3e
    2436:	8d af       	std	Y+61, r24	; 0x3d
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_vidInit+0xa1a>
    243a:	88 ec       	ldi	r24, 0xC8	; 200
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c af       	std	Y+60, r25	; 0x3c
    2440:	8b af       	std	Y+59, r24	; 0x3b
    2442:	8b ad       	ldd	r24, Y+59	; 0x3b
    2444:	9c ad       	ldd	r25, Y+60	; 0x3c
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_vidInit+0xa08>
    244a:	9c af       	std	Y+60, r25	; 0x3c
    244c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2450:	9e ad       	ldd	r25, Y+62	; 0x3e
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9e af       	std	Y+62, r25	; 0x3e
    2456:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8d ad       	ldd	r24, Y+61	; 0x3d
    245a:	9e ad       	ldd	r25, Y+62	; 0x3e
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_vidInit+0x9fc>
    2460:	16 c0       	rjmp	.+44     	; 0x248e <LCD_vidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	fe 01       	movw	r30, r28
    2464:	ff 96       	adiw	r30, 0x3f	; 63
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e af       	std	Y+62, r25	; 0x3e
    2478:	8d af       	std	Y+61, r24	; 0x3d
    247a:	8d ad       	ldd	r24, Y+61	; 0x3d
    247c:	9e ad       	ldd	r25, Y+62	; 0x3e
    247e:	9a af       	std	Y+58, r25	; 0x3a
    2480:	89 af       	std	Y+57, r24	; 0x39
    2482:	89 ad       	ldd	r24, Y+57	; 0x39
    2484:	9a ad       	ldd	r25, Y+58	; 0x3a
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_vidInit+0xa48>
    248a:	9a af       	std	Y+58, r25	; 0x3a
    248c:	89 af       	std	Y+57, r24	; 0x39
		else
		{
			/*task initialize 4 bit mod ya fandem*/
			_delay_ms(30);
			/*0b00100000*/
			u8CmdLoc = 0b00100000;
    248e:	fe 01       	movw	r30, r28
    2490:	e3 57       	subi	r30, 0x73	; 115
    2492:	ff 4f       	sbci	r31, 0xFF	; 255
    2494:	80 e2       	ldi	r24, 0x20	; 32
    2496:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2498:	fe 01       	movw	r30, r28
    249a:	e2 57       	subi	r30, 0x72	; 114
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	de 01       	movw	r26, r28
    24a0:	a3 57       	subi	r26, 0x73	; 115
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	80 81       	ld	r24, Z
    24a6:	6c 91       	ld	r22, X
    24a8:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
			/*0b00100000*/
			u8CmdLoc = 0b00100000;
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 57       	subi	r30, 0x73	; 115
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 e2       	ldi	r24, 0x20	; 32
    24b4:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    24b6:	fe 01       	movw	r30, r28
    24b8:	e2 57       	subi	r30, 0x72	; 114
    24ba:	ff 4f       	sbci	r31, 0xFF	; 255
    24bc:	de 01       	movw	r26, r28
    24be:	a3 57       	subi	r26, 0x73	; 115
    24c0:	bf 4f       	sbci	r27, 0xFF	; 255
    24c2:	80 81       	ld	r24, Z
    24c4:	6c 91       	ld	r22, X
    24c6:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
			/*0bNF000000*/
			u8CmdLoc = 0b00000000 |
    24ca:	fe 01       	movw	r30, r28
    24cc:	e2 57       	subi	r30, 0x72	; 114
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	c9 01       	movw	r24, r18
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	82 0f       	add	r24, r18
    24de:	93 1f       	adc	r25, r19
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	fc 01       	movw	r30, r24
    24ea:	e3 57       	subi	r30, 0x73	; 115
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	86 95       	lsr	r24
    24f2:	81 70       	andi	r24, 0x01	; 1
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	96 95       	lsr	r25
    24fa:	98 2f       	mov	r25, r24
    24fc:	88 27       	eor	r24, r24
    24fe:	97 95       	ror	r25
    2500:	87 95       	ror	r24
    2502:	48 2f       	mov	r20, r24
    2504:	fe 01       	movw	r30, r28
    2506:	e2 57       	subi	r30, 0x72	; 114
    2508:	ff 4f       	sbci	r31, 0xFF	; 255
    250a:	80 81       	ld	r24, Z
    250c:	28 2f       	mov	r18, r24
    250e:	30 e0       	ldi	r19, 0x00	; 0
    2510:	c9 01       	movw	r24, r18
    2512:	88 0f       	add	r24, r24
    2514:	99 1f       	adc	r25, r25
    2516:	82 0f       	add	r24, r18
    2518:	93 1f       	adc	r25, r19
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	fc 01       	movw	r30, r24
    2524:	e3 57       	subi	r30, 0x73	; 115
    2526:	ff 4f       	sbci	r31, 0xFF	; 255
    2528:	80 81       	ld	r24, Z
    252a:	86 95       	lsr	r24
    252c:	86 95       	lsr	r24
    252e:	81 70       	andi	r24, 0x01	; 1
    2530:	88 2f       	mov	r24, r24
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	00 24       	eor	r0, r0
    2536:	96 95       	lsr	r25
    2538:	87 95       	ror	r24
    253a:	07 94       	ror	r0
    253c:	96 95       	lsr	r25
    253e:	87 95       	ror	r24
    2540:	07 94       	ror	r0
    2542:	98 2f       	mov	r25, r24
    2544:	80 2d       	mov	r24, r0
    2546:	84 2b       	or	r24, r20
    2548:	fe 01       	movw	r30, r28
    254a:	e3 57       	subi	r30, 0x73	; 115
    254c:	ff 4f       	sbci	r31, 0xFF	; 255
    254e:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8LineNum<<7|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Font<<6;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2550:	fe 01       	movw	r30, r28
    2552:	e2 57       	subi	r30, 0x72	; 114
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	de 01       	movw	r26, r28
    2558:	a3 57       	subi	r26, 0x73	; 115
    255a:	bf 4f       	sbci	r27, 0xFF	; 255
    255c:	80 81       	ld	r24, Z
    255e:	6c 91       	ld	r22, X
    2560:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    2564:	80 e0       	ldi	r24, 0x00	; 0
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	a0 e8       	ldi	r26, 0x80	; 128
    256a:	bf e3       	ldi	r27, 0x3F	; 63
    256c:	8d ab       	std	Y+53, r24	; 0x35
    256e:	9e ab       	std	Y+54, r25	; 0x36
    2570:	af ab       	std	Y+55, r26	; 0x37
    2572:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2574:	6d a9       	ldd	r22, Y+53	; 0x35
    2576:	7e a9       	ldd	r23, Y+54	; 0x36
    2578:	8f a9       	ldd	r24, Y+55	; 0x37
    257a:	98 ad       	ldd	r25, Y+56	; 0x38
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	4a ef       	ldi	r20, 0xFA	; 250
    2582:	54 e4       	ldi	r21, 0x44	; 68
    2584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	89 ab       	std	Y+49, r24	; 0x31
    258e:	9a ab       	std	Y+50, r25	; 0x32
    2590:	ab ab       	std	Y+51, r26	; 0x33
    2592:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2594:	69 a9       	ldd	r22, Y+49	; 0x31
    2596:	7a a9       	ldd	r23, Y+50	; 0x32
    2598:	8b a9       	ldd	r24, Y+51	; 0x33
    259a:	9c a9       	ldd	r25, Y+52	; 0x34
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_vidInit+0xb78>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	98 ab       	std	Y+48, r25	; 0x30
    25b2:	8f a7       	std	Y+47, r24	; 0x2f
    25b4:	3f c0       	rjmp	.+126    	; 0x2634 <LCD_vidInit+0xbf6>
	else if (__tmp > 65535)
    25b6:	69 a9       	ldd	r22, Y+49	; 0x31
    25b8:	7a a9       	ldd	r23, Y+50	; 0x32
    25ba:	8b a9       	ldd	r24, Y+51	; 0x33
    25bc:	9c a9       	ldd	r25, Y+52	; 0x34
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	3f ef       	ldi	r19, 0xFF	; 255
    25c2:	4f e7       	ldi	r20, 0x7F	; 127
    25c4:	57 e4       	ldi	r21, 0x47	; 71
    25c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ca:	18 16       	cp	r1, r24
    25cc:	4c f5       	brge	.+82     	; 0x2620 <LCD_vidInit+0xbe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ce:	6d a9       	ldd	r22, Y+53	; 0x35
    25d0:	7e a9       	ldd	r23, Y+54	; 0x36
    25d2:	8f a9       	ldd	r24, Y+55	; 0x37
    25d4:	98 ad       	ldd	r25, Y+56	; 0x38
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	bc 01       	movw	r22, r24
    25e8:	cd 01       	movw	r24, r26
    25ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	98 ab       	std	Y+48, r25	; 0x30
    25f4:	8f a7       	std	Y+47, r24	; 0x2f
    25f6:	0f c0       	rjmp	.+30     	; 0x2616 <LCD_vidInit+0xbd8>
    25f8:	88 ec       	ldi	r24, 0xC8	; 200
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	9e a7       	std	Y+46, r25	; 0x2e
    25fe:	8d a7       	std	Y+45, r24	; 0x2d
    2600:	8d a5       	ldd	r24, Y+45	; 0x2d
    2602:	9e a5       	ldd	r25, Y+46	; 0x2e
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_vidInit+0xbc6>
    2608:	9e a7       	std	Y+46, r25	; 0x2e
    260a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    260c:	8f a5       	ldd	r24, Y+47	; 0x2f
    260e:	98 a9       	ldd	r25, Y+48	; 0x30
    2610:	01 97       	sbiw	r24, 0x01	; 1
    2612:	98 ab       	std	Y+48, r25	; 0x30
    2614:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2616:	8f a5       	ldd	r24, Y+47	; 0x2f
    2618:	98 a9       	ldd	r25, Y+48	; 0x30
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	69 f7       	brne	.-38     	; 0x25f8 <LCD_vidInit+0xbba>
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <LCD_vidInit+0xc0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2620:	69 a9       	ldd	r22, Y+49	; 0x31
    2622:	7a a9       	ldd	r23, Y+50	; 0x32
    2624:	8b a9       	ldd	r24, Y+51	; 0x33
    2626:	9c a9       	ldd	r25, Y+52	; 0x34
    2628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	98 ab       	std	Y+48, r25	; 0x30
    2632:	8f a7       	std	Y+47, r24	; 0x2f
    2634:	8f a5       	ldd	r24, Y+47	; 0x2f
    2636:	98 a9       	ldd	r25, Y+48	; 0x30
    2638:	9c a7       	std	Y+44, r25	; 0x2c
    263a:	8b a7       	std	Y+43, r24	; 0x2b
    263c:	8b a5       	ldd	r24, Y+43	; 0x2b
    263e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	f1 f7       	brne	.-4      	; 0x2640 <LCD_vidInit+0xc02>
    2644:	9c a7       	std	Y+44, r25	; 0x2c
    2646:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			/*****Display ON/OFF Control*****/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    2648:	fe 01       	movw	r30, r28
    264a:	e3 57       	subi	r30, 0x73	; 115
    264c:	ff 4f       	sbci	r31, 0xFF	; 255
    264e:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2650:	fe 01       	movw	r30, r28
    2652:	e2 57       	subi	r30, 0x72	; 114
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	de 01       	movw	r26, r28
    2658:	a3 57       	subi	r26, 0x73	; 115
    265a:	bf 4f       	sbci	r27, 0xFF	; 255
    265c:	80 81       	ld	r24, Z
    265e:	6c 91       	ld	r22, X
    2660:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
			/*0b1DCB0000*/
			u8CmdLoc = 0b10000000|
    2664:	fe 01       	movw	r30, r28
    2666:	e2 57       	subi	r30, 0x72	; 114
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	80 81       	ld	r24, Z
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	c9 01       	movw	r24, r18
    2672:	88 0f       	add	r24, r24
    2674:	99 1f       	adc	r25, r25
    2676:	82 0f       	add	r24, r18
    2678:	93 1f       	adc	r25, r19
    267a:	88 0f       	add	r24, r24
    267c:	99 1f       	adc	r25, r25
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	fc 01       	movw	r30, r24
    2684:	e3 57       	subi	r30, 0x73	; 115
    2686:	ff 4f       	sbci	r31, 0xFF	; 255
    2688:	80 81       	ld	r24, Z
    268a:	86 95       	lsr	r24
    268c:	86 95       	lsr	r24
    268e:	86 95       	lsr	r24
    2690:	81 70       	andi	r24, 0x01	; 1
    2692:	88 2f       	mov	r24, r24
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	00 24       	eor	r0, r0
    2698:	96 95       	lsr	r25
    269a:	87 95       	ror	r24
    269c:	07 94       	ror	r0
    269e:	96 95       	lsr	r25
    26a0:	87 95       	ror	r24
    26a2:	07 94       	ror	r0
    26a4:	98 2f       	mov	r25, r24
    26a6:	80 2d       	mov	r24, r0
    26a8:	48 2f       	mov	r20, r24
    26aa:	40 68       	ori	r20, 0x80	; 128
    26ac:	fe 01       	movw	r30, r28
    26ae:	e2 57       	subi	r30, 0x72	; 114
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	80 81       	ld	r24, Z
    26b4:	28 2f       	mov	r18, r24
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	c9 01       	movw	r24, r18
    26ba:	88 0f       	add	r24, r24
    26bc:	99 1f       	adc	r25, r25
    26be:	82 0f       	add	r24, r18
    26c0:	93 1f       	adc	r25, r19
    26c2:	88 0f       	add	r24, r24
    26c4:	99 1f       	adc	r25, r25
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	fc 01       	movw	r30, r24
    26cc:	e3 57       	subi	r30, 0x73	; 115
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	82 95       	swap	r24
    26d4:	8f 70       	andi	r24, 0x0F	; 15
    26d6:	81 70       	andi	r24, 0x01	; 1
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	88 0f       	add	r24, r24
    26de:	99 1f       	adc	r25, r25
    26e0:	82 95       	swap	r24
    26e2:	92 95       	swap	r25
    26e4:	90 7f       	andi	r25, 0xF0	; 240
    26e6:	98 27       	eor	r25, r24
    26e8:	80 7f       	andi	r24, 0xF0	; 240
    26ea:	98 27       	eor	r25, r24
    26ec:	48 2b       	or	r20, r24
    26ee:	fe 01       	movw	r30, r28
    26f0:	e2 57       	subi	r30, 0x72	; 114
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 81       	ld	r24, Z
    26f6:	28 2f       	mov	r18, r24
    26f8:	30 e0       	ldi	r19, 0x00	; 0
    26fa:	c9 01       	movw	r24, r18
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	82 0f       	add	r24, r18
    2702:	93 1f       	adc	r25, r19
    2704:	88 0f       	add	r24, r24
    2706:	99 1f       	adc	r25, r25
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	fc 01       	movw	r30, r24
    270e:	e3 57       	subi	r30, 0x73	; 115
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	82 95       	swap	r24
    2716:	86 95       	lsr	r24
    2718:	87 70       	andi	r24, 0x07	; 7
    271a:	81 70       	andi	r24, 0x01	; 1
    271c:	88 2f       	mov	r24, r24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	82 95       	swap	r24
    2722:	92 95       	swap	r25
    2724:	90 7f       	andi	r25, 0xF0	; 240
    2726:	98 27       	eor	r25, r24
    2728:	80 7f       	andi	r24, 0xF0	; 240
    272a:	98 27       	eor	r25, r24
    272c:	84 2b       	or	r24, r20
    272e:	fe 01       	movw	r30, r28
    2730:	e3 57       	subi	r30, 0x73	; 115
    2732:	ff 4f       	sbci	r31, 0xFF	; 255
    2734:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8DisplayStatus<< 6|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8CursorStatus<<5|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8BlinkStatus<<4;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2736:	fe 01       	movw	r30, r28
    2738:	e2 57       	subi	r30, 0x72	; 114
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	de 01       	movw	r26, r28
    273e:	a3 57       	subi	r26, 0x73	; 115
    2740:	bf 4f       	sbci	r27, 0xFF	; 255
    2742:	80 81       	ld	r24, Z
    2744:	6c 91       	ld	r22, X
    2746:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	a0 e8       	ldi	r26, 0x80	; 128
    2750:	bf e3       	ldi	r27, 0x3F	; 63
    2752:	8f a3       	std	Y+39, r24	; 0x27
    2754:	98 a7       	std	Y+40, r25	; 0x28
    2756:	a9 a7       	std	Y+41, r26	; 0x29
    2758:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275a:	6f a1       	ldd	r22, Y+39	; 0x27
    275c:	78 a5       	ldd	r23, Y+40	; 0x28
    275e:	89 a5       	ldd	r24, Y+41	; 0x29
    2760:	9a a5       	ldd	r25, Y+42	; 0x2a
    2762:	20 e0       	ldi	r18, 0x00	; 0
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	4a ef       	ldi	r20, 0xFA	; 250
    2768:	54 e4       	ldi	r21, 0x44	; 68
    276a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	8b a3       	std	Y+35, r24	; 0x23
    2774:	9c a3       	std	Y+36, r25	; 0x24
    2776:	ad a3       	std	Y+37, r26	; 0x25
    2778:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    277a:	6b a1       	ldd	r22, Y+35	; 0x23
    277c:	7c a1       	ldd	r23, Y+36	; 0x24
    277e:	8d a1       	ldd	r24, Y+37	; 0x25
    2780:	9e a1       	ldd	r25, Y+38	; 0x26
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e8       	ldi	r20, 0x80	; 128
    2788:	5f e3       	ldi	r21, 0x3F	; 63
    278a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    278e:	88 23       	and	r24, r24
    2790:	2c f4       	brge	.+10     	; 0x279c <LCD_vidInit+0xd5e>
		__ticks = 1;
    2792:	81 e0       	ldi	r24, 0x01	; 1
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	9a a3       	std	Y+34, r25	; 0x22
    2798:	89 a3       	std	Y+33, r24	; 0x21
    279a:	3f c0       	rjmp	.+126    	; 0x281a <LCD_vidInit+0xddc>
	else if (__tmp > 65535)
    279c:	6b a1       	ldd	r22, Y+35	; 0x23
    279e:	7c a1       	ldd	r23, Y+36	; 0x24
    27a0:	8d a1       	ldd	r24, Y+37	; 0x25
    27a2:	9e a1       	ldd	r25, Y+38	; 0x26
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	3f ef       	ldi	r19, 0xFF	; 255
    27a8:	4f e7       	ldi	r20, 0x7F	; 127
    27aa:	57 e4       	ldi	r21, 0x47	; 71
    27ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b0:	18 16       	cp	r1, r24
    27b2:	4c f5       	brge	.+82     	; 0x2806 <LCD_vidInit+0xdc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b4:	6f a1       	ldd	r22, Y+39	; 0x27
    27b6:	78 a5       	ldd	r23, Y+40	; 0x28
    27b8:	89 a5       	ldd	r24, Y+41	; 0x29
    27ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e2       	ldi	r20, 0x20	; 32
    27c2:	51 e4       	ldi	r21, 0x41	; 65
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9a a3       	std	Y+34, r25	; 0x22
    27da:	89 a3       	std	Y+33, r24	; 0x21
    27dc:	0f c0       	rjmp	.+30     	; 0x27fc <LCD_vidInit+0xdbe>
    27de:	88 ec       	ldi	r24, 0xC8	; 200
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	98 a3       	std	Y+32, r25	; 0x20
    27e4:	8f 8f       	std	Y+31, r24	; 0x1f
    27e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27e8:	98 a1       	ldd	r25, Y+32	; 0x20
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_vidInit+0xdac>
    27ee:	98 a3       	std	Y+32, r25	; 0x20
    27f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f2:	89 a1       	ldd	r24, Y+33	; 0x21
    27f4:	9a a1       	ldd	r25, Y+34	; 0x22
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	9a a3       	std	Y+34, r25	; 0x22
    27fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27fc:	89 a1       	ldd	r24, Y+33	; 0x21
    27fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2800:	00 97       	sbiw	r24, 0x00	; 0
    2802:	69 f7       	brne	.-38     	; 0x27de <LCD_vidInit+0xda0>
    2804:	14 c0       	rjmp	.+40     	; 0x282e <LCD_vidInit+0xdf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2806:	6b a1       	ldd	r22, Y+35	; 0x23
    2808:	7c a1       	ldd	r23, Y+36	; 0x24
    280a:	8d a1       	ldd	r24, Y+37	; 0x25
    280c:	9e a1       	ldd	r25, Y+38	; 0x26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9a a3       	std	Y+34, r25	; 0x22
    2818:	89 a3       	std	Y+33, r24	; 0x21
    281a:	89 a1       	ldd	r24, Y+33	; 0x21
    281c:	9a a1       	ldd	r25, Y+34	; 0x22
    281e:	9e 8f       	std	Y+30, r25	; 0x1e
    2820:	8d 8f       	std	Y+29, r24	; 0x1d
    2822:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2824:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <LCD_vidInit+0xde8>
    282a:	9e 8f       	std	Y+30, r25	; 0x1e
    282c:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			/*****Display Clear******/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    282e:	fe 01       	movw	r30, r28
    2830:	e3 57       	subi	r30, 0x73	; 115
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2836:	fe 01       	movw	r30, r28
    2838:	e2 57       	subi	r30, 0x72	; 114
    283a:	ff 4f       	sbci	r31, 0xFF	; 255
    283c:	de 01       	movw	r26, r28
    283e:	a3 57       	subi	r26, 0x73	; 115
    2840:	bf 4f       	sbci	r27, 0xFF	; 255
    2842:	80 81       	ld	r24, Z
    2844:	6c 91       	ld	r22, X
    2846:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
			/*0b00010000*/
			u8CmdLoc = 0b00010000;
    284a:	fe 01       	movw	r30, r28
    284c:	e3 57       	subi	r30, 0x73	; 115
    284e:	ff 4f       	sbci	r31, 0xFF	; 255
    2850:	80 e1       	ldi	r24, 0x10	; 16
    2852:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2854:	fe 01       	movw	r30, r28
    2856:	e2 57       	subi	r30, 0x72	; 114
    2858:	ff 4f       	sbci	r31, 0xFF	; 255
    285a:	de 01       	movw	r26, r28
    285c:	a3 57       	subi	r26, 0x73	; 115
    285e:	bf 4f       	sbci	r27, 0xFF	; 255
    2860:	80 81       	ld	r24, Z
    2862:	6c 91       	ld	r22, X
    2864:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e4       	ldi	r27, 0x40	; 64
    2870:	89 8f       	std	Y+25, r24	; 0x19
    2872:	9a 8f       	std	Y+26, r25	; 0x1a
    2874:	ab 8f       	std	Y+27, r26	; 0x1b
    2876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2878:	69 8d       	ldd	r22, Y+25	; 0x19
    287a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    287c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    287e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	4a ef       	ldi	r20, 0xFA	; 250
    2886:	54 e4       	ldi	r21, 0x44	; 68
    2888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	8d 8b       	std	Y+21, r24	; 0x15
    2892:	9e 8b       	std	Y+22, r25	; 0x16
    2894:	af 8b       	std	Y+23, r26	; 0x17
    2896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2898:	6d 89       	ldd	r22, Y+21	; 0x15
    289a:	7e 89       	ldd	r23, Y+22	; 0x16
    289c:	8f 89       	ldd	r24, Y+23	; 0x17
    289e:	98 8d       	ldd	r25, Y+24	; 0x18
    28a0:	20 e0       	ldi	r18, 0x00	; 0
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	40 e8       	ldi	r20, 0x80	; 128
    28a6:	5f e3       	ldi	r21, 0x3F	; 63
    28a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ac:	88 23       	and	r24, r24
    28ae:	2c f4       	brge	.+10     	; 0x28ba <LCD_vidInit+0xe7c>
		__ticks = 1;
    28b0:	81 e0       	ldi	r24, 0x01	; 1
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	9c 8b       	std	Y+20, r25	; 0x14
    28b6:	8b 8b       	std	Y+19, r24	; 0x13
    28b8:	3f c0       	rjmp	.+126    	; 0x2938 <LCD_vidInit+0xefa>
	else if (__tmp > 65535)
    28ba:	6d 89       	ldd	r22, Y+21	; 0x15
    28bc:	7e 89       	ldd	r23, Y+22	; 0x16
    28be:	8f 89       	ldd	r24, Y+23	; 0x17
    28c0:	98 8d       	ldd	r25, Y+24	; 0x18
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	3f ef       	ldi	r19, 0xFF	; 255
    28c6:	4f e7       	ldi	r20, 0x7F	; 127
    28c8:	57 e4       	ldi	r21, 0x47	; 71
    28ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28ce:	18 16       	cp	r1, r24
    28d0:	4c f5       	brge	.+82     	; 0x2924 <LCD_vidInit+0xee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d2:	69 8d       	ldd	r22, Y+25	; 0x19
    28d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28da:	20 e0       	ldi	r18, 0x00	; 0
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	40 e2       	ldi	r20, 0x20	; 32
    28e0:	51 e4       	ldi	r21, 0x41	; 65
    28e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28e6:	dc 01       	movw	r26, r24
    28e8:	cb 01       	movw	r24, r22
    28ea:	bc 01       	movw	r22, r24
    28ec:	cd 01       	movw	r24, r26
    28ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	9c 8b       	std	Y+20, r25	; 0x14
    28f8:	8b 8b       	std	Y+19, r24	; 0x13
    28fa:	0f c0       	rjmp	.+30     	; 0x291a <LCD_vidInit+0xedc>
    28fc:	88 ec       	ldi	r24, 0xC8	; 200
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9a 8b       	std	Y+18, r25	; 0x12
    2902:	89 8b       	std	Y+17, r24	; 0x11
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	9a 89       	ldd	r25, Y+18	; 0x12
    2908:	01 97       	sbiw	r24, 0x01	; 1
    290a:	f1 f7       	brne	.-4      	; 0x2908 <LCD_vidInit+0xeca>
    290c:	9a 8b       	std	Y+18, r25	; 0x12
    290e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2910:	8b 89       	ldd	r24, Y+19	; 0x13
    2912:	9c 89       	ldd	r25, Y+20	; 0x14
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	9c 8b       	std	Y+20, r25	; 0x14
    2918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291a:	8b 89       	ldd	r24, Y+19	; 0x13
    291c:	9c 89       	ldd	r25, Y+20	; 0x14
    291e:	00 97       	sbiw	r24, 0x00	; 0
    2920:	69 f7       	brne	.-38     	; 0x28fc <LCD_vidInit+0xebe>
    2922:	14 c0       	rjmp	.+40     	; 0x294c <LCD_vidInit+0xf0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2924:	6d 89       	ldd	r22, Y+21	; 0x15
    2926:	7e 89       	ldd	r23, Y+22	; 0x16
    2928:	8f 89       	ldd	r24, Y+23	; 0x17
    292a:	98 8d       	ldd	r25, Y+24	; 0x18
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	9c 8b       	std	Y+20, r25	; 0x14
    2936:	8b 8b       	std	Y+19, r24	; 0x13
    2938:	8b 89       	ldd	r24, Y+19	; 0x13
    293a:	9c 89       	ldd	r25, Y+20	; 0x14
    293c:	98 8b       	std	Y+16, r25	; 0x10
    293e:	8f 87       	std	Y+15, r24	; 0x0f
    2940:	8f 85       	ldd	r24, Y+15	; 0x0f
    2942:	98 89       	ldd	r25, Y+16	; 0x10
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	f1 f7       	brne	.-4      	; 0x2944 <LCD_vidInit+0xf06>
    2948:	98 8b       	std	Y+16, r25	; 0x10
    294a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);

			/*****Entry Mode Set*****/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    294c:	fe 01       	movw	r30, r28
    294e:	e3 57       	subi	r30, 0x73	; 115
    2950:	ff 4f       	sbci	r31, 0xFF	; 255
    2952:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2954:	fe 01       	movw	r30, r28
    2956:	e2 57       	subi	r30, 0x72	; 114
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	de 01       	movw	r26, r28
    295c:	a3 57       	subi	r26, 0x73	; 115
    295e:	bf 4f       	sbci	r27, 0xFF	; 255
    2960:	80 81       	ld	r24, Z
    2962:	6c 91       	ld	r22, X
    2964:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
			//_delay_ms(1);
			/*0b01 I/D SH 0000*/
			u8CmdLoc = 0b01000000|
    2968:	fe 01       	movw	r30, r28
    296a:	e2 57       	subi	r30, 0x72	; 114
    296c:	ff 4f       	sbci	r31, 0xFF	; 255
    296e:	80 81       	ld	r24, Z
    2970:	28 2f       	mov	r18, r24
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	c9 01       	movw	r24, r18
    2976:	88 0f       	add	r24, r24
    2978:	99 1f       	adc	r25, r25
    297a:	82 0f       	add	r24, r18
    297c:	93 1f       	adc	r25, r19
    297e:	88 0f       	add	r24, r24
    2980:	99 1f       	adc	r25, r25
    2982:	88 0f       	add	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	fc 01       	movw	r30, r24
    2988:	e3 57       	subi	r30, 0x73	; 115
    298a:	ff 4f       	sbci	r31, 0xFF	; 255
    298c:	80 81       	ld	r24, Z
    298e:	82 95       	swap	r24
    2990:	86 95       	lsr	r24
    2992:	86 95       	lsr	r24
    2994:	83 70       	andi	r24, 0x03	; 3
    2996:	81 70       	andi	r24, 0x01	; 1
    2998:	88 2f       	mov	r24, r24
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	88 0f       	add	r24, r24
    299e:	99 1f       	adc	r25, r25
    29a0:	82 95       	swap	r24
    29a2:	92 95       	swap	r25
    29a4:	90 7f       	andi	r25, 0xF0	; 240
    29a6:	98 27       	eor	r25, r24
    29a8:	80 7f       	andi	r24, 0xF0	; 240
    29aa:	98 27       	eor	r25, r24
    29ac:	48 2f       	mov	r20, r24
    29ae:	40 64       	ori	r20, 0x40	; 64
    29b0:	fe 01       	movw	r30, r28
    29b2:	e2 57       	subi	r30, 0x72	; 114
    29b4:	ff 4f       	sbci	r31, 0xFF	; 255
    29b6:	80 81       	ld	r24, Z
    29b8:	28 2f       	mov	r18, r24
    29ba:	30 e0       	ldi	r19, 0x00	; 0
    29bc:	c9 01       	movw	r24, r18
    29be:	88 0f       	add	r24, r24
    29c0:	99 1f       	adc	r25, r25
    29c2:	82 0f       	add	r24, r18
    29c4:	93 1f       	adc	r25, r19
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	fc 01       	movw	r30, r24
    29d0:	e3 57       	subi	r30, 0x73	; 115
    29d2:	ff 4f       	sbci	r31, 0xFF	; 255
    29d4:	80 81       	ld	r24, Z
    29d6:	88 1f       	adc	r24, r24
    29d8:	88 27       	eor	r24, r24
    29da:	88 1f       	adc	r24, r24
    29dc:	88 2f       	mov	r24, r24
    29de:	90 e0       	ldi	r25, 0x00	; 0
    29e0:	82 95       	swap	r24
    29e2:	92 95       	swap	r25
    29e4:	90 7f       	andi	r25, 0xF0	; 240
    29e6:	98 27       	eor	r25, r24
    29e8:	80 7f       	andi	r24, 0xF0	; 240
    29ea:	98 27       	eor	r25, r24
    29ec:	84 2b       	or	r24, r20
    29ee:	fe 01       	movw	r30, r28
    29f0:	e3 57       	subi	r30, 0x73	; 115
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 83       	st	Z, r24
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8In_DecrementMode<< 5|
			LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8ShiftStatus<< 4;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    29f6:	fe 01       	movw	r30, r28
    29f8:	e2 57       	subi	r30, 0x72	; 114
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	de 01       	movw	r26, r28
    29fe:	a3 57       	subi	r26, 0x73	; 115
    2a00:	bf 4f       	sbci	r27, 0xFF	; 255
    2a02:	80 81       	ld	r24, Z
    2a04:	6c 91       	ld	r22, X
    2a06:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <LCD_vidSendCmd>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e0       	ldi	r26, 0x00	; 0
    2a10:	b0 e4       	ldi	r27, 0x40	; 64
    2a12:	8b 87       	std	Y+11, r24	; 0x0b
    2a14:	9c 87       	std	Y+12, r25	; 0x0c
    2a16:	ad 87       	std	Y+13, r26	; 0x0d
    2a18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a22:	20 e0       	ldi	r18, 0x00	; 0
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	4a ef       	ldi	r20, 0xFA	; 250
    2a28:	54 e4       	ldi	r21, 0x44	; 68
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	8f 83       	std	Y+7, r24	; 0x07
    2a34:	98 87       	std	Y+8, r25	; 0x08
    2a36:	a9 87       	std	Y+9, r26	; 0x09
    2a38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3c:	78 85       	ldd	r23, Y+8	; 0x08
    2a3e:	89 85       	ldd	r24, Y+9	; 0x09
    2a40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <LCD_vidInit+0x101e>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	8d 83       	std	Y+5, r24	; 0x05
    2a5a:	3f c0       	rjmp	.+126    	; 0x2ada <LCD_vidInit+0x109c>
	else if (__tmp > 65535)
    2a5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a5e:	78 85       	ldd	r23, Y+8	; 0x08
    2a60:	89 85       	ldd	r24, Y+9	; 0x09
    2a62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a64:	20 e0       	ldi	r18, 0x00	; 0
    2a66:	3f ef       	ldi	r19, 0xFF	; 255
    2a68:	4f e7       	ldi	r20, 0x7F	; 127
    2a6a:	57 e4       	ldi	r21, 0x47	; 71
    2a6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a70:	18 16       	cp	r1, r24
    2a72:	4c f5       	brge	.+82     	; 0x2ac6 <LCD_vidInit+0x1088>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7c:	20 e0       	ldi	r18, 0x00	; 0
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	40 e2       	ldi	r20, 0x20	; 32
    2a82:	51 e4       	ldi	r21, 0x41	; 65
    2a84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	bc 01       	movw	r22, r24
    2a8e:	cd 01       	movw	r24, r26
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9e 83       	std	Y+6, r25	; 0x06
    2a9a:	8d 83       	std	Y+5, r24	; 0x05
    2a9c:	0f c0       	rjmp	.+30     	; 0x2abc <LCD_vidInit+0x107e>
    2a9e:	88 ec       	ldi	r24, 0xC8	; 200
    2aa0:	90 e0       	ldi	r25, 0x00	; 0
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	f1 f7       	brne	.-4      	; 0x2aaa <LCD_vidInit+0x106c>
    2aae:	9c 83       	std	Y+4, r25	; 0x04
    2ab0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	69 f7       	brne	.-38     	; 0x2a9e <LCD_vidInit+0x1060>
    2ac4:	14 c0       	rjmp	.+40     	; 0x2aee <LCD_vidInit+0x10b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ac8:	78 85       	ldd	r23, Y+8	; 0x08
    2aca:	89 85       	ldd	r24, Y+9	; 0x09
    2acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad2:	dc 01       	movw	r26, r24
    2ad4:	cb 01       	movw	r24, r22
    2ad6:	9e 83       	std	Y+6, r25	; 0x06
    2ad8:	8d 83       	std	Y+5, r24	; 0x05
    2ada:	8d 81       	ldd	r24, Y+5	; 0x05
    2adc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	f1 f7       	brne	.-4      	; 0x2ae6 <LCD_vidInit+0x10a8>
    2aea:	9a 83       	std	Y+2, r25	; 0x02
    2aec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			InitFinshed=1;
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	80 93 8e 00 	sts	0x008E, r24
static uint8 InitFinshed=0;
void LCD_vidInit(void)
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc =0;
	for(u8CntrLoc = 0 ;u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++ )
    2af4:	de 01       	movw	r26, r28
    2af6:	a2 57       	subi	r26, 0x72	; 114
    2af8:	bf 4f       	sbci	r27, 0xFF	; 255
    2afa:	fe 01       	movw	r30, r28
    2afc:	e2 57       	subi	r30, 0x72	; 114
    2afe:	ff 4f       	sbci	r31, 0xFF	; 255
    2b00:	80 81       	ld	r24, Z
    2b02:	8f 5f       	subi	r24, 0xFF	; 255
    2b04:	8c 93       	st	X, r24
    2b06:	fe 01       	movw	r30, r28
    2b08:	e2 57       	subi	r30, 0x72	; 114
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	80 81       	ld	r24, Z
    2b0e:	88 23       	and	r24, r24
    2b10:	11 f4       	brne	.+4      	; 0x2b16 <LCD_vidInit+0x10d8>
    2b12:	0c 94 36 0d 	jmp	0x1a6c	; 0x1a6c <LCD_vidInit+0x2e>
			InitFinshed=1;
		}
		
		
	}
}
    2b16:	c2 57       	subi	r28, 0x72	; 114
    2b18:	df 4f       	sbci	r29, 0xFF	; 255
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	cf 91       	pop	r28
    2b26:	df 91       	pop	r29
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <LCD_vidSendCmd>:

void LCD_vidSendCmd(uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	00 d0       	rcall	.+0      	; 0x2b34 <LCD_vidSendCmd+0x6>
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	89 83       	std	Y+1, r24	; 0x01
    2b3a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RS,0);
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	c9 01       	movw	r24, r18
    2b44:	88 0f       	add	r24, r24
    2b46:	99 1f       	adc	r25, r25
    2b48:	82 0f       	add	r24, r18
    2b4a:	93 1f       	adc	r25, r19
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	fc 01       	movw	r30, r24
    2b56:	ee 57       	subi	r30, 0x7E	; 126
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	60 e0       	ldi	r22, 0x00	; 0
    2b5e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	PutOnBus(u8LcdNumCpy , u8CmdCpy);
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	6a 81       	ldd	r22, Y+2	; 0x02
    2b66:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <PutOnBus>

}
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret

00002b74 <LCD_vidWriteData>:

void LCD_vidWriteData(uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    2b74:	df 93       	push	r29
    2b76:	cf 93       	push	r28
    2b78:	00 d0       	rcall	.+0      	; 0x2b7a <LCD_vidWriteData+0x6>
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	89 83       	std	Y+1, r24	; 0x01
    2b80:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RS,1);
    2b82:	89 81       	ldd	r24, Y+1	; 0x01
    2b84:	28 2f       	mov	r18, r24
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	c9 01       	movw	r24, r18
    2b8a:	88 0f       	add	r24, r24
    2b8c:	99 1f       	adc	r25, r25
    2b8e:	82 0f       	add	r24, r18
    2b90:	93 1f       	adc	r25, r19
    2b92:	88 0f       	add	r24, r24
    2b94:	99 1f       	adc	r25, r25
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	ee 57       	subi	r30, 0x7E	; 126
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 81       	ld	r24, Z
    2ba2:	61 e0       	ldi	r22, 0x01	; 1
    2ba4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	PutOnBus(u8LcdNumCpy , u8DataCpy);
    2ba8:	89 81       	ldd	r24, Y+1	; 0x01
    2baa:	6a 81       	ldd	r22, Y+2	; 0x02
    2bac:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <PutOnBus>
	
}
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <LCD_vidWriteString>:

void LCD_vidWriteString(uint8 u8LcdNumCpy , sint8* u8StringCpy)
{
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <LCD_vidWriteString+0x6>
    2bc0:	00 d0       	rcall	.+0      	; 0x2bc2 <LCD_vidWriteString+0x8>
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	8a 83       	std	Y+2, r24	; 0x02
    2bc8:	7c 83       	std	Y+4, r23	; 0x04
    2bca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 index=0;
    2bcc:	19 82       	std	Y+1, r1	; 0x01
    2bce:	11 c0       	rjmp	.+34     	; 0x2bf2 <LCD_vidWriteString+0x38>

	while(u8StringCpy[index] != '\0')
	{
		LCD_vidWriteData(u8LcdNumCpy , u8StringCpy[index]);
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bda:	fc 01       	movw	r30, r24
    2bdc:	e2 0f       	add	r30, r18
    2bde:	f3 1f       	adc	r31, r19
    2be0:	80 81       	ld	r24, Z
    2be2:	98 2f       	mov	r25, r24
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	69 2f       	mov	r22, r25
    2be8:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <LCD_vidWriteData>
		index++;
    2bec:	89 81       	ldd	r24, Y+1	; 0x01
    2bee:	8f 5f       	subi	r24, 0xFF	; 255
    2bf0:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidWriteString(uint8 u8LcdNumCpy , sint8* u8StringCpy)
{
	uint8 index=0;

	while(u8StringCpy[index] != '\0')
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	28 2f       	mov	r18, r24
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfc:	fc 01       	movw	r30, r24
    2bfe:	e2 0f       	add	r30, r18
    2c00:	f3 1f       	adc	r31, r19
    2c02:	80 81       	ld	r24, Z
    2c04:	88 23       	and	r24, r24
    2c06:	21 f7       	brne	.-56     	; 0x2bd0 <LCD_vidWriteString+0x16>
	{
		LCD_vidWriteData(u8LcdNumCpy , u8StringCpy[index]);
		index++;
	}
}
    2c08:	0f 90       	pop	r0
    2c0a:	0f 90       	pop	r0
    2c0c:	0f 90       	pop	r0
    2c0e:	0f 90       	pop	r0
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <PutOnBus>:


static void PutOnBus(uint8 u8LcdNumCpy , uint8 u8CmdOrDataCpy)
{
    2c16:	df 93       	push	r29
    2c18:	cf 93       	push	r28
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	6f 97       	sbiw	r28, 0x1f	; 31
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	8e 8f       	std	Y+30, r24	; 0x1e
    2c2c:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc;
	// wr 0 , en 1
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RW,0);
    2c2e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	c9 01       	movw	r24, r18
    2c36:	88 0f       	add	r24, r24
    2c38:	99 1f       	adc	r25, r25
    2c3a:	82 0f       	add	r24, r18
    2c3c:	93 1f       	adc	r25, r19
    2c3e:	88 0f       	add	r24, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	88 0f       	add	r24, r24
    2c44:	99 1f       	adc	r25, r25
    2c46:	fc 01       	movw	r30, r24
    2c48:	ed 57       	subi	r30, 0x7D	; 125
    2c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4c:	80 81       	ld	r24, Z
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
    2c54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c56:	28 2f       	mov	r18, r24
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	c9 01       	movw	r24, r18
    2c5c:	88 0f       	add	r24, r24
    2c5e:	99 1f       	adc	r25, r25
    2c60:	82 0f       	add	r24, r18
    2c62:	93 1f       	adc	r25, r19
    2c64:	88 0f       	add	r24, r24
    2c66:	99 1f       	adc	r25, r25
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	fc 01       	movw	r30, r24
    2c70:	ee 57       	subi	r30, 0x7E	; 126
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	80 81       	ld	r24, Z
    2c76:	61 e0       	ldi	r22, 0x01	; 1
    2c78:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	// mode 8
	if (LCD_astrCfg[u8LcdNumCpy].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
    2c7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	c9 01       	movw	r24, r18
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	88 0f       	add	r24, r24
    2c92:	99 1f       	adc	r25, r25
    2c94:	fc 01       	movw	r30, r24
    2c96:	e3 57       	subi	r30, 0x73	; 115
    2c98:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9a:	80 81       	ld	r24, Z
    2c9c:	81 70       	andi	r24, 0x01	; 1
    2c9e:	81 30       	cpi	r24, 0x01	; 1
    2ca0:	89 f5       	brne	.+98     	; 0x2d04 <PutOnBus+0xee>
	{
		
		for (u8CntrLoc = 0 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    2ca2:	1d 8e       	std	Y+29, r1	; 0x1d
    2ca4:	2b c0       	rjmp	.+86     	; 0x2cfc <PutOnBus+0xe6>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    2ca6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ca8:	28 2f       	mov	r18, r24
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cae:	48 2f       	mov	r20, r24
    2cb0:	50 e0       	ldi	r21, 0x00	; 0
    2cb2:	c9 01       	movw	r24, r18
    2cb4:	88 0f       	add	r24, r24
    2cb6:	99 1f       	adc	r25, r25
    2cb8:	82 0f       	add	r24, r18
    2cba:	93 1f       	adc	r25, r19
    2cbc:	88 0f       	add	r24, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	88 0f       	add	r24, r24
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	84 0f       	add	r24, r20
    2cc6:	95 1f       	adc	r25, r21
    2cc8:	fc 01       	movw	r30, r24
    2cca:	eb 57       	subi	r30, 0x7B	; 123
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	40 81       	ld	r20, Z
    2cd0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cd8:	88 2f       	mov	r24, r24
    2cda:	90 e0       	ldi	r25, 0x00	; 0
    2cdc:	b9 01       	movw	r22, r18
    2cde:	02 c0       	rjmp	.+4      	; 0x2ce4 <PutOnBus+0xce>
    2ce0:	75 95       	asr	r23
    2ce2:	67 95       	ror	r22
    2ce4:	8a 95       	dec	r24
    2ce6:	e2 f7       	brpl	.-8      	; 0x2ce0 <PutOnBus+0xca>
    2ce8:	cb 01       	movw	r24, r22
    2cea:	98 2f       	mov	r25, r24
    2cec:	91 70       	andi	r25, 0x01	; 1
    2cee:	84 2f       	mov	r24, r20
    2cf0:	69 2f       	mov	r22, r25
    2cf2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
	// mode 8
	if (LCD_astrCfg[u8LcdNumCpy].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
	{
		
		for (u8CntrLoc = 0 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    2cf6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cf8:	8f 5f       	subi	r24, 0xFF	; 255
    2cfa:	8d 8f       	std	Y+29, r24	; 0x1d
    2cfc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cfe:	88 30       	cpi	r24, 0x08	; 8
    2d00:	90 f2       	brcs	.-92     	; 0x2ca6 <PutOnBus+0x90>
    2d02:	03 c1       	rjmp	.+518    	; 0x2f0a <PutOnBus+0x2f4>
	
	}
	else
	{
		/* 4 bit mod task 3la 7drtk*/
		for (u8CntrLoc = 4 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    2d04:	84 e0       	ldi	r24, 0x04	; 4
    2d06:	8d 8f       	std	Y+29, r24	; 0x1d
    2d08:	2b c0       	rjmp	.+86     	; 0x2d60 <PutOnBus+0x14a>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    2d0a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2d0c:	28 2f       	mov	r18, r24
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d12:	48 2f       	mov	r20, r24
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	c9 01       	movw	r24, r18
    2d18:	88 0f       	add	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	82 0f       	add	r24, r18
    2d1e:	93 1f       	adc	r25, r19
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	84 0f       	add	r24, r20
    2d2a:	95 1f       	adc	r25, r21
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	eb 57       	subi	r30, 0x7B	; 123
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	40 81       	ld	r20, Z
    2d34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2d36:	28 2f       	mov	r18, r24
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d3c:	88 2f       	mov	r24, r24
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	b9 01       	movw	r22, r18
    2d42:	02 c0       	rjmp	.+4      	; 0x2d48 <PutOnBus+0x132>
    2d44:	75 95       	asr	r23
    2d46:	67 95       	ror	r22
    2d48:	8a 95       	dec	r24
    2d4a:	e2 f7       	brpl	.-8      	; 0x2d44 <PutOnBus+0x12e>
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	98 2f       	mov	r25, r24
    2d50:	91 70       	andi	r25, 0x01	; 1
    2d52:	84 2f       	mov	r24, r20
    2d54:	69 2f       	mov	r22, r25
    2d56:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	
	}
	else
	{
		/* 4 bit mod task 3la 7drtk*/
		for (u8CntrLoc = 4 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    2d5a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d5c:	8f 5f       	subi	r24, 0xFF	; 255
    2d5e:	8d 8f       	std	Y+29, r24	; 0x1d
    2d60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d62:	88 30       	cpi	r24, 0x08	; 8
    2d64:	90 f2       	brcs	.-92     	; 0x2d0a <PutOnBus+0xf4>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
		}

		if(InitFinshed)
    2d66:	80 91 8e 00 	lds	r24, 0x008E
    2d6a:	88 23       	and	r24, r24
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <PutOnBus+0x15a>
    2d6e:	cd c0       	rjmp	.+410    	; 0x2f0a <PutOnBus+0x2f4>
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	a0 e8       	ldi	r26, 0x80	; 128
    2d76:	bf e3       	ldi	r27, 0x3F	; 63
    2d78:	89 8f       	std	Y+25, r24	; 0x19
    2d7a:	9a 8f       	std	Y+26, r25	; 0x1a
    2d7c:	ab 8f       	std	Y+27, r26	; 0x1b
    2d7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d80:	69 8d       	ldd	r22, Y+25	; 0x19
    2d82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d88:	20 e0       	ldi	r18, 0x00	; 0
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	4a ef       	ldi	r20, 0xFA	; 250
    2d8e:	54 e4       	ldi	r21, 0x44	; 68
    2d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	8d 8b       	std	Y+21, r24	; 0x15
    2d9a:	9e 8b       	std	Y+22, r25	; 0x16
    2d9c:	af 8b       	std	Y+23, r26	; 0x17
    2d9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2da0:	6d 89       	ldd	r22, Y+21	; 0x15
    2da2:	7e 89       	ldd	r23, Y+22	; 0x16
    2da4:	8f 89       	ldd	r24, Y+23	; 0x17
    2da6:	98 8d       	ldd	r25, Y+24	; 0x18
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e8       	ldi	r20, 0x80	; 128
    2dae:	5f e3       	ldi	r21, 0x3F	; 63
    2db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2db4:	88 23       	and	r24, r24
    2db6:	2c f4       	brge	.+10     	; 0x2dc2 <PutOnBus+0x1ac>
		__ticks = 1;
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	9c 8b       	std	Y+20, r25	; 0x14
    2dbe:	8b 8b       	std	Y+19, r24	; 0x13
    2dc0:	3f c0       	rjmp	.+126    	; 0x2e40 <PutOnBus+0x22a>
	else if (__tmp > 65535)
    2dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    2dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    2dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	3f ef       	ldi	r19, 0xFF	; 255
    2dce:	4f e7       	ldi	r20, 0x7F	; 127
    2dd0:	57 e4       	ldi	r21, 0x47	; 71
    2dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dd6:	18 16       	cp	r1, r24
    2dd8:	4c f5       	brge	.+82     	; 0x2e2c <PutOnBus+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dda:	69 8d       	ldd	r22, Y+25	; 0x19
    2ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	40 e2       	ldi	r20, 0x20	; 32
    2de8:	51 e4       	ldi	r21, 0x41	; 65
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	bc 01       	movw	r22, r24
    2df4:	cd 01       	movw	r24, r26
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9c 8b       	std	Y+20, r25	; 0x14
    2e00:	8b 8b       	std	Y+19, r24	; 0x13
    2e02:	0f c0       	rjmp	.+30     	; 0x2e22 <PutOnBus+0x20c>
    2e04:	88 ec       	ldi	r24, 0xC8	; 200
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	9a 8b       	std	Y+18, r25	; 0x12
    2e0a:	89 8b       	std	Y+17, r24	; 0x11
    2e0c:	89 89       	ldd	r24, Y+17	; 0x11
    2e0e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	f1 f7       	brne	.-4      	; 0x2e10 <PutOnBus+0x1fa>
    2e14:	9a 8b       	std	Y+18, r25	; 0x12
    2e16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e18:	8b 89       	ldd	r24, Y+19	; 0x13
    2e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2e1c:	01 97       	sbiw	r24, 0x01	; 1
    2e1e:	9c 8b       	std	Y+20, r25	; 0x14
    2e20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e22:	8b 89       	ldd	r24, Y+19	; 0x13
    2e24:	9c 89       	ldd	r25, Y+20	; 0x14
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	69 f7       	brne	.-38     	; 0x2e04 <PutOnBus+0x1ee>
    2e2a:	14 c0       	rjmp	.+40     	; 0x2e54 <PutOnBus+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e30:	8f 89       	ldd	r24, Y+23	; 0x17
    2e32:	98 8d       	ldd	r25, Y+24	; 0x18
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	9c 8b       	std	Y+20, r25	; 0x14
    2e3e:	8b 8b       	std	Y+19, r24	; 0x13
    2e40:	8b 89       	ldd	r24, Y+19	; 0x13
    2e42:	9c 89       	ldd	r25, Y+20	; 0x14
    2e44:	98 8b       	std	Y+16, r25	; 0x10
    2e46:	8f 87       	std	Y+15, r24	; 0x0f
    2e48:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e4a:	98 89       	ldd	r25, Y+16	; 0x10
    2e4c:	01 97       	sbiw	r24, 0x01	; 1
    2e4e:	f1 f7       	brne	.-4      	; 0x2e4c <PutOnBus+0x236>
    2e50:	98 8b       	std	Y+16, r25	; 0x10
    2e52:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
    2e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e56:	28 2f       	mov	r18, r24
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	c9 01       	movw	r24, r18
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	82 0f       	add	r24, r18
    2e62:	93 1f       	adc	r25, r19
    2e64:	88 0f       	add	r24, r24
    2e66:	99 1f       	adc	r25, r25
    2e68:	01 96       	adiw	r24, 0x01	; 1
    2e6a:	88 0f       	add	r24, r24
    2e6c:	99 1f       	adc	r25, r25
    2e6e:	fc 01       	movw	r30, r24
    2e70:	ee 57       	subi	r30, 0x7E	; 126
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	80 81       	ld	r24, Z
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
			//_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
    2e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e7e:	28 2f       	mov	r18, r24
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	c9 01       	movw	r24, r18
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	82 0f       	add	r24, r18
    2e8a:	93 1f       	adc	r25, r19
    2e8c:	88 0f       	add	r24, r24
    2e8e:	99 1f       	adc	r25, r25
    2e90:	01 96       	adiw	r24, 0x01	; 1
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	fc 01       	movw	r30, r24
    2e98:	ee 57       	subi	r30, 0x7E	; 126
    2e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9c:	80 81       	ld	r24, Z
    2e9e:	61 e0       	ldi	r22, 0x01	; 1
    2ea0:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
			for (u8CntrLoc = 0 ; u8CntrLoc < 4 ;u8CntrLoc ++)
    2ea4:	1d 8e       	std	Y+29, r1	; 0x1d
    2ea6:	2e c0       	rjmp	.+92     	; 0x2f04 <PutOnBus+0x2ee>
			{
				DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc+4] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    2ea8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb0:	88 2f       	mov	r24, r24
    2eb2:	90 e0       	ldi	r25, 0x00	; 0
    2eb4:	ac 01       	movw	r20, r24
    2eb6:	4c 5f       	subi	r20, 0xFC	; 252
    2eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    2eba:	c9 01       	movw	r24, r18
    2ebc:	88 0f       	add	r24, r24
    2ebe:	99 1f       	adc	r25, r25
    2ec0:	82 0f       	add	r24, r18
    2ec2:	93 1f       	adc	r25, r19
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	88 0f       	add	r24, r24
    2eca:	99 1f       	adc	r25, r25
    2ecc:	84 0f       	add	r24, r20
    2ece:	95 1f       	adc	r25, r21
    2ed0:	fc 01       	movw	r30, r24
    2ed2:	eb 57       	subi	r30, 0x7B	; 123
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	40 81       	ld	r20, Z
    2ed8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2eda:	28 2f       	mov	r18, r24
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	b9 01       	movw	r22, r18
    2ee6:	02 c0       	rjmp	.+4      	; 0x2eec <PutOnBus+0x2d6>
    2ee8:	75 95       	asr	r23
    2eea:	67 95       	ror	r22
    2eec:	8a 95       	dec	r24
    2eee:	e2 f7       	brpl	.-8      	; 0x2ee8 <PutOnBus+0x2d2>
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	98 2f       	mov	r25, r24
    2ef4:	91 70       	andi	r25, 0x01	; 1
    2ef6:	84 2f       	mov	r24, r20
    2ef8:	69 2f       	mov	r22, r25
    2efa:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
		{
			_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
			//_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
			for (u8CntrLoc = 0 ; u8CntrLoc < 4 ;u8CntrLoc ++)
    2efe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	8d 8f       	std	Y+29, r24	; 0x1d
    2f04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f06:	84 30       	cpi	r24, 0x04	; 4
    2f08:	78 f2       	brcs	.-98     	; 0x2ea8 <PutOnBus+0x292>
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e0       	ldi	r26, 0x00	; 0
    2f10:	b0 e4       	ldi	r27, 0x40	; 64
    2f12:	8b 87       	std	Y+11, r24	; 0x0b
    2f14:	9c 87       	std	Y+12, r25	; 0x0c
    2f16:	ad 87       	std	Y+13, r26	; 0x0d
    2f18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	4a ef       	ldi	r20, 0xFA	; 250
    2f28:	54 e4       	ldi	r21, 0x44	; 68
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	8f 83       	std	Y+7, r24	; 0x07
    2f34:	98 87       	std	Y+8, r25	; 0x08
    2f36:	a9 87       	std	Y+9, r26	; 0x09
    2f38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3c:	78 85       	ldd	r23, Y+8	; 0x08
    2f3e:	89 85       	ldd	r24, Y+9	; 0x09
    2f40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e8       	ldi	r20, 0x80	; 128
    2f48:	5f e3       	ldi	r21, 0x3F	; 63
    2f4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f4e:	88 23       	and	r24, r24
    2f50:	2c f4       	brge	.+10     	; 0x2f5c <PutOnBus+0x346>
		__ticks = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	9e 83       	std	Y+6, r25	; 0x06
    2f58:	8d 83       	std	Y+5, r24	; 0x05
    2f5a:	3f c0       	rjmp	.+126    	; 0x2fda <PutOnBus+0x3c4>
	else if (__tmp > 65535)
    2f5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5e:	78 85       	ldd	r23, Y+8	; 0x08
    2f60:	89 85       	ldd	r24, Y+9	; 0x09
    2f62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	3f ef       	ldi	r19, 0xFF	; 255
    2f68:	4f e7       	ldi	r20, 0x7F	; 127
    2f6a:	57 e4       	ldi	r21, 0x47	; 71
    2f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f70:	18 16       	cp	r1, r24
    2f72:	4c f5       	brge	.+82     	; 0x2fc6 <PutOnBus+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	40 e2       	ldi	r20, 0x20	; 32
    2f82:	51 e4       	ldi	r21, 0x41	; 65
    2f84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f88:	dc 01       	movw	r26, r24
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	bc 01       	movw	r22, r24
    2f8e:	cd 01       	movw	r24, r26
    2f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f94:	dc 01       	movw	r26, r24
    2f96:	cb 01       	movw	r24, r22
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	0f c0       	rjmp	.+30     	; 0x2fbc <PutOnBus+0x3a6>
    2f9e:	88 ec       	ldi	r24, 0xC8	; 200
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	9c 83       	std	Y+4, r25	; 0x04
    2fa4:	8b 83       	std	Y+3, r24	; 0x03
    2fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa8:	9c 81       	ldd	r25, Y+4	; 0x04
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <PutOnBus+0x394>
    2fae:	9c 83       	std	Y+4, r25	; 0x04
    2fb0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9e 83       	std	Y+6, r25	; 0x06
    2fba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	69 f7       	brne	.-38     	; 0x2f9e <PutOnBus+0x388>
    2fc4:	14 c0       	rjmp	.+40     	; 0x2fee <PutOnBus+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2fc8:	78 85       	ldd	r23, Y+8	; 0x08
    2fca:	89 85       	ldd	r24, Y+9	; 0x09
    2fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	cb 01       	movw	r24, r22
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	8d 81       	ldd	r24, Y+5	; 0x05
    2fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2fde:	9a 83       	std	Y+2, r25	; 0x02
    2fe0:	89 83       	std	Y+1, r24	; 0x01
    2fe2:	89 81       	ldd	r24, Y+1	; 0x01
    2fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <PutOnBus+0x3d0>
    2fea:	9a 83       	std	Y+2, r25	; 0x02
    2fec:	89 83       	std	Y+1, r24	; 0x01
	
	
	
	// en 0
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
    2fee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff0:	28 2f       	mov	r18, r24
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	c9 01       	movw	r24, r18
    2ff6:	88 0f       	add	r24, r24
    2ff8:	99 1f       	adc	r25, r25
    2ffa:	82 0f       	add	r24, r18
    2ffc:	93 1f       	adc	r25, r19
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	88 0f       	add	r24, r24
    3006:	99 1f       	adc	r25, r25
    3008:	fc 01       	movw	r30, r24
    300a:	ee 57       	subi	r30, 0x7E	; 126
    300c:	ff 4f       	sbci	r31, 0xFF	; 255
    300e:	80 81       	ld	r24, Z
    3010:	60 e0       	ldi	r22, 0x00	; 0
    3012:	0e 94 e6 08 	call	0x11cc	; 0x11cc <DIO_enuSetPinValue>
	//_delay_ms(2);
	
}
    3016:	6f 96       	adiw	r28, 0x1f	; 31
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	cf 91       	pop	r28
    3024:	df 91       	pop	r29
    3026:	08 95       	ret

00003028 <__prologue_saves__>:
    3028:	2f 92       	push	r2
    302a:	3f 92       	push	r3
    302c:	4f 92       	push	r4
    302e:	5f 92       	push	r5
    3030:	6f 92       	push	r6
    3032:	7f 92       	push	r7
    3034:	8f 92       	push	r8
    3036:	9f 92       	push	r9
    3038:	af 92       	push	r10
    303a:	bf 92       	push	r11
    303c:	cf 92       	push	r12
    303e:	df 92       	push	r13
    3040:	ef 92       	push	r14
    3042:	ff 92       	push	r15
    3044:	0f 93       	push	r16
    3046:	1f 93       	push	r17
    3048:	cf 93       	push	r28
    304a:	df 93       	push	r29
    304c:	cd b7       	in	r28, 0x3d	; 61
    304e:	de b7       	in	r29, 0x3e	; 62
    3050:	ca 1b       	sub	r28, r26
    3052:	db 0b       	sbc	r29, r27
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	09 94       	ijmp

00003060 <__epilogue_restores__>:
    3060:	2a 88       	ldd	r2, Y+18	; 0x12
    3062:	39 88       	ldd	r3, Y+17	; 0x11
    3064:	48 88       	ldd	r4, Y+16	; 0x10
    3066:	5f 84       	ldd	r5, Y+15	; 0x0f
    3068:	6e 84       	ldd	r6, Y+14	; 0x0e
    306a:	7d 84       	ldd	r7, Y+13	; 0x0d
    306c:	8c 84       	ldd	r8, Y+12	; 0x0c
    306e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3070:	aa 84       	ldd	r10, Y+10	; 0x0a
    3072:	b9 84       	ldd	r11, Y+9	; 0x09
    3074:	c8 84       	ldd	r12, Y+8	; 0x08
    3076:	df 80       	ldd	r13, Y+7	; 0x07
    3078:	ee 80       	ldd	r14, Y+6	; 0x06
    307a:	fd 80       	ldd	r15, Y+5	; 0x05
    307c:	0c 81       	ldd	r16, Y+4	; 0x04
    307e:	1b 81       	ldd	r17, Y+3	; 0x03
    3080:	aa 81       	ldd	r26, Y+2	; 0x02
    3082:	b9 81       	ldd	r27, Y+1	; 0x01
    3084:	ce 0f       	add	r28, r30
    3086:	d1 1d       	adc	r29, r1
    3088:	0f b6       	in	r0, 0x3f	; 63
    308a:	f8 94       	cli
    308c:	de bf       	out	0x3e, r29	; 62
    308e:	0f be       	out	0x3f, r0	; 63
    3090:	cd bf       	out	0x3d, r28	; 61
    3092:	ed 01       	movw	r28, r26
    3094:	08 95       	ret

00003096 <_exit>:
    3096:	f8 94       	cli

00003098 <__stop_program>:
    3098:	ff cf       	rjmp	.-2      	; 0x3098 <__stop_program>
