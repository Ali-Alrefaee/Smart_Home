
TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a90  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  00003a90  00003b24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080011c  0080011c  00003be0  2**0
                  ALLOC
  3 .debug_aranges 000002a0  00000000  00000000  00003be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000423  00000000  00000000  00003e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000347d  00000000  00000000  000042a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000168e  00000000  00000000  00007720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002aa4  00000000  00000000  00008dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000340  00000000  00000000  0000b854  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000085d  00000000  00000000  0000bb94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007ce  00000000  00000000  0000c3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0000bf3f  00000000  00000000  0000cbbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00018afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 32       	cpi	r26, 0x2A	; 42
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 46 1d 	jmp	0x3a8c	; 0x3a8c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ee       	ldi	r26, 0xED	; 237
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0f 1d 	jmp	0x3a1e	; 0x3a1e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ee       	ldi	r24, 0xED	; 237
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2b 1d 	jmp	0x3a56	; 0x3a56 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1b 1d 	jmp	0x3a36	; 0x3a36 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 37 1d 	jmp	0x3a6e	; 0x3a6e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1f 1d 	jmp	0x3a3e	; 0x3a3e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
rain_t rain_logic;



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61


	DIO_vidInit();
     b5a:	0e 94 ba 08 	call	0x1174	; 0x1174 <DIO_vidInit>
	LCD_vidInit();
     b5e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <LCD_vidInit>
	servo_init();
     b62:	0e 94 f2 19 	call	0x33e4	; 0x33e4 <servo_init>
	KEYPAD_vidInit();
     b66:	0e 94 42 0b 	call	0x1684	; 0x1684 <KEYPAD_vidInit>

	DIO_enuSetPinPullUp(15 , 1);
     b6a:	8f e0       	ldi	r24, 0x0F	; 15
     b6c:	61 e0       	ldi	r22, 0x01	; 1
     b6e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_enuSetPinPullUp>

	while(1)
	{

		if ( n == 1 )
     b72:	80 91 f6 00 	lds	r24, 0x00F6
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <main+0x36>
     b7a:	a7 c1       	rjmp	.+846    	; 0xeca <main+0x384>
		{
			LCD_vidSendCmd(0,LCD_CLR);
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			LCD_vidWriteString(0, "Enter Password :");
     b84:	20 e6       	ldi	r18, 0x60	; 96
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	b9 01       	movw	r22, r18
     b8c:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
			LCD_vidSendCmd(0,LCD_LINE_2 ); // TO SET CURSOR TO SECOND LINE
     b90:	80 e0       	ldi	r24, 0x00	; 0
     b92:	60 ec       	ldi	r22, 0xC0	; 192
     b94:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			//_delay_ms (100);
			flag = 0;
     b98:	10 92 21 01 	sts	0x0121, r1
     b9c:	10 92 20 01 	sts	0x0120, r1
     ba0:	94 c1       	rjmp	.+808    	; 0xeca <main+0x384>

		while ( n < 6 )
		{

			do{
				KEYPAD_enuGetPressedKey(0 , &DIGIT);
     ba2:	2d e1       	ldi	r18, 0x1D	; 29
     ba4:	31 e0       	ldi	r19, 0x01	; 1
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	b9 01       	movw	r22, r18
     baa:	0e 94 91 0b 	call	0x1722	; 0x1722 <KEYPAD_enuGetPressedKey>
				//_delay_ms(150);

			}while(DIGIT == 0xFF);
     bae:	80 91 1d 01 	lds	r24, 0x011D
     bb2:	8f 3f       	cpi	r24, 0xFF	; 255
     bb4:	b1 f3       	breq	.-20     	; 0xba2 <main+0x5c>
			//_delay_ms (150);
			if ( (DIGIT != '\0')&& (DIGIT != '#') && (DIGIT != '*') && (n != 5) )
     bb6:	80 91 1d 01 	lds	r24, 0x011D
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <main+0x7a>
     bbe:	98 c0       	rjmp	.+304    	; 0xcf0 <main+0x1aa>
     bc0:	80 91 1d 01 	lds	r24, 0x011D
     bc4:	83 32       	cpi	r24, 0x23	; 35
     bc6:	09 f4       	brne	.+2      	; 0xbca <main+0x84>
     bc8:	93 c0       	rjmp	.+294    	; 0xcf0 <main+0x1aa>
     bca:	80 91 1d 01 	lds	r24, 0x011D
     bce:	8a 32       	cpi	r24, 0x2A	; 42
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <main+0x8e>
     bd2:	8e c0       	rjmp	.+284    	; 0xcf0 <main+0x1aa>
     bd4:	80 91 f6 00 	lds	r24, 0x00F6
     bd8:	85 30       	cpi	r24, 0x05	; 5
     bda:	09 f4       	brne	.+2      	; 0xbde <main+0x98>
     bdc:	89 c0       	rjmp	.+274    	; 0xcf0 <main+0x1aa>
			{
				LCD_vidWriteData(0, '*');
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	6a e2       	ldi	r22, 0x2A	; 42
     be2:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_vidWriteData>
				PASSWORD[n - 1] = DIGIT;
     be6:	80 91 f6 00 	lds	r24, 0x00F6
     bea:	88 2f       	mov	r24, r24
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	01 97       	sbiw	r24, 0x01	; 1
     bf0:	20 91 1d 01 	lds	r18, 0x011D
     bf4:	fc 01       	movw	r30, r24
     bf6:	ed 5d       	subi	r30, 0xDD	; 221
     bf8:	fe 4f       	sbci	r31, 0xFE	; 254
     bfa:	20 83       	st	Z, r18
				DIGIT = '\0';
     bfc:	10 92 1d 01 	sts	0x011D, r1
				n++;
     c00:	80 91 f6 00 	lds	r24, 0x00F6
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 f6 00 	sts	0x00F6, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	a8 e4       	ldi	r26, 0x48	; 72
     c10:	b3 e4       	ldi	r27, 0x43	; 67
     c12:	8f a3       	std	Y+39, r24	; 0x27
     c14:	98 a7       	std	Y+40, r25	; 0x28
     c16:	a9 a7       	std	Y+41, r26	; 0x29
     c18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c1a:	6f a1       	ldd	r22, Y+39	; 0x27
     c1c:	78 a5       	ldd	r23, Y+40	; 0x28
     c1e:	89 a5       	ldd	r24, Y+41	; 0x29
     c20:	9a a5       	ldd	r25, Y+42	; 0x2a
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	4a ef       	ldi	r20, 0xFA	; 250
     c28:	54 e4       	ldi	r21, 0x44	; 68
     c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	8b a3       	std	Y+35, r24	; 0x23
     c34:	9c a3       	std	Y+36, r25	; 0x24
     c36:	ad a3       	std	Y+37, r26	; 0x25
     c38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c3a:	6b a1       	ldd	r22, Y+35	; 0x23
     c3c:	7c a1       	ldd	r23, Y+36	; 0x24
     c3e:	8d a1       	ldd	r24, Y+37	; 0x25
     c40:	9e a1       	ldd	r25, Y+38	; 0x26
     c42:	20 e0       	ldi	r18, 0x00	; 0
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e8       	ldi	r20, 0x80	; 128
     c48:	5f e3       	ldi	r21, 0x3F	; 63
     c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c4e:	88 23       	and	r24, r24
     c50:	2c f4       	brge	.+10     	; 0xc5c <main+0x116>
		__ticks = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9a a3       	std	Y+34, r25	; 0x22
     c58:	89 a3       	std	Y+33, r24	; 0x21
     c5a:	3f c0       	rjmp	.+126    	; 0xcda <main+0x194>
	else if (__tmp > 65535)
     c5c:	6b a1       	ldd	r22, Y+35	; 0x23
     c5e:	7c a1       	ldd	r23, Y+36	; 0x24
     c60:	8d a1       	ldd	r24, Y+37	; 0x25
     c62:	9e a1       	ldd	r25, Y+38	; 0x26
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	4f e7       	ldi	r20, 0x7F	; 127
     c6a:	57 e4       	ldi	r21, 0x47	; 71
     c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c70:	18 16       	cp	r1, r24
     c72:	4c f5       	brge	.+82     	; 0xcc6 <main+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c74:	6f a1       	ldd	r22, Y+39	; 0x27
     c76:	78 a5       	ldd	r23, Y+40	; 0x28
     c78:	89 a5       	ldd	r24, Y+41	; 0x29
     c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e2       	ldi	r20, 0x20	; 32
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	bc 01       	movw	r22, r24
     c8e:	cd 01       	movw	r24, r26
     c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	9a a3       	std	Y+34, r25	; 0x22
     c9a:	89 a3       	std	Y+33, r24	; 0x21
     c9c:	0f c0       	rjmp	.+30     	; 0xcbc <main+0x176>
     c9e:	88 ec       	ldi	r24, 0xC8	; 200
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	98 a3       	std	Y+32, r25	; 0x20
     ca4:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ca6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ca8:	98 a1       	ldd	r25, Y+32	; 0x20
     caa:	01 97       	sbiw	r24, 0x01	; 1
     cac:	f1 f7       	brne	.-4      	; 0xcaa <main+0x164>
     cae:	98 a3       	std	Y+32, r25	; 0x20
     cb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cb2:	89 a1       	ldd	r24, Y+33	; 0x21
     cb4:	9a a1       	ldd	r25, Y+34	; 0x22
     cb6:	01 97       	sbiw	r24, 0x01	; 1
     cb8:	9a a3       	std	Y+34, r25	; 0x22
     cba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cbc:	89 a1       	ldd	r24, Y+33	; 0x21
     cbe:	9a a1       	ldd	r25, Y+34	; 0x22
     cc0:	00 97       	sbiw	r24, 0x00	; 0
     cc2:	69 f7       	brne	.-38     	; 0xc9e <main+0x158>
     cc4:	02 c1       	rjmp	.+516    	; 0xeca <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cc6:	6b a1       	ldd	r22, Y+35	; 0x23
     cc8:	7c a1       	ldd	r23, Y+36	; 0x24
     cca:	8d a1       	ldd	r24, Y+37	; 0x25
     ccc:	9e a1       	ldd	r25, Y+38	; 0x26
     cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	9a a3       	std	Y+34, r25	; 0x22
     cd8:	89 a3       	std	Y+33, r24	; 0x21
     cda:	89 a1       	ldd	r24, Y+33	; 0x21
     cdc:	9a a1       	ldd	r25, Y+34	; 0x22
     cde:	9e 8f       	std	Y+30, r25	; 0x1e
     ce0:	8d 8f       	std	Y+29, r24	; 0x1d
     ce2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ce4:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ce6:	01 97       	sbiw	r24, 0x01	; 1
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <main+0x1a0>
     cea:	9e 8f       	std	Y+30, r25	; 0x1e
     cec:	8d 8f       	std	Y+29, r24	; 0x1d
     cee:	ed c0       	rjmp	.+474    	; 0xeca <main+0x384>
				_delay_ms (200);
			}
			else  if( '#' == DIGIT )
     cf0:	80 91 1d 01 	lds	r24, 0x011D
     cf4:	83 32       	cpi	r24, 0x23	; 35
     cf6:	09 f0       	breq	.+2      	; 0xcfa <main+0x1b4>
     cf8:	e8 c0       	rjmp	.+464    	; 0xeca <main+0x384>
			{
				n++;
     cfa:	80 91 f6 00 	lds	r24, 0x00F6
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	80 93 f6 00 	sts	0x00F6, r24
				DIGIT = '\0';
     d04:	10 92 1d 01 	sts	0x011D, r1
				if ( n < 6 )
     d08:	80 91 f6 00 	lds	r24, 0x00F6
     d0c:	86 30       	cpi	r24, 0x06	; 6
     d0e:	a0 f4       	brcc	.+40     	; 0xd38 <main+0x1f2>
				{
					/* wrong password*/
					LCD_vidSendCmd(0,LCD_CLR);
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
					LCD_vidWriteString (0, "Wrong Password!!");
     d18:	21 e7       	ldi	r18, 0x71	; 113
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
					//led_on (&led_2);
					//led_off (&led_1);
					NUMBER_OF_WRONG_PASS ++;
     d24:	80 91 1f 01 	lds	r24, 0x011F
     d28:	8f 5f       	subi	r24, 0xFF	; 255
     d2a:	80 93 1f 01 	sts	0x011F, r24
					flag = 0;
     d2e:	10 92 21 01 	sts	0x0121, r1
     d32:	10 92 20 01 	sts	0x0120, r1
     d36:	ce c0       	rjmp	.+412    	; 0xed4 <main+0x38e>
					break;
				}
				else
				{
					//compare entered password with the actual password//
					for ( i = 0; i < 4; i++ )
     d38:	10 92 28 01 	sts	0x0128, r1
     d3c:	1c c0       	rjmp	.+56     	; 0xd76 <main+0x230>
					{
						if ( PASSWORD[i] == PASSWORD_RESRVED[i] )
     d3e:	80 91 28 01 	lds	r24, 0x0128
     d42:	88 2f       	mov	r24, r24
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	fc 01       	movw	r30, r24
     d48:	ed 5d       	subi	r30, 0xDD	; 221
     d4a:	fe 4f       	sbci	r31, 0xFE	; 254
     d4c:	20 81       	ld	r18, Z
     d4e:	80 91 28 01 	lds	r24, 0x0128
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	fc 01       	movw	r30, r24
     d58:	e9 50       	subi	r30, 0x09	; 9
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	80 81       	ld	r24, Z
     d5e:	28 17       	cp	r18, r24
     d60:	71 f4       	brne	.+28     	; 0xd7e <main+0x238>
						{
							x ++;
     d62:	80 91 1e 01 	lds	r24, 0x011E
     d66:	8f 5f       	subi	r24, 0xFF	; 255
     d68:	80 93 1e 01 	sts	0x011E, r24
					break;
				}
				else
				{
					//compare entered password with the actual password//
					for ( i = 0; i < 4; i++ )
     d6c:	80 91 28 01 	lds	r24, 0x0128
     d70:	8f 5f       	subi	r24, 0xFF	; 255
     d72:	80 93 28 01 	sts	0x0128, r24
     d76:	80 91 28 01 	lds	r24, 0x0128
     d7a:	84 30       	cpi	r24, 0x04	; 4
     d7c:	00 f3       	brcs	.-64     	; 0xd3e <main+0x1f8>
						{
							break;
						}
					}

					if ( x == 4 )
     d7e:	80 91 1e 01 	lds	r24, 0x011E
     d82:	84 30       	cpi	r24, 0x04	; 4
     d84:	09 f0       	breq	.+2      	; 0xd88 <main+0x242>
     d86:	8e c0       	rjmp	.+284    	; 0xea4 <main+0x35e>
					{
						/* correct password ---> open door*/
						LCD_vidSendCmd(0,LCD_CLR);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
						LCD_vidWriteString (0, " Welcome Home");
     d90:	22 e8       	ldi	r18, 0x82	; 130
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	b9 01       	movw	r22, r18
     d98:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
						flag = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	90 93 21 01 	sts	0x0121, r25
     da4:	80 93 20 01 	sts	0x0120, r24
						//led_on (&led_1);
						//led_off (&led_2);
						NUMBER_OF_WRONG_PASS = 0;
     da8:	10 92 1f 01 	sts	0x011F, r1
						x=0;
     dac:	10 92 1e 01 	sts	0x011E, r1
						servo_ON ();
     db0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <servo_ON>
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	aa ef       	ldi	r26, 0xFA	; 250
     dba:	b4 e4       	ldi	r27, 0x44	; 68
     dbc:	89 8f       	std	Y+25, r24	; 0x19
     dbe:	9a 8f       	std	Y+26, r25	; 0x1a
     dc0:	ab 8f       	std	Y+27, r26	; 0x1b
     dc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	69 8d       	ldd	r22, Y+25	; 0x19
     dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	4a ef       	ldi	r20, 0xFA	; 250
     dd2:	54 e4       	ldi	r21, 0x44	; 68
     dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8d 8b       	std	Y+21, r24	; 0x15
     dde:	9e 8b       	std	Y+22, r25	; 0x16
     de0:	af 8b       	std	Y+23, r26	; 0x17
     de2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <main+0x2c0>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9c 8b       	std	Y+20, r25	; 0x14
     e02:	8b 8b       	std	Y+19, r24	; 0x13
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <main+0x33e>
	else if (__tmp > 65535)
     e06:	6d 89       	ldd	r22, Y+21	; 0x15
     e08:	7e 89       	ldd	r23, Y+22	; 0x16
     e0a:	8f 89       	ldd	r24, Y+23	; 0x17
     e0c:	98 8d       	ldd	r25, Y+24	; 0x18
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <main+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	69 8d       	ldd	r22, Y+25	; 0x19
     e20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9c 8b       	std	Y+20, r25	; 0x14
     e44:	8b 8b       	std	Y+19, r24	; 0x13
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <main+0x320>
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9a 8b       	std	Y+18, r25	; 0x12
     e4e:	89 8b       	std	Y+17, r24	; 0x11
     e50:	89 89       	ldd	r24, Y+17	; 0x11
     e52:	9a 89       	ldd	r25, Y+18	; 0x12
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <main+0x30e>
     e58:	9a 8b       	std	Y+18, r25	; 0x12
     e5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8b 89       	ldd	r24, Y+19	; 0x13
     e5e:	9c 89       	ldd	r25, Y+20	; 0x14
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9c 8b       	std	Y+20, r25	; 0x14
     e64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8b 89       	ldd	r24, Y+19	; 0x13
     e68:	9c 89       	ldd	r25, Y+20	; 0x14
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <main+0x302>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <main+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6d 89       	ldd	r22, Y+21	; 0x15
     e72:	7e 89       	ldd	r23, Y+22	; 0x16
     e74:	8f 89       	ldd	r24, Y+23	; 0x17
     e76:	98 8d       	ldd	r25, Y+24	; 0x18
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9c 8b       	std	Y+20, r25	; 0x14
     e82:	8b 8b       	std	Y+19, r24	; 0x13
     e84:	8b 89       	ldd	r24, Y+19	; 0x13
     e86:	9c 89       	ldd	r25, Y+20	; 0x14
     e88:	98 8b       	std	Y+16, r25	; 0x10
     e8a:	8f 87       	std	Y+15, r24	; 0x0f
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	98 89       	ldd	r25, Y+16	; 0x10
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0x34a>
     e94:	98 8b       	std	Y+16, r25	; 0x10
     e96:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms (2000);
						servo_OFF ();
     e98:	0e 94 f8 1b 	call	0x37f0	; 0x37f0 <servo_OFF>
						n=10;
     e9c:	8a e0       	ldi	r24, 0x0A	; 10
     e9e:	80 93 f6 00 	sts	0x00F6, r24
     ea2:	18 c0       	rjmp	.+48     	; 0xed4 <main+0x38e>

					}
					else
					{
						/* wrong password*/
						LCD_vidSendCmd(0,LCD_CLR);
     ea4:	80 e0       	ldi	r24, 0x00	; 0
     ea6:	61 e0       	ldi	r22, 0x01	; 1
     ea8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
						LCD_vidWriteString (0, "Wrong Password!!");
     eac:	21 e7       	ldi	r18, 0x71	; 113
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	80 e0       	ldi	r24, 0x00	; 0
     eb2:	b9 01       	movw	r22, r18
     eb4:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
						//led_on (&led_2);
						//led_off (&led_1);
						NUMBER_OF_WRONG_PASS ++;
     eb8:	80 91 1f 01 	lds	r24, 0x011F
     ebc:	8f 5f       	subi	r24, 0xFF	; 255
     ebe:	80 93 1f 01 	sts	0x011F, r24
						flag = 0;
     ec2:	10 92 21 01 	sts	0x0121, r1
     ec6:	10 92 20 01 	sts	0x0120, r1
			LCD_vidSendCmd(0,LCD_LINE_2 ); // TO SET CURSOR TO SECOND LINE
			//_delay_ms (100);
			flag = 0;
		}

		while ( n < 6 )
     eca:	80 91 f6 00 	lds	r24, 0x00F6
     ece:	86 30       	cpi	r24, 0x06	; 6
     ed0:	08 f4       	brcc	.+2      	; 0xed4 <main+0x38e>
     ed2:	67 ce       	rjmp	.-818    	; 0xba2 <main+0x5c>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	aa e7       	ldi	r26, 0x7A	; 122
     eda:	b4 e4       	ldi	r27, 0x44	; 68
     edc:	8b 87       	std	Y+11, r24	; 0x0b
     ede:	9c 87       	std	Y+12, r25	; 0x0c
     ee0:	ad 87       	std	Y+13, r26	; 0x0d
     ee2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eea:	9e 85       	ldd	r25, Y+14	; 0x0e
     eec:	20 e0       	ldi	r18, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	4a ef       	ldi	r20, 0xFA	; 250
     ef2:	54 e4       	ldi	r21, 0x44	; 68
     ef4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef8:	dc 01       	movw	r26, r24
     efa:	cb 01       	movw	r24, r22
     efc:	8f 83       	std	Y+7, r24	; 0x07
     efe:	98 87       	std	Y+8, r25	; 0x08
     f00:	a9 87       	std	Y+9, r26	; 0x09
     f02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f04:	6f 81       	ldd	r22, Y+7	; 0x07
     f06:	78 85       	ldd	r23, Y+8	; 0x08
     f08:	89 85       	ldd	r24, Y+9	; 0x09
     f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e8       	ldi	r20, 0x80	; 128
     f12:	5f e3       	ldi	r21, 0x3F	; 63
     f14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f18:	88 23       	and	r24, r24
     f1a:	2c f4       	brge	.+10     	; 0xf26 <main+0x3e0>
		__ticks = 1;
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	9e 83       	std	Y+6, r25	; 0x06
     f22:	8d 83       	std	Y+5, r24	; 0x05
     f24:	3f c0       	rjmp	.+126    	; 0xfa4 <main+0x45e>
	else if (__tmp > 65535)
     f26:	6f 81       	ldd	r22, Y+7	; 0x07
     f28:	78 85       	ldd	r23, Y+8	; 0x08
     f2a:	89 85       	ldd	r24, Y+9	; 0x09
     f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	3f ef       	ldi	r19, 0xFF	; 255
     f32:	4f e7       	ldi	r20, 0x7F	; 127
     f34:	57 e4       	ldi	r21, 0x47	; 71
     f36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f3a:	18 16       	cp	r1, r24
     f3c:	4c f5       	brge	.+82     	; 0xf90 <main+0x44a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f40:	7c 85       	ldd	r23, Y+12	; 0x0c
     f42:	8d 85       	ldd	r24, Y+13	; 0x0d
     f44:	9e 85       	ldd	r25, Y+14	; 0x0e
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	bc 01       	movw	r22, r24
     f58:	cd 01       	movw	r24, r26
     f5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5e:	dc 01       	movw	r26, r24
     f60:	cb 01       	movw	r24, r22
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	0f c0       	rjmp	.+30     	; 0xf86 <main+0x440>
     f68:	88 ec       	ldi	r24, 0xC8	; 200
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	01 97       	sbiw	r24, 0x01	; 1
     f76:	f1 f7       	brne	.-4      	; 0xf74 <main+0x42e>
     f78:	9c 83       	std	Y+4, r25	; 0x04
     f7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7c:	8d 81       	ldd	r24, Y+5	; 0x05
     f7e:	9e 81       	ldd	r25, Y+6	; 0x06
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	8d 81       	ldd	r24, Y+5	; 0x05
     f88:	9e 81       	ldd	r25, Y+6	; 0x06
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	69 f7       	brne	.-38     	; 0xf68 <main+0x422>
     f8e:	14 c0       	rjmp	.+40     	; 0xfb8 <main+0x472>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f90:	6f 81       	ldd	r22, Y+7	; 0x07
     f92:	78 85       	ldd	r23, Y+8	; 0x08
     f94:	89 85       	ldd	r24, Y+9	; 0x09
     f96:	9a 85       	ldd	r25, Y+10	; 0x0a
     f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	9a 83       	std	Y+2, r25	; 0x02
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	89 81       	ldd	r24, Y+1	; 0x01
     fae:	9a 81       	ldd	r25, Y+2	; 0x02
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <main+0x46a>
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}

		_delay_ms(1000);
		LCD_vidSendCmd(0,LCD_CLR);
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	61 e0       	ldi	r22, 0x01	; 1
     fbc:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>

		if ( NUMBER_OF_WRONG_PASS )
     fc0:	80 91 1f 01 	lds	r24, 0x011F
     fc4:	88 23       	and	r24, r24
     fc6:	09 f4       	brne	.+2      	; 0xfca <main+0x484>
     fc8:	cc c0       	rjmp	.+408    	; 0x1162 <main+0x61c>
		{
			n = 1;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 f6 00 	sts	0x00F6, r24
			x = 0;
     fd0:	10 92 1e 01 	sts	0x011E, r1
			DIGIT = '\0';
     fd4:	10 92 1d 01 	sts	0x011D, r1
			if ( 3 == NUMBER_OF_WRONG_PASS )
     fd8:	80 91 1f 01 	lds	r24, 0x011F
     fdc:	83 30       	cpi	r24, 0x03	; 3
     fde:	09 f0       	breq	.+2      	; 0xfe2 <main+0x49c>
     fe0:	c0 c0       	rjmp	.+384    	; 0x1162 <main+0x61c>
			{
				/* BUZZER WHEN USER INTERS WRONG PASS 3 TIMES*/
				//led_on (&led_3);
				LCD_vidSendCmd(0 , LCD_LINE_1+4);
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	64 e8       	ldi	r22, 0x84	; 132
     fe6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
				LCD_vidWriteString(0 , "warning !!!");
     fea:	20 e9       	ldi	r18, 0x90	; 144
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	b9 01       	movw	r22, r18
     ff2:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
				LCD_vidSendCmd(0 , LCD_LINE_2+4);
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	64 ec       	ldi	r22, 0xC4	; 196
     ffa:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
				LCD_vidWriteString(0 , "robbery");
     ffe:	2c e9       	ldi	r18, 0x9C	; 156
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	b9 01       	movw	r22, r18
    1006:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
				DIO_enuSetPinValue(24 , 1);
    100a:	88 e1       	ldi	r24, 0x18	; 24
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    1012:	06 c0       	rjmp	.+12     	; 0x1020 <main+0x4da>
				while(0 != Button)
				{
					DIO_enuReadPinValue(15 , &Button);
    1014:	25 ef       	ldi	r18, 0xF5	; 245
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	8f e0       	ldi	r24, 0x0F	; 15
    101a:	b9 01       	movw	r22, r18
    101c:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
				LCD_vidSendCmd(0 , LCD_LINE_1+4);
				LCD_vidWriteString(0 , "warning !!!");
				LCD_vidSendCmd(0 , LCD_LINE_2+4);
				LCD_vidWriteString(0 , "robbery");
				DIO_enuSetPinValue(24 , 1);
				while(0 != Button)
    1020:	80 91 f5 00 	lds	r24, 0x00F5
    1024:	88 23       	and	r24, r24
    1026:	b1 f7       	brne	.-20     	; 0x1014 <main+0x4ce>
				{
					DIO_enuReadPinValue(15 , &Button);
					//KEYPAD_enuGetPressedKey (0, &DIGIT);
				}
				//n = 6;
				Button=1;
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 f5 00 	sts	0x00F5, r24
				DIO_enuSetPinValue(24 , 0);
    102e:	88 e1       	ldi	r24, 0x18	; 24
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
				NUMBER_OF_WRONG_PASS = 0;
    1036:	10 92 1f 01 	sts	0x011F, r1
    103a:	93 c0       	rjmp	.+294    	; 0x1162 <main+0x61c>
		}


		while (flag == 1)
		{
			flame_read(0 , 7 , &flame_logic);
    103c:	29 e2       	ldi	r18, 0x29	; 41
    103e:	31 e0       	ldi	r19, 0x01	; 1
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	67 e0       	ldi	r22, 0x07	; 7
    1044:	a9 01       	movw	r20, r18
    1046:	0e 94 1b 0b 	call	0x1636	; 0x1636 <flame_read>
			if ( (flame_logic == Is_fire) )
    104a:	80 91 29 01 	lds	r24, 0x0129
    104e:	88 23       	and	r24, r24
    1050:	99 f5       	brne	.+102    	; 0x10b8 <main+0x572>
			{

				DIO_enuSetPinValue(24 , 1);
    1052:	88 e1       	ldi	r24, 0x18	; 24
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
				LCD_vidSendCmd(0,LCD_CLR);
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
				LCD_vidSendCmd(0 , LCD_LINE_1+2);
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	62 e8       	ldi	r22, 0x82	; 130
    1066:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
				LCD_vidWriteString(0 , "The house is");
    106a:	24 ea       	ldi	r18, 0xA4	; 164
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	80 e0       	ldi	r24, 0x00	; 0
    1070:	b9 01       	movw	r22, r18
    1072:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
				LCD_vidSendCmd(0 , LCD_LINE_2+3);
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	63 ec       	ldi	r22, 0xC3	; 195
    107a:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
				LCD_vidWriteString(0 , " burning !!");
    107e:	21 eb       	ldi	r18, 0xB1	; 177
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	b9 01       	movw	r22, r18
    1086:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
				DIO_enuReadPinValue(15 , &Button);
    108a:	25 ef       	ldi	r18, 0xF5	; 245
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	8f e0       	ldi	r24, 0x0F	; 15
    1090:	b9 01       	movw	r22, r18
    1092:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
    1096:	06 c0       	rjmp	.+12     	; 0x10a4 <main+0x55e>
				while(0 != Button)
				{
					DIO_enuReadPinValue(15 , &Button);
    1098:	25 ef       	ldi	r18, 0xF5	; 245
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	8f e0       	ldi	r24, 0x0F	; 15
    109e:	b9 01       	movw	r22, r18
    10a0:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
				LCD_vidSendCmd(0 , LCD_LINE_1+2);
				LCD_vidWriteString(0 , "The house is");
				LCD_vidSendCmd(0 , LCD_LINE_2+3);
				LCD_vidWriteString(0 , " burning !!");
				DIO_enuReadPinValue(15 , &Button);
				while(0 != Button)
    10a4:	80 91 f5 00 	lds	r24, 0x00F5
    10a8:	88 23       	and	r24, r24
    10aa:	b1 f7       	brne	.-20     	; 0x1098 <main+0x552>
				{
					DIO_enuReadPinValue(15 , &Button);
				}
				state=0;
    10ac:	10 92 1c 01 	sts	0x011C, r1
				DIO_enuSetPinValue(24 , 0);
    10b0:	88 e1       	ldi	r24, 0x18	; 24
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
			}

			/*******************************************************/
			rain_read(0 , 10 , &rain_logic);
    10b8:	27 e2       	ldi	r18, 0x27	; 39
    10ba:	31 e0       	ldi	r19, 0x01	; 1
    10bc:	80 e0       	ldi	r24, 0x00	; 0
    10be:	6a e0       	ldi	r22, 0x0A	; 10
    10c0:	a9 01       	movw	r20, r18
    10c2:	0e 94 cc 19 	call	0x3398	; 0x3398 <rain_read>
			if((flame_logic == No_fire)&&(rain_logic == No_rain))
    10c6:	80 91 29 01 	lds	r24, 0x0129
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	f9 f4       	brne	.+62     	; 0x110c <main+0x5c6>
    10ce:	80 91 27 01 	lds	r24, 0x0127
    10d2:	88 23       	and	r24, r24
    10d4:	d9 f4       	brne	.+54     	; 0x110c <main+0x5c6>
			{
				if(state==1)
    10d6:	80 91 1c 01 	lds	r24, 0x011C
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 f5       	brne	.+100    	; 0x1142 <main+0x5fc>
				{
					LCD_vidSendCmd(0,LCD_CLR);
    10de:	80 e0       	ldi	r24, 0x00	; 0
    10e0:	61 e0       	ldi	r22, 0x01	; 1
    10e2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
					LCD_vidWriteString(0 , "HOUSE:Controlled");
    10e6:	2d eb       	ldi	r18, 0xBD	; 189
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	b9 01       	movw	r22, r18
    10ee:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
					LCD_vidSendCmd(0 , LCD_LINE_2);
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	60 ec       	ldi	r22, 0xC0	; 192
    10f6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
					LCD_vidWriteString(0 , "Weather : RAINY");
    10fa:	2e ec       	ldi	r18, 0xCE	; 206
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	b9 01       	movw	r22, r18
    1102:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
					state=0;
    1106:	10 92 1c 01 	sts	0x011C, r1
    110a:	1b c0       	rjmp	.+54     	; 0x1142 <main+0x5fc>
				}
			}
			else
			{
				if(state==0)
    110c:	80 91 1c 01 	lds	r24, 0x011C
    1110:	88 23       	and	r24, r24
    1112:	b9 f4       	brne	.+46     	; 0x1142 <main+0x5fc>
				{
					LCD_vidSendCmd(0,LCD_CLR);
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	61 e0       	ldi	r22, 0x01	; 1
    1118:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
					LCD_vidWriteString(0 , "HOUSE:Controlled");
    111c:	2d eb       	ldi	r18, 0xBD	; 189
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	b9 01       	movw	r22, r18
    1124:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
					LCD_vidSendCmd(0 , LCD_LINE_2);
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	60 ec       	ldi	r22, 0xC0	; 192
    112c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
					LCD_vidWriteString(0 , "Weather : COOL");
    1130:	2e ed       	ldi	r18, 0xDE	; 222
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	b9 01       	movw	r22, r18
    1138:	0e 94 65 17 	call	0x2eca	; 0x2eca <LCD_vidWriteString>
					state=1;
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	80 93 1c 01 	sts	0x011C, r24
				}
			}

			KEYPAD_enuGetPressedKey (0, &DIGIT);
    1142:	2d e1       	ldi	r18, 0x1D	; 29
    1144:	31 e0       	ldi	r19, 0x01	; 1
    1146:	80 e0       	ldi	r24, 0x00	; 0
    1148:	b9 01       	movw	r22, r18
    114a:	0e 94 91 0b 	call	0x1722	; 0x1722 <KEYPAD_enuGetPressedKey>
			if('*' == DIGIT)
    114e:	80 91 1d 01 	lds	r24, 0x011D
    1152:	8a 32       	cpi	r24, 0x2A	; 42
    1154:	31 f4       	brne	.+12     	; 0x1162 <main+0x61c>
			{
				n=1;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 93 f6 00 	sts	0x00F6, r24
				state=0;
    115c:	10 92 1c 01 	sts	0x011C, r1
    1160:	08 cd       	rjmp	.-1520   	; 0xb72 <main+0x2c>
				NUMBER_OF_WRONG_PASS = 0;
			}
		}


		while (flag == 1)
    1162:	80 91 20 01 	lds	r24, 0x0120
    1166:	90 91 21 01 	lds	r25, 0x0121
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <main+0x62c>
    1170:	65 cf       	rjmp	.-310    	; 0x103c <main+0x4f6>
    1172:	ff cc       	rjmp	.-1538   	; 0xb72 <main+0x2c>

00001174 <DIO_vidInit>:
#include "DIO.h"
#include "DIO_cfg.h"
#include "DIO_priv.h"

void DIO_vidInit(void)
{
    1174:	df 93       	push	r29
    1176:	cf 93       	push	r28
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	DDRA = CONC(DIO_DIR_PIN_7,DIO_DIR_PIN_6,DIO_DIR_PIN_5,DIO_DIR_PIN_4,DIO_DIR_PIN_3,DIO_DIR_PIN_2,DIO_DIR_PIN_1,DIO_DIR_PIN_0);
    117c:	ea e3       	ldi	r30, 0x3A	; 58
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	8f e7       	ldi	r24, 0x7F	; 127
    1182:	80 83       	st	Z, r24
	DDRB = CONC(DIO_DIR_PIN_15,DIO_DIR_PIN_14,DIO_DIR_PIN_13,DIO_DIR_PIN_12,DIO_DIR_PIN_11,DIO_DIR_PIN_10,DIO_DIR_PIN_9,DIO_DIR_PIN_8);
    1184:	e7 e3       	ldi	r30, 0x37	; 55
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8b ef       	ldi	r24, 0xFB	; 251
    118a:	80 83       	st	Z, r24
	DDRC = CONC(DIO_DIR_PIN_23,DIO_DIR_PIN_22,DIO_DIR_PIN_21,DIO_DIR_PIN_20,DIO_DIR_PIN_19,DIO_DIR_PIN_18,DIO_DIR_PIN_17,DIO_DIR_PIN_16 );
    118c:	e4 e3       	ldi	r30, 0x34	; 52
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 ef       	ldi	r24, 0xF0	; 240
    1192:	80 83       	st	Z, r24
	DDRD = CONC(DIO_DIR_PIN_31,DIO_DIR_PIN_30,DIO_DIR_PIN_29,DIO_DIR_PIN_28,DIO_DIR_PIN_27,DIO_DIR_PIN_26,DIO_DIR_PIN_25,DIO_DIR_PIN_24 );
    1194:	e1 e3       	ldi	r30, 0x31	; 49
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	8f ef       	ldi	r24, 0xFF	; 255
    119a:	80 83       	st	Z, r24
	
	
}
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	08 95       	ret

000011a2 <DIO_enuSetPinDir>:

tenuErrorStatus DIO_enuSetPinDir   (uint8 u8PinNumCpy ,uint8  u8PinDirCpy)
{
    11a2:	df 93       	push	r29
    11a4:	cf 93       	push	r28
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <DIO_enuSetPinDir+0x6>
    11a8:	0f 92       	push	r0
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc;
	if(u8PinNumCpy > 31 || u8PinDirCpy > 1)
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	80 32       	cpi	r24, 0x20	; 32
    11b6:	18 f4       	brcc	.+6      	; 0x11be <DIO_enuSetPinDir+0x1c>
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <DIO_enuSetPinDir+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	c2 c0       	rjmp	.+388    	; 0x1348 <DIO_enuSetPinDir+0x1a6>
	}
	else
	{
		if(u8PinNumCpy <=7)
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	60 f5       	brcc	.+88     	; 0x1222 <DIO_enuSetPinDir+0x80>
		{
			/*DDRA*/
			if (u8PinDirCpy == 0)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 23       	and	r24, r24
    11ce:	a9 f4       	brne	.+42     	; 0x11fa <DIO_enuSetPinDir+0x58>
			{
				// clear pin 
				CLR_BIT(DDRA,u8PinNumCpy);
    11d0:	aa e3       	ldi	r26, 0x3A	; 58
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ea e3       	ldi	r30, 0x3A	; 58
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_enuSetPinDir+0x4c>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_enuSetPinDir+0x48>
    11f2:	80 95       	com	r24
    11f4:	84 23       	and	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	a6 c0       	rjmp	.+332    	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRA,u8PinNumCpy);
    11fa:	aa e3       	ldi	r26, 0x3A	; 58
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ea e3       	ldi	r30, 0x3A	; 58
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	48 2f       	mov	r20, r24
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	02 2e       	mov	r0, r18
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_enuSetPinDir+0x76>
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	0a 94       	dec	r0
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_enuSetPinDir+0x72>
    121c:	84 2b       	or	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	92 c0       	rjmp	.+292    	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=15)
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	80 31       	cpi	r24, 0x10	; 16
    1226:	78 f5       	brcc	.+94     	; 0x1286 <DIO_enuSetPinDir+0xe4>
		{
			/*DDRB*/
			u8PinNumCpy =u8PinNumCpy%8;
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	87 70       	andi	r24, 0x07	; 7
    122c:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 23       	and	r24, r24
    1232:	a9 f4       	brne	.+42     	; 0x125e <DIO_enuSetPinDir+0xbc>
			{
				// clear pin 
				CLR_BIT(DDRB,u8PinNumCpy);
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <DIO_enuSetPinDir+0xb0>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <DIO_enuSetPinDir+0xac>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	74 c0       	rjmp	.+232    	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRB,u8PinNumCpy);
    125e:	a7 e3       	ldi	r26, 0x37	; 55
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	e7 e3       	ldi	r30, 0x37	; 55
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	48 2f       	mov	r20, r24
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	28 2f       	mov	r18, r24
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	02 2e       	mov	r0, r18
    1276:	02 c0       	rjmp	.+4      	; 0x127c <DIO_enuSetPinDir+0xda>
    1278:	88 0f       	add	r24, r24
    127a:	99 1f       	adc	r25, r25
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <DIO_enuSetPinDir+0xd6>
    1280:	84 2b       	or	r24, r20
    1282:	8c 93       	st	X, r24
    1284:	60 c0       	rjmp	.+192    	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else if (u8PinNumCpy <=23)
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	88 31       	cpi	r24, 0x18	; 24
    128a:	78 f5       	brcc	.+94     	; 0x12ea <DIO_enuSetPinDir+0x148>
		{
			/*DDRC*/
			u8PinNumCpy =u8PinNumCpy%8;
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	87 70       	andi	r24, 0x07	; 7
    1290:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	88 23       	and	r24, r24
    1296:	a9 f4       	brne	.+42     	; 0x12c2 <DIO_enuSetPinDir+0x120>
			{
				// clear pin 
				CLR_BIT(DDRC,u8PinNumCpy);
    1298:	a4 e3       	ldi	r26, 0x34	; 52
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e4 e3       	ldi	r30, 0x34	; 52
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_enuSetPinDir+0x114>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_enuSetPinDir+0x110>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	42 c0       	rjmp	.+132    	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRC,u8PinNumCpy);
    12c2:	a4 e3       	ldi	r26, 0x34	; 52
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	e4 e3       	ldi	r30, 0x34	; 52
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_enuSetPinDir+0x13e>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_enuSetPinDir+0x13a>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	2e c0       	rjmp	.+92     	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
		}
		else
		{
			/*DDRD*/
			u8PinNumCpy =u8PinNumCpy%8;
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	87 70       	andi	r24, 0x07	; 7
    12ee:	8a 83       	std	Y+2, r24	; 0x02
			if (u8PinDirCpy == 0)
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 23       	and	r24, r24
    12f4:	a9 f4       	brne	.+42     	; 0x1320 <DIO_enuSetPinDir+0x17e>
			{
				// clear pin 
				CLR_BIT(DDRD,u8PinNumCpy);
    12f6:	a1 e3       	ldi	r26, 0x31	; 49
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e1 e3       	ldi	r30, 0x31	; 49
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	48 2f       	mov	r20, r24
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	02 2e       	mov	r0, r18
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <DIO_enuSetPinDir+0x172>
    1310:	88 0f       	add	r24, r24
    1312:	99 1f       	adc	r25, r25
    1314:	0a 94       	dec	r0
    1316:	e2 f7       	brpl	.-8      	; 0x1310 <DIO_enuSetPinDir+0x16e>
    1318:	80 95       	com	r24
    131a:	84 23       	and	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	13 c0       	rjmp	.+38     	; 0x1346 <DIO_enuSetPinDir+0x1a4>
			}
			else
			{
				// set pin
				SET_BIT(DDRD,u8PinNumCpy);
    1320:	a1 e3       	ldi	r26, 0x31	; 49
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_enuSetPinDir+0x19c>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_enuSetPinDir+0x198>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
			}
		}
	 enuErrorStatusLoc = E_OK ;
    1346:	19 82       	std	Y+1, r1	; 0x01
	}
	return enuErrorStatusLoc;
    1348:	89 81       	ldd	r24, Y+1	; 0x01
}
    134a:	0f 90       	pop	r0
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <DIO_enuSetPinValue>:

tenuErrorStatus DIO_enuSetPinValue (uint8 u8PinNumCpy ,uint8  u8PinStatusCpy)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <DIO_enuSetPinValue+0x6>
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	8a 83       	std	Y+2, r24	; 0x02
    1364:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc ;
	if (u8PinNumCpy > 31 || u8PinStatusCpy > 1)
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	80 32       	cpi	r24, 0x20	; 32
    136a:	18 f4       	brcc	.+6      	; 0x1372 <DIO_enuSetPinValue+0x1c>
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	18 f0       	brcs	.+6      	; 0x1378 <DIO_enuSetPinValue+0x22>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;
    1372:	82 e0       	ldi	r24, 0x02	; 2
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	cb c0       	rjmp	.+406    	; 0x150e <DIO_enuSetPinValue+0x1b8>
	}
    else
    {
		if(u8PinNumCpy <= 7)
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	60 f5       	brcc	.+88     	; 0x13d6 <DIO_enuSetPinValue+0x80>
        {
			/*ODRA*/
			if (u8PinStatusCpy == 0)
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	88 23       	and	r24, r24
    1382:	a9 f4       	brne	.+42     	; 0x13ae <DIO_enuSetPinValue+0x58>
			{
				//CLR BIT
				CLR_BIT(ODRA , u8PinNumCpy);
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	eb e3       	ldi	r30, 0x3B	; 59
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	48 2f       	mov	r20, r24
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	02 2e       	mov	r0, r18
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <DIO_enuSetPinValue+0x4c>
    139e:	88 0f       	add	r24, r24
    13a0:	99 1f       	adc	r25, r25
    13a2:	0a 94       	dec	r0
    13a4:	e2 f7       	brpl	.-8      	; 0x139e <DIO_enuSetPinValue+0x48>
    13a6:	80 95       	com	r24
    13a8:	84 23       	and	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	af c0       	rjmp	.+350    	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRA , u8PinNumCpy);
    13ae:	ab e3       	ldi	r26, 0x3B	; 59
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_enuSetPinValue+0x76>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_enuSetPinValue+0x72>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	9b c0       	rjmp	.+310    	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
		}
        else if(u8PinNumCpy <= 15)
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	80 31       	cpi	r24, 0x10	; 16
    13da:	90 f5       	brcc	.+100    	; 0x1440 <DIO_enuSetPinValue+0xea>
        {
			/*ODRB*/
			if (u8PinStatusCpy == 0)
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	88 23       	and	r24, r24
    13e0:	c1 f4       	brne	.+48     	; 0x1412 <DIO_enuSetPinValue+0xbc>
			{
				//CLR BIT
				CLR_BIT(ODRB , (u8PinNumCpy%8));
    13e2:	a8 e3       	ldi	r26, 0x38	; 56
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e8 e3       	ldi	r30, 0x38	; 56
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	48 2f       	mov	r20, r24
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 01       	movw	r18, r24
    13f6:	27 70       	andi	r18, 0x07	; 7
    13f8:	30 70       	andi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <DIO_enuSetPinValue+0xb0>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <DIO_enuSetPinValue+0xac>
    140a:	80 95       	com	r24
    140c:	84 23       	and	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	7d c0       	rjmp	.+250    	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRB , (u8PinNumCpy%8));
    1412:	a8 e3       	ldi	r26, 0x38	; 56
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	e8 e3       	ldi	r30, 0x38	; 56
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	48 2f       	mov	r20, r24
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 01       	movw	r18, r24
    1426:	27 70       	andi	r18, 0x07	; 7
    1428:	30 70       	andi	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_enuSetPinValue+0xe0>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_enuSetPinValue+0xdc>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	66 c0       	rjmp	.+204    	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
		}
        else if(u8PinNumCpy <= 23)
    1440:	8a 81       	ldd	r24, Y+2	; 0x02
    1442:	88 31       	cpi	r24, 0x18	; 24
    1444:	90 f5       	brcc	.+100    	; 0x14aa <DIO_enuSetPinValue+0x154>
        {
			/*ODRC*/
			if (u8PinStatusCpy == 0)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	88 23       	and	r24, r24
    144a:	c1 f4       	brne	.+48     	; 0x147c <DIO_enuSetPinValue+0x126>
			{
				//CLR BIT
				CLR_BIT(ODRC , (u8PinNumCpy%8));
    144c:	a5 e3       	ldi	r26, 0x35	; 53
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	e5 e3       	ldi	r30, 0x35	; 53
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	48 2f       	mov	r20, r24
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	88 2f       	mov	r24, r24
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	9c 01       	movw	r18, r24
    1460:	27 70       	andi	r18, 0x07	; 7
    1462:	30 70       	andi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_enuSetPinValue+0x11a>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_enuSetPinValue+0x116>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	48 c0       	rjmp	.+144    	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRC , (u8PinNumCpy%8));
    147c:	a5 e3       	ldi	r26, 0x35	; 53
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	9c 01       	movw	r18, r24
    1490:	27 70       	andi	r18, 0x07	; 7
    1492:	30 70       	andi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <DIO_enuSetPinValue+0x14a>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <DIO_enuSetPinValue+0x146>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	31 c0       	rjmp	.+98     	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
		}
		else
		{
			/*ODRD*/
			if (u8PinStatusCpy == 0)
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 23       	and	r24, r24
    14ae:	c1 f4       	brne	.+48     	; 0x14e0 <DIO_enuSetPinValue+0x18a>
			{
				//CLR BIT
				CLR_BIT(ODRD , (u8PinNumCpy%8));
    14b0:	a2 e3       	ldi	r26, 0x32	; 50
    14b2:	b0 e0       	ldi	r27, 0x00	; 0
    14b4:	e2 e3       	ldi	r30, 0x32	; 50
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	80 81       	ld	r24, Z
    14ba:	48 2f       	mov	r20, r24
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	88 2f       	mov	r24, r24
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	9c 01       	movw	r18, r24
    14c4:	27 70       	andi	r18, 0x07	; 7
    14c6:	30 70       	andi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <DIO_enuSetPinValue+0x17e>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <DIO_enuSetPinValue+0x17a>
    14d8:	80 95       	com	r24
    14da:	84 23       	and	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	16 c0       	rjmp	.+44     	; 0x150c <DIO_enuSetPinValue+0x1b6>
			}
			else 
			{
				//SET BIT
				SET_BIT(ODRD , (u8PinNumCpy%8));
    14e0:	a2 e3       	ldi	r26, 0x32	; 50
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e2 e3       	ldi	r30, 0x32	; 50
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	9c 01       	movw	r18, r24
    14f4:	27 70       	andi	r18, 0x07	; 7
    14f6:	30 70       	andi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enuSetPinValue+0x1ae>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enuSetPinValue+0x1aa>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
			}
		}

        enuErrorStatusLoc = E_OK;
    150c:	19 82       	std	Y+1, r1	; 0x01
		

	}
	return enuErrorStatusLoc ;
    150e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <DIO_enuReadPinValue>:
tenuErrorStatus DIO_enuReadPinValue(uint8 u8PinNumCpy ,uint8* pu8PinValueCpy)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <DIO_enuReadPinValue+0x6>
    1522:	00 d0       	rcall	.+0      	; 0x1524 <DIO_enuReadPinValue+0x8>
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	8a 83       	std	Y+2, r24	; 0x02
    152a:	7c 83       	std	Y+4, r23	; 0x04
    152c:	6b 83       	std	Y+3, r22	; 0x03
	tenuErrorStatus enuErrorStatusLoc  ;
	if(u8PinNumCpy > 31)
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 32       	cpi	r24, 0x20	; 32
    1532:	18 f0       	brcs	.+6      	; 0x153a <DIO_enuReadPinValue+0x1e>
	{
		enuErrorStatusLoc = OUT_OF_RANG ;	
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	66 c0       	rjmp	.+204    	; 0x1606 <DIO_enuReadPinValue+0xea>
	}
	else if (pu8PinValueCpy == NULL)
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	00 97       	sbiw	r24, 0x00	; 0
    1540:	19 f4       	brne	.+6      	; 0x1548 <DIO_enuReadPinValue+0x2c>
	{
		enuErrorStatusLoc = IS_NULL_POINTER; 
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	5f c0       	rjmp	.+190    	; 0x1606 <DIO_enuReadPinValue+0xea>
	}
	else
	{
		if(u8PinNumCpy <= 7)
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 30       	cpi	r24, 0x08	; 8
    154c:	a0 f4       	brcc	.+40     	; 0x1576 <DIO_enuReadPinValue+0x5a>
		{
			/*IDRA*/
			*pu8PinValueCpy = GET_BIT(IDRA ,u8PinNumCpy );
    154e:	e9 e3       	ldi	r30, 0x39	; 57
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	88 2f       	mov	r24, r24
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a9 01       	movw	r20, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_enuReadPinValue+0x4a>
    1562:	55 95       	asr	r21
    1564:	47 95       	ror	r20
    1566:	8a 95       	dec	r24
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_enuReadPinValue+0x46>
    156a:	ca 01       	movw	r24, r20
    156c:	81 70       	andi	r24, 0x01	; 1
    156e:	eb 81       	ldd	r30, Y+3	; 0x03
    1570:	fc 81       	ldd	r31, Y+4	; 0x04
    1572:	80 83       	st	Z, r24
    1574:	47 c0       	rjmp	.+142    	; 0x1604 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 15)
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	80 31       	cpi	r24, 0x10	; 16
    157a:	b0 f4       	brcc	.+44     	; 0x15a8 <DIO_enuReadPinValue+0x8c>
		{
			/*IDRB*/
			
			*pu8PinValueCpy = GET_BIT(IDRB ,(u8PinNumCpy%8) );
    157c:	e6 e3       	ldi	r30, 0x36	; 54
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	87 70       	andi	r24, 0x07	; 7
    158e:	90 70       	andi	r25, 0x00	; 0
    1590:	a9 01       	movw	r20, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_enuReadPinValue+0x7c>
    1594:	55 95       	asr	r21
    1596:	47 95       	ror	r20
    1598:	8a 95       	dec	r24
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_enuReadPinValue+0x78>
    159c:	ca 01       	movw	r24, r20
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	eb 81       	ldd	r30, Y+3	; 0x03
    15a2:	fc 81       	ldd	r31, Y+4	; 0x04
    15a4:	80 83       	st	Z, r24
    15a6:	2e c0       	rjmp	.+92     	; 0x1604 <DIO_enuReadPinValue+0xe8>
		}
		else if(u8PinNumCpy <= 23)
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 31       	cpi	r24, 0x18	; 24
    15ac:	b0 f4       	brcc	.+44     	; 0x15da <DIO_enuReadPinValue+0xbe>
		{
			/*IDRC*/
			
			*pu8PinValueCpy = GET_BIT(IDRC ,(u8PinNumCpy%8) );
    15ae:	e3 e3       	ldi	r30, 0x33	; 51
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	a9 01       	movw	r20, r18
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <DIO_enuReadPinValue+0xae>
    15c6:	55 95       	asr	r21
    15c8:	47 95       	ror	r20
    15ca:	8a 95       	dec	r24
    15cc:	e2 f7       	brpl	.-8      	; 0x15c6 <DIO_enuReadPinValue+0xaa>
    15ce:	ca 01       	movw	r24, r20
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	eb 81       	ldd	r30, Y+3	; 0x03
    15d4:	fc 81       	ldd	r31, Y+4	; 0x04
    15d6:	80 83       	st	Z, r24
    15d8:	15 c0       	rjmp	.+42     	; 0x1604 <DIO_enuReadPinValue+0xe8>
		}
		else 
		{
			/*IDRD*/
			
			*pu8PinValueCpy = GET_BIT(IDRD ,(u8PinNumCpy%8) );
    15da:	e0 e3       	ldi	r30, 0x30	; 48
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	88 2f       	mov	r24, r24
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	87 70       	andi	r24, 0x07	; 7
    15ec:	90 70       	andi	r25, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_enuReadPinValue+0xda>
    15f2:	55 95       	asr	r21
    15f4:	47 95       	ror	r20
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_enuReadPinValue+0xd6>
    15fa:	ca 01       	movw	r24, r20
    15fc:	81 70       	andi	r24, 0x01	; 1
    15fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1600:	fc 81       	ldd	r31, Y+4	; 0x04
    1602:	80 83       	st	Z, r24
		}
		enuErrorStatusLoc = E_OK ;
    1604:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return enuErrorStatusLoc ;
    1606:	89 81       	ldd	r24, Y+1	; 0x01
}
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <DIO_enuSetPinPullUp>:
tenuErrorStatus DIO_enuSetPinPullUp(uint8 u8PinNumCpy ,uint8  u8PullupStatusCpy)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <DIO_enuSetPinPullUp+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
    1622:	6a 83       	std	Y+2, r22	; 0x02
   return DIO_enuSetPinValue(u8PinNumCpy ,u8PullupStatusCpy);	
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	6a 81       	ldd	r22, Y+2	; 0x02
    1628:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
}
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <flame_read>:
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to
 */

 void flame_read(uint8 u8flameNumCpy, uint8 u8pinNum , fire_t *fire_status)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <flame_read+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <flame_read+0x8>
    163e:	0f 92       	push	r0
    1640:	cd b7       	in	r28, 0x3d	; 61
    1642:	de b7       	in	r29, 0x3e	; 62
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	6b 83       	std	Y+3, r22	; 0x03
    1648:	5d 83       	std	Y+5, r21	; 0x05
    164a:	4c 83       	std	Y+4, r20	; 0x04
    logic_t logic = HIGH;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	89 83       	std	Y+1, r24	; 0x01


        DIO_enuReadPinValue (u8pinNum, &logic);
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9e 01       	movw	r18, r28
    1654:	2f 5f       	subi	r18, 0xFF	; 255
    1656:	3f 4f       	sbci	r19, 0xFF	; 255
    1658:	b9 01       	movw	r22, r18
    165a:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
        if (logic == HIGH)
    165e:	89 81       	ldd	r24, Y+1	; 0x01
    1660:	81 30       	cpi	r24, 0x01	; 1
    1662:	29 f4       	brne	.+10     	; 0x166e <flame_read+0x38>
        {
            *fire_status = No_fire;
    1664:	ec 81       	ldd	r30, Y+4	; 0x04
    1666:	fd 81       	ldd	r31, Y+5	; 0x05
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	80 83       	st	Z, r24
    166c:	03 c0       	rjmp	.+6      	; 0x1674 <flame_read+0x3e>
        }
        else
        {
            *fire_status = Is_fire;
    166e:	ec 81       	ldd	r30, Y+4	; 0x04
    1670:	fd 81       	ldd	r31, Y+5	; 0x05
    1672:	10 82       	st	Z, r1
        }
}
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	cf 91       	pop	r28
    1680:	df 91       	pop	r29
    1682:	08 95       	ret

00001684 <KEYPAD_vidInit>:
#include "KEYPAD.h"
#include "KEYPAD_cfg.h"
#include "KEYPAD_priv.h"

void KEYPAD_vidInit(void)
{
    1684:	df 93       	push	r29
    1686:	cf 93       	push	r28
    1688:	00 d0       	rcall	.+0      	; 0x168a <KEYPAD_vidInit+0x6>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    168e:	1a 82       	std	Y+2, r1	; 0x02
    1690:	3f c0       	rjmp	.+126    	; 0x1710 <KEYPAD_vidInit+0x8c>
	{
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
    1692:	19 82       	std	Y+1, r1	; 0x01
    1694:	21 c0       	rjmp	.+66     	; 0x16d8 <KEYPAD_vidInit+0x54>
		{
			DIO_enuSetPinPullUp(KEYPAD_astrCfg[u8CntrLoc].au8InputPins[u8Cntr1Loc] , 1);
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	48 2f       	mov	r20, r24
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	68 2f       	mov	r22, r24
    16a0:	70 e0       	ldi	r23, 0x00	; 0
    16a2:	ca 01       	movw	r24, r20
    16a4:	9c 01       	movw	r18, r24
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	24 0f       	add	r18, r20
    16ac:	35 1f       	adc	r19, r21
    16ae:	c9 01       	movw	r24, r18
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	82 1b       	sub	r24, r18
    16be:	93 0b       	sbc	r25, r19
    16c0:	86 0f       	add	r24, r22
    16c2:	97 1f       	adc	r25, r23
    16c4:	fc 01       	movw	r30, r24
    16c6:	e5 50       	subi	r30, 0x05	; 5
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	80 81       	ld	r24, Z
    16cc:	61 e0       	ldi	r22, 0x01	; 1
    16ce:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DIO_enuSetPinPullUp>
void KEYPAD_vidInit(void)
{
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
	{
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	8f 5f       	subi	r24, 0xFF	; 255
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	8a 81       	ldd	r24, Y+2	; 0x02
    16da:	48 2f       	mov	r20, r24
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	ca 01       	movw	r24, r20
    16e0:	9c 01       	movw	r18, r24
    16e2:	22 0f       	add	r18, r18
    16e4:	33 1f       	adc	r19, r19
    16e6:	24 0f       	add	r18, r20
    16e8:	35 1f       	adc	r19, r21
    16ea:	c9 01       	movw	r24, r18
    16ec:	88 0f       	add	r24, r24
    16ee:	99 1f       	adc	r25, r25
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	82 1b       	sub	r24, r18
    16fa:	93 0b       	sbc	r25, r19
    16fc:	fc 01       	movw	r30, r24
    16fe:	e2 5f       	subi	r30, 0xF2	; 242
    1700:	fe 4f       	sbci	r31, 0xFE	; 254
    1702:	90 81       	ld	r25, Z
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	89 17       	cp	r24, r25
    1708:	30 f2       	brcs	.-116    	; 0x1696 <KEYPAD_vidInit+0x12>
#include "KEYPAD_priv.h"

void KEYPAD_vidInit(void)
{
	uint8 u8CntrLoc ,u8Cntr1Loc;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_MAX_NUM ; u8CntrLoc++)
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	8f 5f       	subi	r24, 0xFF	; 255
    170e:	8a 83       	std	Y+2, r24	; 0x02
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	88 23       	and	r24, r24
    1714:	09 f4       	brne	.+2      	; 0x1718 <KEYPAD_vidInit+0x94>
    1716:	bd cf       	rjmp	.-134    	; 0x1692 <KEYPAD_vidInit+0xe>
		for(u8Cntr1Loc = 0 ; u8Cntr1Loc < KEYPAD_astrCfg[u8CntrLoc].u8InputNum ; u8Cntr1Loc++)
		{
			DIO_enuSetPinPullUp(KEYPAD_astrCfg[u8CntrLoc].au8InputPins[u8Cntr1Loc] , 1);
		}
	}
}
    1718:	0f 90       	pop	r0
    171a:	0f 90       	pop	r0
    171c:	cf 91       	pop	r28
    171e:	df 91       	pop	r29
    1720:	08 95       	ret

00001722 <KEYPAD_enuGetPressedKey>:

tenuErrorStatus  KEYPAD_enuGetPressedKey(uint8 u8KeyNumCpy, uint8 * pu8PressedKeyCpy)
{
    1722:	df 93       	push	r29
    1724:	cf 93       	push	r28
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	a6 97       	sbiw	r28, 0x26	; 38
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	8c a3       	std	Y+36, r24	; 0x24
    1738:	7e a3       	std	Y+38, r23	; 0x26
    173a:	6d a3       	std	Y+37, r22	; 0x25
	tenuErrorStatus enuResLoc = E_OK ;
    173c:	1b a2       	std	Y+35, r1	; 0x23
	uint8 u8SeqNumLoc ;
	uint32 u32ReadsLoc = 0 ;
    173e:	1e 8e       	std	Y+30, r1	; 0x1e
    1740:	1f 8e       	std	Y+31, r1	; 0x1f
    1742:	18 a2       	std	Y+32, r1	; 0x20
    1744:	19 a2       	std	Y+33, r1	; 0x21
	uint8 u8RepLoc;
	
	if (u8KeyNumCpy >= KEYPAD_MAX_NUM)
    1746:	8c a1       	ldd	r24, Y+36	; 0x24
    1748:	88 23       	and	r24, r24
    174a:	19 f0       	breq	.+6      	; 0x1752 <KEYPAD_enuGetPressedKey+0x30>
	{
		enuResLoc = OUT_OF_RANG ;
    174c:	82 e0       	ldi	r24, 0x02	; 2
    174e:	8b a3       	std	Y+35, r24	; 0x23
    1750:	25 c1       	rjmp	.+586    	; 0x199c <KEYPAD_enuGetPressedKey+0x27a>
	}
	else if (pu8PressedKeyCpy == NULL)
    1752:	8d a1       	ldd	r24, Y+37	; 0x25
    1754:	9e a1       	ldd	r25, Y+38	; 0x26
    1756:	00 97       	sbiw	r24, 0x00	; 0
    1758:	19 f4       	brne	.+6      	; 0x1760 <KEYPAD_enuGetPressedKey+0x3e>
	{
		enuResLoc = IS_NULL_POINTER ;
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	8b a3       	std	Y+35, r24	; 0x23
    175e:	1e c1       	rjmp	.+572    	; 0x199c <KEYPAD_enuGetPressedKey+0x27a>
	}
	else
	{
		for(u8SeqNumLoc = 0 ; u8SeqNumLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8SeqNumLoc++)
    1760:	1a a2       	std	Y+34, r1	; 0x22
    1762:	02 c1       	rjmp	.+516    	; 0x1968 <KEYPAD_enuGetPressedKey+0x246>
		{
			 // sequence 
			 PutSequence(u8KeyNumCpy,u8SeqNumLoc);
    1764:	8c a1       	ldd	r24, Y+36	; 0x24
    1766:	6a a1       	ldd	r22, Y+34	; 0x22
    1768:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <PutSequence>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	a0 e2       	ldi	r26, 0x20	; 32
    1772:	b1 e4       	ldi	r27, 0x41	; 65
    1774:	89 8f       	std	Y+25, r24	; 0x19
    1776:	9a 8f       	std	Y+26, r25	; 0x1a
    1778:	ab 8f       	std	Y+27, r26	; 0x1b
    177a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    177c:	69 8d       	ldd	r22, Y+25	; 0x19
    177e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1780:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1782:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1784:	20 e0       	ldi	r18, 0x00	; 0
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	4a ef       	ldi	r20, 0xFA	; 250
    178a:	54 e4       	ldi	r21, 0x44	; 68
    178c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1790:	dc 01       	movw	r26, r24
    1792:	cb 01       	movw	r24, r22
    1794:	8d 8b       	std	Y+21, r24	; 0x15
    1796:	9e 8b       	std	Y+22, r25	; 0x16
    1798:	af 8b       	std	Y+23, r26	; 0x17
    179a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    179c:	6d 89       	ldd	r22, Y+21	; 0x15
    179e:	7e 89       	ldd	r23, Y+22	; 0x16
    17a0:	8f 89       	ldd	r24, Y+23	; 0x17
    17a2:	98 8d       	ldd	r25, Y+24	; 0x18
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	2c f4       	brge	.+10     	; 0x17be <KEYPAD_enuGetPressedKey+0x9c>
		__ticks = 1;
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	9c 8b       	std	Y+20, r25	; 0x14
    17ba:	8b 8b       	std	Y+19, r24	; 0x13
    17bc:	3f c0       	rjmp	.+126    	; 0x183c <KEYPAD_enuGetPressedKey+0x11a>
	else if (__tmp > 65535)
    17be:	6d 89       	ldd	r22, Y+21	; 0x15
    17c0:	7e 89       	ldd	r23, Y+22	; 0x16
    17c2:	8f 89       	ldd	r24, Y+23	; 0x17
    17c4:	98 8d       	ldd	r25, Y+24	; 0x18
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	3f ef       	ldi	r19, 0xFF	; 255
    17ca:	4f e7       	ldi	r20, 0x7F	; 127
    17cc:	57 e4       	ldi	r21, 0x47	; 71
    17ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17d2:	18 16       	cp	r1, r24
    17d4:	4c f5       	brge	.+82     	; 0x1828 <KEYPAD_enuGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	69 8d       	ldd	r22, Y+25	; 0x19
    17d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17de:	20 e0       	ldi	r18, 0x00	; 0
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	40 e2       	ldi	r20, 0x20	; 32
    17e4:	51 e4       	ldi	r21, 0x41	; 65
    17e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	bc 01       	movw	r22, r24
    17f0:	cd 01       	movw	r24, r26
    17f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	9c 8b       	std	Y+20, r25	; 0x14
    17fc:	8b 8b       	std	Y+19, r24	; 0x13
    17fe:	0f c0       	rjmp	.+30     	; 0x181e <KEYPAD_enuGetPressedKey+0xfc>
    1800:	88 ec       	ldi	r24, 0xC8	; 200
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9a 8b       	std	Y+18, r25	; 0x12
    1806:	89 8b       	std	Y+17, r24	; 0x11
    1808:	89 89       	ldd	r24, Y+17	; 0x11
    180a:	9a 89       	ldd	r25, Y+18	; 0x12
    180c:	01 97       	sbiw	r24, 0x01	; 1
    180e:	f1 f7       	brne	.-4      	; 0x180c <KEYPAD_enuGetPressedKey+0xea>
    1810:	9a 8b       	std	Y+18, r25	; 0x12
    1812:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1814:	8b 89       	ldd	r24, Y+19	; 0x13
    1816:	9c 89       	ldd	r25, Y+20	; 0x14
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	9c 8b       	std	Y+20, r25	; 0x14
    181c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181e:	8b 89       	ldd	r24, Y+19	; 0x13
    1820:	9c 89       	ldd	r25, Y+20	; 0x14
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	69 f7       	brne	.-38     	; 0x1800 <KEYPAD_enuGetPressedKey+0xde>
    1826:	14 c0       	rjmp	.+40     	; 0x1850 <KEYPAD_enuGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1828:	6d 89       	ldd	r22, Y+21	; 0x15
    182a:	7e 89       	ldd	r23, Y+22	; 0x16
    182c:	8f 89       	ldd	r24, Y+23	; 0x17
    182e:	98 8d       	ldd	r25, Y+24	; 0x18
    1830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1834:	dc 01       	movw	r26, r24
    1836:	cb 01       	movw	r24, r22
    1838:	9c 8b       	std	Y+20, r25	; 0x14
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	8b 89       	ldd	r24, Y+19	; 0x13
    183e:	9c 89       	ldd	r25, Y+20	; 0x14
    1840:	98 8b       	std	Y+16, r25	; 0x10
    1842:	8f 87       	std	Y+15, r24	; 0x0f
    1844:	8f 85       	ldd	r24, Y+15	; 0x0f
    1846:	98 89       	ldd	r25, Y+16	; 0x10
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	f1 f7       	brne	.-4      	; 0x1848 <KEYPAD_enuGetPressedKey+0x126>
    184c:	98 8b       	std	Y+16, r25	; 0x10
    184e:	8f 87       	std	Y+15, r24	; 0x0f
			 _delay_ms(10);
			 // read input 
			 u32ReadsLoc = ReadSequence(u8KeyNumCpy);
    1850:	8c a1       	ldd	r24, Y+36	; 0x24
    1852:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <ReadSequence>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	8e 8f       	std	Y+30, r24	; 0x1e
    185c:	9f 8f       	std	Y+31, r25	; 0x1f
    185e:	a8 a3       	std	Y+32, r26	; 0x20
    1860:	b9 a3       	std	Y+33, r27	; 0x21
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e2       	ldi	r26, 0x20	; 32
    1868:	b1 e4       	ldi	r27, 0x41	; 65
    186a:	8b 87       	std	Y+11, r24	; 0x0b
    186c:	9c 87       	std	Y+12, r25	; 0x0c
    186e:	ad 87       	std	Y+13, r26	; 0x0d
    1870:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1872:	6b 85       	ldd	r22, Y+11	; 0x0b
    1874:	7c 85       	ldd	r23, Y+12	; 0x0c
    1876:	8d 85       	ldd	r24, Y+13	; 0x0d
    1878:	9e 85       	ldd	r25, Y+14	; 0x0e
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	4a ef       	ldi	r20, 0xFA	; 250
    1880:	54 e4       	ldi	r21, 0x44	; 68
    1882:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	8f 83       	std	Y+7, r24	; 0x07
    188c:	98 87       	std	Y+8, r25	; 0x08
    188e:	a9 87       	std	Y+9, r26	; 0x09
    1890:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1892:	6f 81       	ldd	r22, Y+7	; 0x07
    1894:	78 85       	ldd	r23, Y+8	; 0x08
    1896:	89 85       	ldd	r24, Y+9	; 0x09
    1898:	9a 85       	ldd	r25, Y+10	; 0x0a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	40 e8       	ldi	r20, 0x80	; 128
    18a0:	5f e3       	ldi	r21, 0x3F	; 63
    18a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a6:	88 23       	and	r24, r24
    18a8:	2c f4       	brge	.+10     	; 0x18b4 <KEYPAD_enuGetPressedKey+0x192>
		__ticks = 1;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9e 83       	std	Y+6, r25	; 0x06
    18b0:	8d 83       	std	Y+5, r24	; 0x05
    18b2:	3f c0       	rjmp	.+126    	; 0x1932 <KEYPAD_enuGetPressedKey+0x210>
	else if (__tmp > 65535)
    18b4:	6f 81       	ldd	r22, Y+7	; 0x07
    18b6:	78 85       	ldd	r23, Y+8	; 0x08
    18b8:	89 85       	ldd	r24, Y+9	; 0x09
    18ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	3f ef       	ldi	r19, 0xFF	; 255
    18c0:	4f e7       	ldi	r20, 0x7F	; 127
    18c2:	57 e4       	ldi	r21, 0x47	; 71
    18c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c8:	18 16       	cp	r1, r24
    18ca:	4c f5       	brge	.+82     	; 0x191e <KEYPAD_enuGetPressedKey+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	40 e2       	ldi	r20, 0x20	; 32
    18da:	51 e4       	ldi	r21, 0x41	; 65
    18dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e0:	dc 01       	movw	r26, r24
    18e2:	cb 01       	movw	r24, r22
    18e4:	bc 01       	movw	r22, r24
    18e6:	cd 01       	movw	r24, r26
    18e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ec:	dc 01       	movw	r26, r24
    18ee:	cb 01       	movw	r24, r22
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	0f c0       	rjmp	.+30     	; 0x1914 <KEYPAD_enuGetPressedKey+0x1f2>
    18f6:	88 ec       	ldi	r24, 0xC8	; 200
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	9c 83       	std	Y+4, r25	; 0x04
    18fc:	8b 83       	std	Y+3, r24	; 0x03
    18fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1900:	9c 81       	ldd	r25, Y+4	; 0x04
    1902:	01 97       	sbiw	r24, 0x01	; 1
    1904:	f1 f7       	brne	.-4      	; 0x1902 <KEYPAD_enuGetPressedKey+0x1e0>
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190a:	8d 81       	ldd	r24, Y+5	; 0x05
    190c:	9e 81       	ldd	r25, Y+6	; 0x06
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1914:	8d 81       	ldd	r24, Y+5	; 0x05
    1916:	9e 81       	ldd	r25, Y+6	; 0x06
    1918:	00 97       	sbiw	r24, 0x00	; 0
    191a:	69 f7       	brne	.-38     	; 0x18f6 <KEYPAD_enuGetPressedKey+0x1d4>
    191c:	14 c0       	rjmp	.+40     	; 0x1946 <KEYPAD_enuGetPressedKey+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191e:	6f 81       	ldd	r22, Y+7	; 0x07
    1920:	78 85       	ldd	r23, Y+8	; 0x08
    1922:	89 85       	ldd	r24, Y+9	; 0x09
    1924:	9a 85       	ldd	r25, Y+10	; 0x0a
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	9e 83       	std	Y+6, r25	; 0x06
    1930:	8d 83       	std	Y+5, r24	; 0x05
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	9a 81       	ldd	r25, Y+2	; 0x02
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	f1 f7       	brne	.-4      	; 0x193e <KEYPAD_enuGetPressedKey+0x21c>
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(10);
			 // repesent  0xFF
			 u8RepLoc = RepValue(u8KeyNumCpy ,u32ReadsLoc,u8SeqNumLoc);
    1946:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1948:	3f 8d       	ldd	r19, Y+31	; 0x1f
    194a:	48 a1       	ldd	r20, Y+32	; 0x20
    194c:	59 a1       	ldd	r21, Y+33	; 0x21
    194e:	8c a1       	ldd	r24, Y+36	; 0x24
    1950:	ba 01       	movw	r22, r20
    1952:	a9 01       	movw	r20, r18
    1954:	2a a1       	ldd	r18, Y+34	; 0x22
    1956:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <RepValue>
    195a:	8d 8f       	std	Y+29, r24	; 0x1d
			 // check != 0xFF break
			 if (u8RepLoc!=0xFF)
    195c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195e:	8f 3f       	cpi	r24, 0xFF	; 255
    1960:	e9 f4       	brne	.+58     	; 0x199c <KEYPAD_enuGetPressedKey+0x27a>
	{
		enuResLoc = IS_NULL_POINTER ;
	}
	else
	{
		for(u8SeqNumLoc = 0 ; u8SeqNumLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8SeqNumLoc++)
    1962:	8a a1       	ldd	r24, Y+34	; 0x22
    1964:	8f 5f       	subi	r24, 0xFF	; 255
    1966:	8a a3       	std	Y+34, r24	; 0x22
    1968:	8c a1       	ldd	r24, Y+36	; 0x24
    196a:	48 2f       	mov	r20, r24
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	ca 01       	movw	r24, r20
    1970:	9c 01       	movw	r18, r24
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	24 0f       	add	r18, r20
    1978:	35 1f       	adc	r19, r21
    197a:	c9 01       	movw	r24, r18
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	82 1b       	sub	r24, r18
    198a:	93 0b       	sbc	r25, r19
    198c:	fc 01       	movw	r30, r24
    198e:	e1 5f       	subi	r30, 0xF1	; 241
    1990:	fe 4f       	sbci	r31, 0xFE	; 254
    1992:	90 81       	ld	r25, Z
    1994:	8a a1       	ldd	r24, Y+34	; 0x22
    1996:	89 17       	cp	r24, r25
    1998:	08 f4       	brcc	.+2      	; 0x199c <KEYPAD_enuGetPressedKey+0x27a>
    199a:	e4 ce       	rjmp	.-568    	; 0x1764 <KEYPAD_enuGetPressedKey+0x42>
			
		}
		
   
 	}
	 *pu8PressedKeyCpy = u8RepLoc ;
    199c:	ed a1       	ldd	r30, Y+37	; 0x25
    199e:	fe a1       	ldd	r31, Y+38	; 0x26
    19a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19a2:	80 83       	st	Z, r24
	return enuResLoc ;
    19a4:	8b a1       	ldd	r24, Y+35	; 0x23
	
}
    19a6:	a6 96       	adiw	r28, 0x26	; 38
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <PutSequence>:


static void PutSequence (uint8 u8KeyNumCpy , uint8 u8SeqCpy)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <PutSequence+0x6>
    19be:	0f 92       	push	r0
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	8a 83       	std	Y+2, r24	; 0x02
    19c6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8CntrLoc++)
    19c8:	19 82       	std	Y+1, r1	; 0x01
    19ca:	44 c0       	rjmp	.+136    	; 0x1a54 <PutSequence+0x9c>
	{
		if (u8SeqCpy == u8CntrLoc )
    19cc:	9b 81       	ldd	r25, Y+3	; 0x03
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	98 17       	cp	r25, r24
    19d2:	f9 f4       	brne	.+62     	; 0x1a12 <PutSequence+0x5a>
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],0);
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	48 2f       	mov	r20, r24
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	68 2f       	mov	r22, r24
    19de:	70 e0       	ldi	r23, 0x00	; 0
    19e0:	ca 01       	movw	r24, r20
    19e2:	9c 01       	movw	r18, r24
    19e4:	22 0f       	add	r18, r18
    19e6:	33 1f       	adc	r19, r19
    19e8:	24 0f       	add	r18, r20
    19ea:	35 1f       	adc	r19, r21
    19ec:	c9 01       	movw	r24, r18
    19ee:	88 0f       	add	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	82 1b       	sub	r24, r18
    19fc:	93 0b       	sbc	r25, r19
    19fe:	86 0f       	add	r24, r22
    1a00:	97 1f       	adc	r25, r23
    1a02:	fc 01       	movw	r30, r24
    1a04:	e1 50       	subi	r30, 0x01	; 1
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	60 e0       	ldi	r22, 0x00	; 0
    1a0c:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    1a10:	1e c0       	rjmp	.+60     	; 0x1a4e <PutSequence+0x96>
		}
		else
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],1);
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	48 2f       	mov	r20, r24
    1a16:	50 e0       	ldi	r21, 0x00	; 0
    1a18:	89 81       	ldd	r24, Y+1	; 0x01
    1a1a:	68 2f       	mov	r22, r24
    1a1c:	70 e0       	ldi	r23, 0x00	; 0
    1a1e:	ca 01       	movw	r24, r20
    1a20:	9c 01       	movw	r18, r24
    1a22:	22 0f       	add	r18, r18
    1a24:	33 1f       	adc	r19, r19
    1a26:	24 0f       	add	r18, r20
    1a28:	35 1f       	adc	r19, r21
    1a2a:	c9 01       	movw	r24, r18
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	88 0f       	add	r24, r24
    1a36:	99 1f       	adc	r25, r25
    1a38:	82 1b       	sub	r24, r18
    1a3a:	93 0b       	sbc	r25, r19
    1a3c:	86 0f       	add	r24, r22
    1a3e:	97 1f       	adc	r25, r23
    1a40:	fc 01       	movw	r30, r24
    1a42:	e1 50       	subi	r30, 0x01	; 1
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	80 81       	ld	r24, Z
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>


static void PutSequence (uint8 u8KeyNumCpy , uint8 u8SeqCpy)
{
	uint8 u8CntrLoc ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8OutputNum ;u8CntrLoc++)
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	8f 5f       	subi	r24, 0xFF	; 255
    1a52:	89 83       	std	Y+1, r24	; 0x01
    1a54:	8a 81       	ldd	r24, Y+2	; 0x02
    1a56:	48 2f       	mov	r20, r24
    1a58:	50 e0       	ldi	r21, 0x00	; 0
    1a5a:	ca 01       	movw	r24, r20
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	24 0f       	add	r18, r20
    1a64:	35 1f       	adc	r19, r21
    1a66:	c9 01       	movw	r24, r18
    1a68:	88 0f       	add	r24, r24
    1a6a:	99 1f       	adc	r25, r25
    1a6c:	88 0f       	add	r24, r24
    1a6e:	99 1f       	adc	r25, r25
    1a70:	88 0f       	add	r24, r24
    1a72:	99 1f       	adc	r25, r25
    1a74:	82 1b       	sub	r24, r18
    1a76:	93 0b       	sbc	r25, r19
    1a78:	fc 01       	movw	r30, r24
    1a7a:	e1 5f       	subi	r30, 0xF1	; 241
    1a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a7e:	90 81       	ld	r25, Z
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	89 17       	cp	r24, r25
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <PutSequence+0xd0>
    1a86:	a2 cf       	rjmp	.-188    	; 0x19cc <PutSequence+0x14>
		else
		{
			DIO_enuSetPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8OutputPins[u8CntrLoc],1);
		}
	}
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <ReadSequence>:

static uint32 ReadSequence(uint8 u8KeyNumCpy )
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
    1a9c:	27 97       	sbiw	r28, 0x07	; 7
    1a9e:	0f b6       	in	r0, 0x3f	; 63
    1aa0:	f8 94       	cli
    1aa2:	de bf       	out	0x3e, r29	; 62
    1aa4:	0f be       	out	0x3f, r0	; 63
    1aa6:	cd bf       	out	0x3d, r28	; 61
    1aa8:	8f 83       	std	Y+7, r24	; 0x07
	uint8 u8CntrLoc  ;
	uint8 u8ReadsLoc ;
	uint32 u32ReturnLoc =0 ;
    1aaa:	19 82       	std	Y+1, r1	; 0x01
    1aac:	1a 82       	std	Y+2, r1	; 0x02
    1aae:	1b 82       	std	Y+3, r1	; 0x03
    1ab0:	1c 82       	std	Y+4, r1	; 0x04
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++ )
    1ab2:	1d 82       	std	Y+5, r1	; 0x05
    1ab4:	42 c0       	rjmp	.+132    	; 0x1b3a <ReadSequence+0xa6>
	{
		DIO_enuReadPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8InputPins[u8CntrLoc] , &u8ReadsLoc);
    1ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ab8:	48 2f       	mov	r20, r24
    1aba:	50 e0       	ldi	r21, 0x00	; 0
    1abc:	8d 81       	ldd	r24, Y+5	; 0x05
    1abe:	68 2f       	mov	r22, r24
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ca 01       	movw	r24, r20
    1ac4:	9c 01       	movw	r18, r24
    1ac6:	22 0f       	add	r18, r18
    1ac8:	33 1f       	adc	r19, r19
    1aca:	24 0f       	add	r18, r20
    1acc:	35 1f       	adc	r19, r21
    1ace:	c9 01       	movw	r24, r18
    1ad0:	88 0f       	add	r24, r24
    1ad2:	99 1f       	adc	r25, r25
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	82 1b       	sub	r24, r18
    1ade:	93 0b       	sbc	r25, r19
    1ae0:	86 0f       	add	r24, r22
    1ae2:	97 1f       	adc	r25, r23
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e5 50       	subi	r30, 0x05	; 5
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	9e 01       	movw	r18, r28
    1aee:	2a 5f       	subi	r18, 0xFA	; 250
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	b9 01       	movw	r22, r18
    1af4:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
		u32ReturnLoc|= u8ReadsLoc<< u8CntrLoc;
    1af8:	8e 81       	ldd	r24, Y+6	; 0x06
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	8d 81       	ldd	r24, Y+5	; 0x05
    1b00:	88 2f       	mov	r24, r24
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	a9 01       	movw	r20, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <ReadSequence+0x78>
    1b08:	44 0f       	add	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	8a 95       	dec	r24
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <ReadSequence+0x74>
    1b10:	ca 01       	movw	r24, r20
    1b12:	9c 01       	movw	r18, r24
    1b14:	44 27       	eor	r20, r20
    1b16:	37 fd       	sbrc	r19, 7
    1b18:	40 95       	com	r20
    1b1a:	54 2f       	mov	r21, r20
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	ab 81       	ldd	r26, Y+3	; 0x03
    1b22:	bc 81       	ldd	r27, Y+4	; 0x04
    1b24:	82 2b       	or	r24, r18
    1b26:	93 2b       	or	r25, r19
    1b28:	a4 2b       	or	r26, r20
    1b2a:	b5 2b       	or	r27, r21
    1b2c:	89 83       	std	Y+1, r24	; 0x01
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	ab 83       	std	Y+3, r26	; 0x03
    1b32:	bc 83       	std	Y+4, r27	; 0x04
static uint32 ReadSequence(uint8 u8KeyNumCpy )
{
	uint8 u8CntrLoc  ;
	uint8 u8ReadsLoc ;
	uint32 u32ReturnLoc =0 ;
	for (u8CntrLoc = 0 ;u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++ )
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b3c:	48 2f       	mov	r20, r24
    1b3e:	50 e0       	ldi	r21, 0x00	; 0
    1b40:	ca 01       	movw	r24, r20
    1b42:	9c 01       	movw	r18, r24
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	24 0f       	add	r18, r20
    1b4a:	35 1f       	adc	r19, r21
    1b4c:	c9 01       	movw	r24, r18
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	88 0f       	add	r24, r24
    1b58:	99 1f       	adc	r25, r25
    1b5a:	82 1b       	sub	r24, r18
    1b5c:	93 0b       	sbc	r25, r19
    1b5e:	fc 01       	movw	r30, r24
    1b60:	e2 5f       	subi	r30, 0xF2	; 242
    1b62:	fe 4f       	sbci	r31, 0xFE	; 254
    1b64:	90 81       	ld	r25, Z
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	89 17       	cp	r24, r25
    1b6a:	08 f4       	brcc	.+2      	; 0x1b6e <ReadSequence+0xda>
    1b6c:	a4 cf       	rjmp	.-184    	; 0x1ab6 <ReadSequence+0x22>
	{
		DIO_enuReadPinValue(KEYPAD_astrCfg[u8KeyNumCpy].au8InputPins[u8CntrLoc] , &u8ReadsLoc);
		u32ReturnLoc|= u8ReadsLoc<< u8CntrLoc;
	}
	return u32ReturnLoc;
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	ab 81       	ldd	r26, Y+3	; 0x03
    1b74:	bc 81       	ldd	r27, Y+4	; 0x04
}
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	27 96       	adiw	r28, 0x07	; 7
    1b7c:	0f b6       	in	r0, 0x3f	; 63
    1b7e:	f8 94       	cli
    1b80:	de bf       	out	0x3e, r29	; 62
    1b82:	0f be       	out	0x3f, r0	; 63
    1b84:	cd bf       	out	0x3d, r28	; 61
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	08 95       	ret

00001b8c <RepValue>:


static uint8 RepValue(uint8 u8KeyNumCpy ,  uint32 u32ValueCpy , uint8 u8SeqCpy)
{
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
    1b94:	28 97       	sbiw	r28, 0x08	; 8
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	f8 94       	cli
    1b9a:	de bf       	out	0x3e, r29	; 62
    1b9c:	0f be       	out	0x3f, r0	; 63
    1b9e:	cd bf       	out	0x3d, r28	; 61
    1ba0:	8b 83       	std	Y+3, r24	; 0x03
    1ba2:	4c 83       	std	Y+4, r20	; 0x04
    1ba4:	5d 83       	std	Y+5, r21	; 0x05
    1ba6:	6e 83       	std	Y+6, r22	; 0x06
    1ba8:	7f 83       	std	Y+7, r23	; 0x07
    1baa:	28 87       	std	Y+8, r18	; 0x08
	uint8 u8CntrLoc ;
	uint8 u8ReturnLoc = 0xFF ;
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	89 83       	std	Y+1, r24	; 0x01
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++)
    1bb0:	1a 82       	std	Y+2, r1	; 0x02
    1bb2:	42 c0       	rjmp	.+132    	; 0x1c38 <RepValue+0xac>
	{
		if (GET_BIT(u32ValueCpy,u8CntrLoc) == 0)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbc:	9d 81       	ldd	r25, Y+5	; 0x05
    1bbe:	ae 81       	ldd	r26, Y+6	; 0x06
    1bc0:	bf 81       	ldd	r27, Y+7	; 0x07
    1bc2:	02 2e       	mov	r0, r18
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <RepValue+0x42>
    1bc6:	b6 95       	lsr	r27
    1bc8:	a7 95       	ror	r26
    1bca:	97 95       	ror	r25
    1bcc:	87 95       	ror	r24
    1bce:	0a 94       	dec	r0
    1bd0:	d2 f7       	brpl	.-12     	; 0x1bc6 <RepValue+0x3a>
    1bd2:	81 70       	andi	r24, 0x01	; 1
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	a0 70       	andi	r26, 0x00	; 0
    1bd8:	b0 70       	andi	r27, 0x00	; 0
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	a1 05       	cpc	r26, r1
    1bde:	b1 05       	cpc	r27, r1
    1be0:	41 f5       	brne	.+80     	; 0x1c32 <RepValue+0xa6>
		{
			u8ReturnLoc = KEYPAD_astrCfg[u8KeyNumCpy].KEYPAD_au8Rep[u8CntrLoc][u8SeqCpy];
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	68 2f       	mov	r22, r24
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	88 85       	ldd	r24, Y+8	; 0x08
    1bf0:	e8 2f       	mov	r30, r24
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	c9 01       	movw	r24, r18
    1bf6:	ac 01       	movw	r20, r24
    1bf8:	44 0f       	add	r20, r20
    1bfa:	55 1f       	adc	r21, r21
    1bfc:	42 0f       	add	r20, r18
    1bfe:	53 1f       	adc	r21, r19
    1c00:	cb 01       	movw	r24, r22
    1c02:	9c 01       	movw	r18, r24
    1c04:	22 0f       	add	r18, r18
    1c06:	33 1f       	adc	r19, r19
    1c08:	26 0f       	add	r18, r22
    1c0a:	37 1f       	adc	r19, r23
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	88 0f       	add	r24, r24
    1c18:	99 1f       	adc	r25, r25
    1c1a:	82 1b       	sub	r24, r18
    1c1c:	93 0b       	sbc	r25, r19
    1c1e:	84 0f       	add	r24, r20
    1c20:	95 1f       	adc	r25, r21
    1c22:	8e 0f       	add	r24, r30
    1c24:	9f 1f       	adc	r25, r31
    1c26:	fc 01       	movw	r30, r24
    1c28:	ee 5f       	subi	r30, 0xFE	; 254
    1c2a:	fe 4f       	sbci	r31, 0xFE	; 254
    1c2c:	80 81       	ld	r24, Z
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	1d c0       	rjmp	.+58     	; 0x1c6c <RepValue+0xe0>

static uint8 RepValue(uint8 u8KeyNumCpy ,  uint32 u32ValueCpy , uint8 u8SeqCpy)
{
	uint8 u8CntrLoc ;
	uint8 u8ReturnLoc = 0xFF ;
	for (u8CntrLoc = 0 ; u8CntrLoc < KEYPAD_astrCfg[u8KeyNumCpy].u8InputNum ; u8CntrLoc++)
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	8f 5f       	subi	r24, 0xFF	; 255
    1c36:	8a 83       	std	Y+2, r24	; 0x02
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	ca 01       	movw	r24, r20
    1c40:	9c 01       	movw	r18, r24
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	24 0f       	add	r18, r20
    1c48:	35 1f       	adc	r19, r21
    1c4a:	c9 01       	movw	r24, r18
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	88 0f       	add	r24, r24
    1c56:	99 1f       	adc	r25, r25
    1c58:	82 1b       	sub	r24, r18
    1c5a:	93 0b       	sbc	r25, r19
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	e2 5f       	subi	r30, 0xF2	; 242
    1c60:	fe 4f       	sbci	r31, 0xFE	; 254
    1c62:	90 81       	ld	r25, Z
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	89 17       	cp	r24, r25
    1c68:	08 f4       	brcc	.+2      	; 0x1c6c <RepValue+0xe0>
    1c6a:	a4 cf       	rjmp	.-184    	; 0x1bb4 <RepValue+0x28>
		{
			u8ReturnLoc = KEYPAD_astrCfg[u8KeyNumCpy].KEYPAD_au8Rep[u8CntrLoc][u8SeqCpy];
			break ;
		}
	}
	return u8ReturnLoc ;
    1c6c:	89 81       	ldd	r24, Y+1	; 0x01

	
	
}
    1c6e:	28 96       	adiw	r28, 0x08	; 8
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <LCD_vidInit>:
#include "LCD_cfg.h"
#include "LCD_priv.h"

static uint8 InitFinshed=0;
void LCD_vidInit(void)
{
    1c80:	0f 93       	push	r16
    1c82:	1f 93       	push	r17
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	ce 58       	subi	r28, 0x8E	; 142
    1c8e:	d0 40       	sbci	r29, 0x00	; 0
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	de bf       	out	0x3e, r29	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	cd bf       	out	0x3d, r28	; 61
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc =0;
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	e3 57       	subi	r30, 0x73	; 115
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	10 82       	st	Z, r1
	for(u8CntrLoc = 0 ;u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++ )
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e2 57       	subi	r30, 0x72	; 114
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	10 82       	st	Z, r1
    1caa:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <LCD_vidInit+0x10c8>
	{
		if (LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e2 57       	subi	r30, 0x72	; 114
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	80 81       	ld	r24, Z
    1cb6:	28 2f       	mov	r18, r24
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	c9 01       	movw	r24, r18
    1cbc:	88 0f       	add	r24, r24
    1cbe:	99 1f       	adc	r25, r25
    1cc0:	82 0f       	add	r24, r18
    1cc2:	93 1f       	adc	r25, r19
    1cc4:	88 0f       	add	r24, r24
    1cc6:	99 1f       	adc	r25, r25
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	fc 01       	movw	r30, r24
    1cce:	e5 5e       	subi	r30, 0xE5	; 229
    1cd0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cd2:	80 81       	ld	r24, Z
    1cd4:	81 70       	andi	r24, 0x01	; 1
    1cd6:	81 30       	cpi	r24, 0x01	; 1
    1cd8:	09 f0       	breq	.+2      	; 0x1cdc <LCD_vidInit+0x5c>
    1cda:	75 c4       	rjmp	.+2282   	; 0x25c6 <LCD_vidInit+0x946>
    1cdc:	fe 01       	movw	r30, r28
    1cde:	e7 57       	subi	r30, 0x77	; 119
    1ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	a0 ef       	ldi	r26, 0xF0	; 240
    1ce8:	b1 e4       	ldi	r27, 0x41	; 65
    1cea:	80 83       	st	Z, r24
    1cec:	91 83       	std	Z+1, r25	; 0x01
    1cee:	a2 83       	std	Z+2, r26	; 0x02
    1cf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf2:	8e 01       	movw	r16, r28
    1cf4:	0b 57       	subi	r16, 0x7B	; 123
    1cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf8:	fe 01       	movw	r30, r28
    1cfa:	e7 57       	subi	r30, 0x77	; 119
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfe:	60 81       	ld	r22, Z
    1d00:	71 81       	ldd	r23, Z+1	; 0x01
    1d02:	82 81       	ldd	r24, Z+2	; 0x02
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	f8 01       	movw	r30, r16
    1d18:	80 83       	st	Z, r24
    1d1a:	91 83       	std	Z+1, r25	; 0x01
    1d1c:	a2 83       	std	Z+2, r26	; 0x02
    1d1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d20:	fe 01       	movw	r30, r28
    1d22:	eb 57       	subi	r30, 0x7B	; 123
    1d24:	ff 4f       	sbci	r31, 0xFF	; 255
    1d26:	60 81       	ld	r22, Z
    1d28:	71 81       	ldd	r23, Z+1	; 0x01
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	93 81       	ldd	r25, Z+3	; 0x03
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	40 e8       	ldi	r20, 0x80	; 128
    1d34:	5f e3       	ldi	r21, 0x3F	; 63
    1d36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d3a:	88 23       	and	r24, r24
    1d3c:	44 f4       	brge	.+16     	; 0x1d4e <LCD_vidInit+0xce>
		__ticks = 1;
    1d3e:	fe 01       	movw	r30, r28
    1d40:	ed 57       	subi	r30, 0x7D	; 125
    1d42:	ff 4f       	sbci	r31, 0xFF	; 255
    1d44:	81 e0       	ldi	r24, 0x01	; 1
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	91 83       	std	Z+1, r25	; 0x01
    1d4a:	80 83       	st	Z, r24
    1d4c:	64 c0       	rjmp	.+200    	; 0x1e16 <LCD_vidInit+0x196>
	else if (__tmp > 65535)
    1d4e:	fe 01       	movw	r30, r28
    1d50:	eb 57       	subi	r30, 0x7B	; 123
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <LCD_vidInit+0xee>
    1d6c:	43 c0       	rjmp	.+134    	; 0x1df4 <LCD_vidInit+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6e:	fe 01       	movw	r30, r28
    1d70:	e7 57       	subi	r30, 0x77	; 119
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	60 81       	ld	r22, Z
    1d76:	71 81       	ldd	r23, Z+1	; 0x01
    1d78:	82 81       	ldd	r24, Z+2	; 0x02
    1d7a:	93 81       	ldd	r25, Z+3	; 0x03
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	0d 57       	subi	r16, 0x7D	; 125
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	f8 01       	movw	r30, r16
    1da0:	91 83       	std	Z+1, r25	; 0x01
    1da2:	80 83       	st	Z, r24
    1da4:	1f c0       	rjmp	.+62     	; 0x1de4 <LCD_vidInit+0x164>
    1da6:	fe 01       	movw	r30, r28
    1da8:	ef 57       	subi	r30, 0x7F	; 127
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	88 ec       	ldi	r24, 0xC8	; 200
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	91 83       	std	Z+1, r25	; 0x01
    1db2:	80 83       	st	Z, r24
    1db4:	fe 01       	movw	r30, r28
    1db6:	ef 57       	subi	r30, 0x7F	; 127
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 81       	ld	r24, Z
    1dbc:	91 81       	ldd	r25, Z+1	; 0x01
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	f1 f7       	brne	.-4      	; 0x1dbe <LCD_vidInit+0x13e>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	ef 57       	subi	r30, 0x7F	; 127
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dcc:	de 01       	movw	r26, r28
    1dce:	ad 57       	subi	r26, 0x7D	; 125
    1dd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 57       	subi	r30, 0x7D	; 125
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	80 81       	ld	r24, Z
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	11 96       	adiw	r26, 0x01	; 1
    1de0:	9c 93       	st	X, r25
    1de2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de4:	fe 01       	movw	r30, r28
    1de6:	ed 57       	subi	r30, 0x7D	; 125
    1de8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dea:	80 81       	ld	r24, Z
    1dec:	91 81       	ldd	r25, Z+1	; 0x01
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	d1 f6       	brne	.-76     	; 0x1da6 <LCD_vidInit+0x126>
    1df2:	27 c0       	rjmp	.+78     	; 0x1e42 <LCD_vidInit+0x1c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df4:	8e 01       	movw	r16, r28
    1df6:	0d 57       	subi	r16, 0x7D	; 125
    1df8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dfa:	fe 01       	movw	r30, r28
    1dfc:	eb 57       	subi	r30, 0x7B	; 123
    1dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1e00:	60 81       	ld	r22, Z
    1e02:	71 81       	ldd	r23, Z+1	; 0x01
    1e04:	82 81       	ldd	r24, Z+2	; 0x02
    1e06:	93 81       	ldd	r25, Z+3	; 0x03
    1e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0c:	dc 01       	movw	r26, r24
    1e0e:	cb 01       	movw	r24, r22
    1e10:	f8 01       	movw	r30, r16
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
    1e16:	de 01       	movw	r26, r28
    1e18:	a1 58       	subi	r26, 0x81	; 129
    1e1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1c:	fe 01       	movw	r30, r28
    1e1e:	ed 57       	subi	r30, 0x7D	; 125
    1e20:	ff 4f       	sbci	r31, 0xFF	; 255
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	8d 93       	st	X+, r24
    1e28:	9c 93       	st	X, r25
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	e1 58       	subi	r30, 0x81	; 129
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	91 81       	ldd	r25, Z+1	; 0x01
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	f1 f7       	brne	.-4      	; 0x1e34 <LCD_vidInit+0x1b4>
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e1 58       	subi	r30, 0x81	; 129
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	91 83       	std	Z+1, r25	; 0x01
    1e40:	80 83       	st	Z, r24
		{

			_delay_ms(30);
			/*0b0011NF00*/
			u8CmdLoc = 0b00110000 |
    1e42:	fe 01       	movw	r30, r28
    1e44:	e2 57       	subi	r30, 0x72	; 114
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	80 81       	ld	r24, Z
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	c9 01       	movw	r24, r18
    1e50:	88 0f       	add	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	82 0f       	add	r24, r18
    1e56:	93 1f       	adc	r25, r19
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	88 0f       	add	r24, r24
    1e5e:	99 1f       	adc	r25, r25
    1e60:	fc 01       	movw	r30, r24
    1e62:	e5 5e       	subi	r30, 0xE5	; 229
    1e64:	fe 4f       	sbci	r31, 0xFE	; 254
    1e66:	80 81       	ld	r24, Z
    1e68:	86 95       	lsr	r24
    1e6a:	81 70       	andi	r24, 0x01	; 1
    1e6c:	88 2f       	mov	r24, r24
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	88 0f       	add	r24, r24
    1e7a:	99 1f       	adc	r25, r25
    1e7c:	48 2f       	mov	r20, r24
    1e7e:	40 63       	ori	r20, 0x30	; 48
    1e80:	fe 01       	movw	r30, r28
    1e82:	e2 57       	subi	r30, 0x72	; 114
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	80 81       	ld	r24, Z
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	c9 01       	movw	r24, r18
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	82 0f       	add	r24, r18
    1e94:	93 1f       	adc	r25, r19
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	fc 01       	movw	r30, r24
    1ea0:	e5 5e       	subi	r30, 0xE5	; 229
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	80 81       	ld	r24, Z
    1ea6:	86 95       	lsr	r24
    1ea8:	86 95       	lsr	r24
    1eaa:	81 70       	andi	r24, 0x01	; 1
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	84 2b       	or	r24, r20
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e3 57       	subi	r30, 0x73	; 115
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8LineNum<<3|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Font<<2;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e2 57       	subi	r30, 0x72	; 114
    1ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec8:	de 01       	movw	r26, r28
    1eca:	a3 57       	subi	r26, 0x73	; 115
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	80 81       	ld	r24, Z
    1ed0:	6c 91       	ld	r22, X
    1ed2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e5 58       	subi	r30, 0x85	; 133
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e8       	ldi	r26, 0x80	; 128
    1ee2:	bf e3       	ldi	r27, 0x3F	; 63
    1ee4:	80 83       	st	Z, r24
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	a2 83       	std	Z+2, r26	; 0x02
    1eea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eec:	8e 01       	movw	r16, r28
    1eee:	09 58       	subi	r16, 0x89	; 137
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	fe 01       	movw	r30, r28
    1ef4:	e5 58       	subi	r30, 0x85	; 133
    1ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef8:	60 81       	ld	r22, Z
    1efa:	71 81       	ldd	r23, Z+1	; 0x01
    1efc:	82 81       	ldd	r24, Z+2	; 0x02
    1efe:	93 81       	ldd	r25, Z+3	; 0x03
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a ef       	ldi	r20, 0xFA	; 250
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	f8 01       	movw	r30, r16
    1f12:	80 83       	st	Z, r24
    1f14:	91 83       	std	Z+1, r25	; 0x01
    1f16:	a2 83       	std	Z+2, r26	; 0x02
    1f18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e9 58       	subi	r30, 0x89	; 137
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	60 81       	ld	r22, Z
    1f22:	71 81       	ldd	r23, Z+1	; 0x01
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	44 f4       	brge	.+16     	; 0x1f48 <LCD_vidInit+0x2c8>
		__ticks = 1;
    1f38:	fe 01       	movw	r30, r28
    1f3a:	eb 58       	subi	r30, 0x8B	; 139
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	91 83       	std	Z+1, r25	; 0x01
    1f44:	80 83       	st	Z, r24
    1f46:	64 c0       	rjmp	.+200    	; 0x2010 <LCD_vidInit+0x390>
	else if (__tmp > 65535)
    1f48:	fe 01       	movw	r30, r28
    1f4a:	e9 58       	subi	r30, 0x89	; 137
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	3f ef       	ldi	r19, 0xFF	; 255
    1f5a:	4f e7       	ldi	r20, 0x7F	; 127
    1f5c:	57 e4       	ldi	r21, 0x47	; 71
    1f5e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f62:	18 16       	cp	r1, r24
    1f64:	0c f0       	brlt	.+2      	; 0x1f68 <LCD_vidInit+0x2e8>
    1f66:	43 c0       	rjmp	.+134    	; 0x1fee <LCD_vidInit+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e5 58       	subi	r30, 0x85	; 133
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	60 81       	ld	r22, Z
    1f70:	71 81       	ldd	r23, Z+1	; 0x01
    1f72:	82 81       	ldd	r24, Z+2	; 0x02
    1f74:	93 81       	ldd	r25, Z+3	; 0x03
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e2       	ldi	r20, 0x20	; 32
    1f7c:	51 e4       	ldi	r21, 0x41	; 65
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	8e 01       	movw	r16, r28
    1f88:	0b 58       	subi	r16, 0x8B	; 139
    1f8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	cd 01       	movw	r24, r26
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	1f c0       	rjmp	.+62     	; 0x1fde <LCD_vidInit+0x35e>
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	ed 58       	subi	r30, 0x8D	; 141
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	88 ec       	ldi	r24, 0xC8	; 200
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	80 83       	st	Z, r24
    1fae:	fe 01       	movw	r30, r28
    1fb0:	ed 58       	subi	r30, 0x8D	; 141
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	91 81       	ldd	r25, Z+1	; 0x01
    1fb8:	01 97       	sbiw	r24, 0x01	; 1
    1fba:	f1 f7       	brne	.-4      	; 0x1fb8 <LCD_vidInit+0x338>
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ed 58       	subi	r30, 0x8D	; 141
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	91 83       	std	Z+1, r25	; 0x01
    1fc4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc6:	de 01       	movw	r26, r28
    1fc8:	ab 58       	subi	r26, 0x8B	; 139
    1fca:	bf 4f       	sbci	r27, 0xFF	; 255
    1fcc:	fe 01       	movw	r30, r28
    1fce:	eb 58       	subi	r30, 0x8B	; 139
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	11 96       	adiw	r26, 0x01	; 1
    1fda:	9c 93       	st	X, r25
    1fdc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fde:	fe 01       	movw	r30, r28
    1fe0:	eb 58       	subi	r30, 0x8B	; 139
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	80 81       	ld	r24, Z
    1fe6:	91 81       	ldd	r25, Z+1	; 0x01
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	d1 f6       	brne	.-76     	; 0x1fa0 <LCD_vidInit+0x320>
    1fec:	27 c0       	rjmp	.+78     	; 0x203c <LCD_vidInit+0x3bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	8e 01       	movw	r16, r28
    1ff0:	0b 58       	subi	r16, 0x8B	; 139
    1ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff4:	fe 01       	movw	r30, r28
    1ff6:	e9 58       	subi	r30, 0x89	; 137
    1ff8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	f8 01       	movw	r30, r16
    200c:	91 83       	std	Z+1, r25	; 0x01
    200e:	80 83       	st	Z, r24
    2010:	de 01       	movw	r26, r28
    2012:	af 58       	subi	r26, 0x8F	; 143
    2014:	bf 4f       	sbci	r27, 0xFF	; 255
    2016:	fe 01       	movw	r30, r28
    2018:	eb 58       	subi	r30, 0x8B	; 139
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
    201c:	80 81       	ld	r24, Z
    201e:	91 81       	ldd	r25, Z+1	; 0x01
    2020:	8d 93       	st	X+, r24
    2022:	9c 93       	st	X, r25
    2024:	fe 01       	movw	r30, r28
    2026:	ef 58       	subi	r30, 0x8F	; 143
    2028:	ff 4f       	sbci	r31, 0xFF	; 255
    202a:	80 81       	ld	r24, Z
    202c:	91 81       	ldd	r25, Z+1	; 0x01
    202e:	01 97       	sbiw	r24, 0x01	; 1
    2030:	f1 f7       	brne	.-4      	; 0x202e <LCD_vidInit+0x3ae>
    2032:	fe 01       	movw	r30, r28
    2034:	ef 58       	subi	r30, 0x8F	; 143
    2036:	ff 4f       	sbci	r31, 0xFF	; 255
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
			_delay_ms(1);

			/*0b00001DCB*/
			u8CmdLoc = 0b00001000|
    203c:	fe 01       	movw	r30, r28
    203e:	e2 57       	subi	r30, 0x72	; 114
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	80 81       	ld	r24, Z
    2044:	28 2f       	mov	r18, r24
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	c9 01       	movw	r24, r18
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	82 0f       	add	r24, r18
    2050:	93 1f       	adc	r25, r19
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	88 0f       	add	r24, r24
    2058:	99 1f       	adc	r25, r25
    205a:	fc 01       	movw	r30, r24
    205c:	e5 5e       	subi	r30, 0xE5	; 229
    205e:	fe 4f       	sbci	r31, 0xFE	; 254
    2060:	80 81       	ld	r24, Z
    2062:	86 95       	lsr	r24
    2064:	86 95       	lsr	r24
    2066:	86 95       	lsr	r24
    2068:	81 70       	andi	r24, 0x01	; 1
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	48 2f       	mov	r20, r24
    2078:	48 60       	ori	r20, 0x08	; 8
    207a:	fe 01       	movw	r30, r28
    207c:	e2 57       	subi	r30, 0x72	; 114
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	28 2f       	mov	r18, r24
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	c9 01       	movw	r24, r18
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	82 0f       	add	r24, r18
    208e:	93 1f       	adc	r25, r19
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	fc 01       	movw	r30, r24
    209a:	e5 5e       	subi	r30, 0xE5	; 229
    209c:	fe 4f       	sbci	r31, 0xFE	; 254
    209e:	80 81       	ld	r24, Z
    20a0:	82 95       	swap	r24
    20a2:	8f 70       	andi	r24, 0x0F	; 15
    20a4:	81 70       	andi	r24, 0x01	; 1
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	88 0f       	add	r24, r24
    20ac:	99 1f       	adc	r25, r25
    20ae:	48 2b       	or	r20, r24
    20b0:	fe 01       	movw	r30, r28
    20b2:	e2 57       	subi	r30, 0x72	; 114
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	80 81       	ld	r24, Z
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	c9 01       	movw	r24, r18
    20be:	88 0f       	add	r24, r24
    20c0:	99 1f       	adc	r25, r25
    20c2:	82 0f       	add	r24, r18
    20c4:	93 1f       	adc	r25, r19
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	fc 01       	movw	r30, r24
    20d0:	e5 5e       	subi	r30, 0xE5	; 229
    20d2:	fe 4f       	sbci	r31, 0xFE	; 254
    20d4:	80 81       	ld	r24, Z
    20d6:	82 95       	swap	r24
    20d8:	86 95       	lsr	r24
    20da:	87 70       	andi	r24, 0x07	; 7
    20dc:	81 70       	andi	r24, 0x01	; 1
    20de:	84 2b       	or	r24, r20
    20e0:	fe 01       	movw	r30, r28
    20e2:	e3 57       	subi	r30, 0x73	; 115
    20e4:	ff 4f       	sbci	r31, 0xFF	; 255
    20e6:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8DisplayStatus<< 2|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8CursorStatus<<1|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8BlinkStatus<<0;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    20e8:	fe 01       	movw	r30, r28
    20ea:	e2 57       	subi	r30, 0x72	; 114
    20ec:	ff 4f       	sbci	r31, 0xFF	; 255
    20ee:	de 01       	movw	r26, r28
    20f0:	a3 57       	subi	r26, 0x73	; 115
    20f2:	bf 4f       	sbci	r27, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	6c 91       	ld	r22, X
    20f8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    20fc:	fe 01       	movw	r30, r28
    20fe:	e3 59       	subi	r30, 0x93	; 147
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	07 59       	subi	r16, 0x97	; 151
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	e3 59       	subi	r30, 0x93	; 147
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a ef       	ldi	r20, 0xFA	; 250
    212c:	54 e4       	ldi	r21, 0x44	; 68
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	e7 59       	subi	r30, 0x97	; 151
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	60 81       	ld	r22, Z
    2148:	71 81       	ldd	r23, Z+1	; 0x01
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	93 81       	ldd	r25, Z+3	; 0x03
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	44 f4       	brge	.+16     	; 0x216e <LCD_vidInit+0x4ee>
		__ticks = 1;
    215e:	fe 01       	movw	r30, r28
    2160:	e9 59       	subi	r30, 0x99	; 153
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	91 83       	std	Z+1, r25	; 0x01
    216a:	80 83       	st	Z, r24
    216c:	64 c0       	rjmp	.+200    	; 0x2236 <LCD_vidInit+0x5b6>
	else if (__tmp > 65535)
    216e:	fe 01       	movw	r30, r28
    2170:	e7 59       	subi	r30, 0x97	; 151
    2172:	ff 4f       	sbci	r31, 0xFF	; 255
    2174:	60 81       	ld	r22, Z
    2176:	71 81       	ldd	r23, Z+1	; 0x01
    2178:	82 81       	ldd	r24, Z+2	; 0x02
    217a:	93 81       	ldd	r25, Z+3	; 0x03
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <LCD_vidInit+0x50e>
    218c:	43 c0       	rjmp	.+134    	; 0x2214 <LCD_vidInit+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218e:	fe 01       	movw	r30, r28
    2190:	e3 59       	subi	r30, 0x93	; 147
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	8e 01       	movw	r16, r28
    21ae:	09 59       	subi	r16, 0x99	; 153
    21b0:	1f 4f       	sbci	r17, 0xFF	; 255
    21b2:	bc 01       	movw	r22, r24
    21b4:	cd 01       	movw	r24, r26
    21b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	f8 01       	movw	r30, r16
    21c0:	91 83       	std	Z+1, r25	; 0x01
    21c2:	80 83       	st	Z, r24
    21c4:	1f c0       	rjmp	.+62     	; 0x2204 <LCD_vidInit+0x584>
    21c6:	fe 01       	movw	r30, r28
    21c8:	eb 59       	subi	r30, 0x9B	; 155
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	88 ec       	ldi	r24, 0xC8	; 200
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	80 83       	st	Z, r24
    21d4:	fe 01       	movw	r30, r28
    21d6:	eb 59       	subi	r30, 0x9B	; 155
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_vidInit+0x55e>
    21e2:	fe 01       	movw	r30, r28
    21e4:	eb 59       	subi	r30, 0x9B	; 155
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ec:	de 01       	movw	r26, r28
    21ee:	a9 59       	subi	r26, 0x99	; 153
    21f0:	bf 4f       	sbci	r27, 0xFF	; 255
    21f2:	fe 01       	movw	r30, r28
    21f4:	e9 59       	subi	r30, 0x99	; 153
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	80 81       	ld	r24, Z
    21fa:	91 81       	ldd	r25, Z+1	; 0x01
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	11 96       	adiw	r26, 0x01	; 1
    2200:	9c 93       	st	X, r25
    2202:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2204:	fe 01       	movw	r30, r28
    2206:	e9 59       	subi	r30, 0x99	; 153
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	91 81       	ldd	r25, Z+1	; 0x01
    220e:	00 97       	sbiw	r24, 0x00	; 0
    2210:	d1 f6       	brne	.-76     	; 0x21c6 <LCD_vidInit+0x546>
    2212:	27 c0       	rjmp	.+78     	; 0x2262 <LCD_vidInit+0x5e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2214:	8e 01       	movw	r16, r28
    2216:	09 59       	subi	r16, 0x99	; 153
    2218:	1f 4f       	sbci	r17, 0xFF	; 255
    221a:	fe 01       	movw	r30, r28
    221c:	e7 59       	subi	r30, 0x97	; 151
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	60 81       	ld	r22, Z
    2222:	71 81       	ldd	r23, Z+1	; 0x01
    2224:	82 81       	ldd	r24, Z+2	; 0x02
    2226:	93 81       	ldd	r25, Z+3	; 0x03
    2228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	f8 01       	movw	r30, r16
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
    2236:	de 01       	movw	r26, r28
    2238:	ad 59       	subi	r26, 0x9D	; 157
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e9 59       	subi	r30, 0x99	; 153
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	8d 93       	st	X+, r24
    2248:	9c 93       	st	X, r25
    224a:	fe 01       	movw	r30, r28
    224c:	ed 59       	subi	r30, 0x9D	; 157
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	80 81       	ld	r24, Z
    2252:	91 81       	ldd	r25, Z+1	; 0x01
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_vidInit+0x5d4>
    2258:	fe 01       	movw	r30, r28
    225a:	ed 59       	subi	r30, 0x9D	; 157
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
			_delay_ms(1);

			LCD_vidSendCmd(u8CntrLoc , LCD_CLR);
    2262:	fe 01       	movw	r30, r28
    2264:	e2 57       	subi	r30, 0x72	; 114
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	80 81       	ld	r24, Z
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    2270:	fe 01       	movw	r30, r28
    2272:	e1 5a       	subi	r30, 0xA1	; 161
    2274:	ff 4f       	sbci	r31, 0xFF	; 255
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	90 e0       	ldi	r25, 0x00	; 0
    227a:	a0 e0       	ldi	r26, 0x00	; 0
    227c:	b0 e4       	ldi	r27, 0x40	; 64
    227e:	80 83       	st	Z, r24
    2280:	91 83       	std	Z+1, r25	; 0x01
    2282:	a2 83       	std	Z+2, r26	; 0x02
    2284:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2286:	8e 01       	movw	r16, r28
    2288:	05 5a       	subi	r16, 0xA5	; 165
    228a:	1f 4f       	sbci	r17, 0xFF	; 255
    228c:	fe 01       	movw	r30, r28
    228e:	e1 5a       	subi	r30, 0xA1	; 161
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	f8 01       	movw	r30, r16
    22ac:	80 83       	st	Z, r24
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	a2 83       	std	Z+2, r26	; 0x02
    22b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b4:	fe 01       	movw	r30, r28
    22b6:	e5 5a       	subi	r30, 0xA5	; 165
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	82 81       	ldd	r24, Z+2	; 0x02
    22c0:	93 81       	ldd	r25, Z+3	; 0x03
    22c2:	20 e0       	ldi	r18, 0x00	; 0
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	40 e8       	ldi	r20, 0x80	; 128
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22ce:	88 23       	and	r24, r24
    22d0:	44 f4       	brge	.+16     	; 0x22e2 <LCD_vidInit+0x662>
		__ticks = 1;
    22d2:	fe 01       	movw	r30, r28
    22d4:	e7 5a       	subi	r30, 0xA7	; 167
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	91 83       	std	Z+1, r25	; 0x01
    22de:	80 83       	st	Z, r24
    22e0:	64 c0       	rjmp	.+200    	; 0x23aa <LCD_vidInit+0x72a>
	else if (__tmp > 65535)
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5a       	subi	r30, 0xA5	; 165
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	60 81       	ld	r22, Z
    22ea:	71 81       	ldd	r23, Z+1	; 0x01
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	93 81       	ldd	r25, Z+3	; 0x03
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	0c f0       	brlt	.+2      	; 0x2302 <LCD_vidInit+0x682>
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <LCD_vidInit+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	fe 01       	movw	r30, r28
    2304:	e1 5a       	subi	r30, 0xA1	; 161
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	60 81       	ld	r22, Z
    230a:	71 81       	ldd	r23, Z+1	; 0x01
    230c:	82 81       	ldd	r24, Z+2	; 0x02
    230e:	93 81       	ldd	r25, Z+3	; 0x03
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e2       	ldi	r20, 0x20	; 32
    2316:	51 e4       	ldi	r21, 0x41	; 65
    2318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	8e 01       	movw	r16, r28
    2322:	07 5a       	subi	r16, 0xA7	; 167
    2324:	1f 4f       	sbci	r17, 0xFF	; 255
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	80 83       	st	Z, r24
    2338:	1f c0       	rjmp	.+62     	; 0x2378 <LCD_vidInit+0x6f8>
    233a:	fe 01       	movw	r30, r28
    233c:	e9 5a       	subi	r30, 0xA9	; 169
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	88 ec       	ldi	r24, 0xC8	; 200
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	91 83       	std	Z+1, r25	; 0x01
    2346:	80 83       	st	Z, r24
    2348:	fe 01       	movw	r30, r28
    234a:	e9 5a       	subi	r30, 0xA9	; 169
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_vidInit+0x6d2>
    2356:	fe 01       	movw	r30, r28
    2358:	e9 5a       	subi	r30, 0xA9	; 169
    235a:	ff 4f       	sbci	r31, 0xFF	; 255
    235c:	91 83       	std	Z+1, r25	; 0x01
    235e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	de 01       	movw	r26, r28
    2362:	a7 5a       	subi	r26, 0xA7	; 167
    2364:	bf 4f       	sbci	r27, 0xFF	; 255
    2366:	fe 01       	movw	r30, r28
    2368:	e7 5a       	subi	r30, 0xA7	; 167
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	11 96       	adiw	r26, 0x01	; 1
    2374:	9c 93       	st	X, r25
    2376:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	fe 01       	movw	r30, r28
    237a:	e7 5a       	subi	r30, 0xA7	; 167
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	d1 f6       	brne	.-76     	; 0x233a <LCD_vidInit+0x6ba>
    2386:	27 c0       	rjmp	.+78     	; 0x23d6 <LCD_vidInit+0x756>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	8e 01       	movw	r16, r28
    238a:	07 5a       	subi	r16, 0xA7	; 167
    238c:	1f 4f       	sbci	r17, 0xFF	; 255
    238e:	fe 01       	movw	r30, r28
    2390:	e5 5a       	subi	r30, 0xA5	; 165
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	60 81       	ld	r22, Z
    2396:	71 81       	ldd	r23, Z+1	; 0x01
    2398:	82 81       	ldd	r24, Z+2	; 0x02
    239a:	93 81       	ldd	r25, Z+3	; 0x03
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	f8 01       	movw	r30, r16
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	de 01       	movw	r26, r28
    23ac:	ab 5a       	subi	r26, 0xAB	; 171
    23ae:	bf 4f       	sbci	r27, 0xFF	; 255
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5a       	subi	r30, 0xA7	; 167
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 81       	ld	r24, Z
    23b8:	91 81       	ldd	r25, Z+1	; 0x01
    23ba:	8d 93       	st	X+, r24
    23bc:	9c 93       	st	X, r25
    23be:	fe 01       	movw	r30, r28
    23c0:	eb 5a       	subi	r30, 0xAB	; 171
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 81       	ld	r24, Z
    23c6:	91 81       	ldd	r25, Z+1	; 0x01
    23c8:	01 97       	sbiw	r24, 0x01	; 1
    23ca:	f1 f7       	brne	.-4      	; 0x23c8 <LCD_vidInit+0x748>
    23cc:	fe 01       	movw	r30, r28
    23ce:	eb 5a       	subi	r30, 0xAB	; 171
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	91 83       	std	Z+1, r25	; 0x01
    23d4:	80 83       	st	Z, r24
			_delay_ms(2);

			/*0b000001 I/D SH*/
			u8CmdLoc = 0b00000100|
    23d6:	fe 01       	movw	r30, r28
    23d8:	e2 57       	subi	r30, 0x72	; 114
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	c9 01       	movw	r24, r18
    23e4:	88 0f       	add	r24, r24
    23e6:	99 1f       	adc	r25, r25
    23e8:	82 0f       	add	r24, r18
    23ea:	93 1f       	adc	r25, r19
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	fc 01       	movw	r30, r24
    23f6:	e5 5e       	subi	r30, 0xE5	; 229
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	80 81       	ld	r24, Z
    23fc:	82 95       	swap	r24
    23fe:	86 95       	lsr	r24
    2400:	86 95       	lsr	r24
    2402:	83 70       	andi	r24, 0x03	; 3
    2404:	81 70       	andi	r24, 0x01	; 1
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	48 2f       	mov	r20, r24
    2410:	44 60       	ori	r20, 0x04	; 4
    2412:	fe 01       	movw	r30, r28
    2414:	e2 57       	subi	r30, 0x72	; 114
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	80 81       	ld	r24, Z
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	c9 01       	movw	r24, r18
    2420:	88 0f       	add	r24, r24
    2422:	99 1f       	adc	r25, r25
    2424:	82 0f       	add	r24, r18
    2426:	93 1f       	adc	r25, r19
    2428:	88 0f       	add	r24, r24
    242a:	99 1f       	adc	r25, r25
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	fc 01       	movw	r30, r24
    2432:	e5 5e       	subi	r30, 0xE5	; 229
    2434:	fe 4f       	sbci	r31, 0xFE	; 254
    2436:	80 81       	ld	r24, Z
    2438:	88 1f       	adc	r24, r24
    243a:	88 27       	eor	r24, r24
    243c:	88 1f       	adc	r24, r24
    243e:	84 2b       	or	r24, r20
    2440:	fe 01       	movw	r30, r28
    2442:	e3 57       	subi	r30, 0x73	; 115
    2444:	ff 4f       	sbci	r31, 0xFF	; 255
    2446:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8In_DecrementMode<< 1|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8ShiftStatus<< 0;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2448:	fe 01       	movw	r30, r28
    244a:	e2 57       	subi	r30, 0x72	; 114
    244c:	ff 4f       	sbci	r31, 0xFF	; 255
    244e:	de 01       	movw	r26, r28
    2450:	a3 57       	subi	r26, 0x73	; 115
    2452:	bf 4f       	sbci	r27, 0xFF	; 255
    2454:	80 81       	ld	r24, Z
    2456:	6c 91       	ld	r22, X
    2458:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    245c:	fe 01       	movw	r30, r28
    245e:	ef 5a       	subi	r30, 0xAF	; 175
    2460:	ff 4f       	sbci	r31, 0xFF	; 255
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e0       	ldi	r26, 0x00	; 0
    2468:	b0 e4       	ldi	r27, 0x40	; 64
    246a:	80 83       	st	Z, r24
    246c:	91 83       	std	Z+1, r25	; 0x01
    246e:	a2 83       	std	Z+2, r26	; 0x02
    2470:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	8e 01       	movw	r16, r28
    2474:	03 5b       	subi	r16, 0xB3	; 179
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	fe 01       	movw	r30, r28
    247a:	ef 5a       	subi	r30, 0xAF	; 175
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	60 81       	ld	r22, Z
    2480:	71 81       	ldd	r23, Z+1	; 0x01
    2482:	82 81       	ldd	r24, Z+2	; 0x02
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	4a ef       	ldi	r20, 0xFA	; 250
    248c:	54 e4       	ldi	r21, 0x44	; 68
    248e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	f8 01       	movw	r30, r16
    2498:	80 83       	st	Z, r24
    249a:	91 83       	std	Z+1, r25	; 0x01
    249c:	a2 83       	std	Z+2, r26	; 0x02
    249e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24a0:	fe 01       	movw	r30, r28
    24a2:	e3 5b       	subi	r30, 0xB3	; 179
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	60 81       	ld	r22, Z
    24a8:	71 81       	ldd	r23, Z+1	; 0x01
    24aa:	82 81       	ldd	r24, Z+2	; 0x02
    24ac:	93 81       	ldd	r25, Z+3	; 0x03
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	40 e8       	ldi	r20, 0x80	; 128
    24b4:	5f e3       	ldi	r21, 0x3F	; 63
    24b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ba:	88 23       	and	r24, r24
    24bc:	44 f4       	brge	.+16     	; 0x24ce <LCD_vidInit+0x84e>
		__ticks = 1;
    24be:	fe 01       	movw	r30, r28
    24c0:	e5 5b       	subi	r30, 0xB5	; 181
    24c2:	ff 4f       	sbci	r31, 0xFF	; 255
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	91 83       	std	Z+1, r25	; 0x01
    24ca:	80 83       	st	Z, r24
    24cc:	64 c0       	rjmp	.+200    	; 0x2596 <LCD_vidInit+0x916>
	else if (__tmp > 65535)
    24ce:	fe 01       	movw	r30, r28
    24d0:	e3 5b       	subi	r30, 0xB3	; 179
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	20 e0       	ldi	r18, 0x00	; 0
    24de:	3f ef       	ldi	r19, 0xFF	; 255
    24e0:	4f e7       	ldi	r20, 0x7F	; 127
    24e2:	57 e4       	ldi	r21, 0x47	; 71
    24e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e8:	18 16       	cp	r1, r24
    24ea:	0c f0       	brlt	.+2      	; 0x24ee <LCD_vidInit+0x86e>
    24ec:	43 c0       	rjmp	.+134    	; 0x2574 <LCD_vidInit+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	fe 01       	movw	r30, r28
    24f0:	ef 5a       	subi	r30, 0xAF	; 175
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	82 81       	ldd	r24, Z+2	; 0x02
    24fa:	93 81       	ldd	r25, Z+3	; 0x03
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	8e 01       	movw	r16, r28
    250e:	05 5b       	subi	r16, 0xB5	; 181
    2510:	1f 4f       	sbci	r17, 0xFF	; 255
    2512:	bc 01       	movw	r22, r24
    2514:	cd 01       	movw	r24, r26
    2516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	f8 01       	movw	r30, r16
    2520:	91 83       	std	Z+1, r25	; 0x01
    2522:	80 83       	st	Z, r24
    2524:	1f c0       	rjmp	.+62     	; 0x2564 <LCD_vidInit+0x8e4>
    2526:	fe 01       	movw	r30, r28
    2528:	e7 5b       	subi	r30, 0xB7	; 183
    252a:	ff 4f       	sbci	r31, 0xFF	; 255
    252c:	88 ec       	ldi	r24, 0xC8	; 200
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	80 83       	st	Z, r24
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5b       	subi	r30, 0xB7	; 183
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	91 81       	ldd	r25, Z+1	; 0x01
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_vidInit+0x8be>
    2542:	fe 01       	movw	r30, r28
    2544:	e7 5b       	subi	r30, 0xB7	; 183
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	91 83       	std	Z+1, r25	; 0x01
    254a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254c:	de 01       	movw	r26, r28
    254e:	a5 5b       	subi	r26, 0xB5	; 181
    2550:	bf 4f       	sbci	r27, 0xFF	; 255
    2552:	fe 01       	movw	r30, r28
    2554:	e5 5b       	subi	r30, 0xB5	; 181
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 81       	ld	r24, Z
    255a:	91 81       	ldd	r25, Z+1	; 0x01
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	11 96       	adiw	r26, 0x01	; 1
    2560:	9c 93       	st	X, r25
    2562:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2564:	fe 01       	movw	r30, r28
    2566:	e5 5b       	subi	r30, 0xB5	; 181
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	d1 f6       	brne	.-76     	; 0x2526 <LCD_vidInit+0x8a6>
    2572:	e1 c3       	rjmp	.+1986   	; 0x2d36 <LCD_vidInit+0x10b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	8e 01       	movw	r16, r28
    2576:	05 5b       	subi	r16, 0xB5	; 181
    2578:	1f 4f       	sbci	r17, 0xFF	; 255
    257a:	fe 01       	movw	r30, r28
    257c:	e3 5b       	subi	r30, 0xB3	; 179
    257e:	ff 4f       	sbci	r31, 0xFF	; 255
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	f8 01       	movw	r30, r16
    2592:	91 83       	std	Z+1, r25	; 0x01
    2594:	80 83       	st	Z, r24
    2596:	de 01       	movw	r26, r28
    2598:	a9 5b       	subi	r26, 0xB9	; 185
    259a:	bf 4f       	sbci	r27, 0xFF	; 255
    259c:	fe 01       	movw	r30, r28
    259e:	e5 5b       	subi	r30, 0xB5	; 181
    25a0:	ff 4f       	sbci	r31, 0xFF	; 255
    25a2:	80 81       	ld	r24, Z
    25a4:	91 81       	ldd	r25, Z+1	; 0x01
    25a6:	11 96       	adiw	r26, 0x01	; 1
    25a8:	9c 93       	st	X, r25
    25aa:	8e 93       	st	-X, r24
    25ac:	fe 01       	movw	r30, r28
    25ae:	e9 5b       	subi	r30, 0xB9	; 185
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	80 81       	ld	r24, Z
    25b4:	91 81       	ldd	r25, Z+1	; 0x01
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_vidInit+0x936>
    25ba:	fe 01       	movw	r30, r28
    25bc:	e9 5b       	subi	r30, 0xB9	; 185
    25be:	ff 4f       	sbci	r31, 0xFF	; 255
    25c0:	91 83       	std	Z+1, r25	; 0x01
    25c2:	80 83       	st	Z, r24
    25c4:	b8 c3       	rjmp	.+1904   	; 0x2d36 <LCD_vidInit+0x10b6>
    25c6:	fe 01       	movw	r30, r28
    25c8:	ed 5b       	subi	r30, 0xBD	; 189
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 ef       	ldi	r26, 0xF0	; 240
    25d2:	b1 e4       	ldi	r27, 0x41	; 65
    25d4:	80 83       	st	Z, r24
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	a2 83       	std	Z+2, r26	; 0x02
    25da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	8e 01       	movw	r16, r28
    25de:	01 5c       	subi	r16, 0xC1	; 193
    25e0:	1f 4f       	sbci	r17, 0xFF	; 255
    25e2:	fe 01       	movw	r30, r28
    25e4:	ed 5b       	subi	r30, 0xBD	; 189
    25e6:	ff 4f       	sbci	r31, 0xFF	; 255
    25e8:	60 81       	ld	r22, Z
    25ea:	71 81       	ldd	r23, Z+1	; 0x01
    25ec:	82 81       	ldd	r24, Z+2	; 0x02
    25ee:	93 81       	ldd	r25, Z+3	; 0x03
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	f8 01       	movw	r30, r16
    2602:	80 83       	st	Z, r24
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	a2 83       	std	Z+2, r26	; 0x02
    2608:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    260a:	fe 01       	movw	r30, r28
    260c:	ff 96       	adiw	r30, 0x3f	; 63
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <LCD_vidInit+0x9b0>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9e af       	std	Y+62, r25	; 0x3e
    262c:	8d af       	std	Y+61, r24	; 0x3d
    262e:	46 c0       	rjmp	.+140    	; 0x26bc <LCD_vidInit+0xa3c>
	else if (__tmp > 65535)
    2630:	fe 01       	movw	r30, r28
    2632:	ff 96       	adiw	r30, 0x3f	; 63
    2634:	60 81       	ld	r22, Z
    2636:	71 81       	ldd	r23, Z+1	; 0x01
    2638:	82 81       	ldd	r24, Z+2	; 0x02
    263a:	93 81       	ldd	r25, Z+3	; 0x03
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	3f ef       	ldi	r19, 0xFF	; 255
    2640:	4f e7       	ldi	r20, 0x7F	; 127
    2642:	57 e4       	ldi	r21, 0x47	; 71
    2644:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2648:	18 16       	cp	r1, r24
    264a:	64 f5       	brge	.+88     	; 0x26a4 <LCD_vidInit+0xa24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    264c:	fe 01       	movw	r30, r28
    264e:	ed 5b       	subi	r30, 0xBD	; 189
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	60 81       	ld	r22, Z
    2654:	71 81       	ldd	r23, Z+1	; 0x01
    2656:	82 81       	ldd	r24, Z+2	; 0x02
    2658:	93 81       	ldd	r25, Z+3	; 0x03
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	40 e2       	ldi	r20, 0x20	; 32
    2660:	51 e4       	ldi	r21, 0x41	; 65
    2662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	bc 01       	movw	r22, r24
    266c:	cd 01       	movw	r24, r26
    266e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2672:	dc 01       	movw	r26, r24
    2674:	cb 01       	movw	r24, r22
    2676:	9e af       	std	Y+62, r25	; 0x3e
    2678:	8d af       	std	Y+61, r24	; 0x3d
    267a:	0f c0       	rjmp	.+30     	; 0x269a <LCD_vidInit+0xa1a>
    267c:	88 ec       	ldi	r24, 0xC8	; 200
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9c af       	std	Y+60, r25	; 0x3c
    2682:	8b af       	std	Y+59, r24	; 0x3b
    2684:	8b ad       	ldd	r24, Y+59	; 0x3b
    2686:	9c ad       	ldd	r25, Y+60	; 0x3c
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <LCD_vidInit+0xa08>
    268c:	9c af       	std	Y+60, r25	; 0x3c
    268e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2690:	8d ad       	ldd	r24, Y+61	; 0x3d
    2692:	9e ad       	ldd	r25, Y+62	; 0x3e
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	9e af       	std	Y+62, r25	; 0x3e
    2698:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269a:	8d ad       	ldd	r24, Y+61	; 0x3d
    269c:	9e ad       	ldd	r25, Y+62	; 0x3e
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	69 f7       	brne	.-38     	; 0x267c <LCD_vidInit+0x9fc>
    26a2:	16 c0       	rjmp	.+44     	; 0x26d0 <LCD_vidInit+0xa50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a4:	fe 01       	movw	r30, r28
    26a6:	ff 96       	adiw	r30, 0x3f	; 63
    26a8:	60 81       	ld	r22, Z
    26aa:	71 81       	ldd	r23, Z+1	; 0x01
    26ac:	82 81       	ldd	r24, Z+2	; 0x02
    26ae:	93 81       	ldd	r25, Z+3	; 0x03
    26b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b4:	dc 01       	movw	r26, r24
    26b6:	cb 01       	movw	r24, r22
    26b8:	9e af       	std	Y+62, r25	; 0x3e
    26ba:	8d af       	std	Y+61, r24	; 0x3d
    26bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    26be:	9e ad       	ldd	r25, Y+62	; 0x3e
    26c0:	9a af       	std	Y+58, r25	; 0x3a
    26c2:	89 af       	std	Y+57, r24	; 0x39
    26c4:	89 ad       	ldd	r24, Y+57	; 0x39
    26c6:	9a ad       	ldd	r25, Y+58	; 0x3a
    26c8:	01 97       	sbiw	r24, 0x01	; 1
    26ca:	f1 f7       	brne	.-4      	; 0x26c8 <LCD_vidInit+0xa48>
    26cc:	9a af       	std	Y+58, r25	; 0x3a
    26ce:	89 af       	std	Y+57, r24	; 0x39
		else
		{
			/*task initialize 4 bit mod ya fandem*/
			_delay_ms(30);
			/*0b00100000*/
			u8CmdLoc = 0b00100000;
    26d0:	fe 01       	movw	r30, r28
    26d2:	e3 57       	subi	r30, 0x73	; 115
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	80 e2       	ldi	r24, 0x20	; 32
    26d8:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    26da:	fe 01       	movw	r30, r28
    26dc:	e2 57       	subi	r30, 0x72	; 114
    26de:	ff 4f       	sbci	r31, 0xFF	; 255
    26e0:	de 01       	movw	r26, r28
    26e2:	a3 57       	subi	r26, 0x73	; 115
    26e4:	bf 4f       	sbci	r27, 0xFF	; 255
    26e6:	80 81       	ld	r24, Z
    26e8:	6c 91       	ld	r22, X
    26ea:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			/*0b00100000*/
			u8CmdLoc = 0b00100000;
    26ee:	fe 01       	movw	r30, r28
    26f0:	e3 57       	subi	r30, 0x73	; 115
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	80 e2       	ldi	r24, 0x20	; 32
    26f6:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    26f8:	fe 01       	movw	r30, r28
    26fa:	e2 57       	subi	r30, 0x72	; 114
    26fc:	ff 4f       	sbci	r31, 0xFF	; 255
    26fe:	de 01       	movw	r26, r28
    2700:	a3 57       	subi	r26, 0x73	; 115
    2702:	bf 4f       	sbci	r27, 0xFF	; 255
    2704:	80 81       	ld	r24, Z
    2706:	6c 91       	ld	r22, X
    2708:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			/*0bNF000000*/
			u8CmdLoc = 0b00000000 |
    270c:	fe 01       	movw	r30, r28
    270e:	e2 57       	subi	r30, 0x72	; 114
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	28 2f       	mov	r18, r24
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	c9 01       	movw	r24, r18
    271a:	88 0f       	add	r24, r24
    271c:	99 1f       	adc	r25, r25
    271e:	82 0f       	add	r24, r18
    2720:	93 1f       	adc	r25, r19
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	fc 01       	movw	r30, r24
    272c:	e5 5e       	subi	r30, 0xE5	; 229
    272e:	fe 4f       	sbci	r31, 0xFE	; 254
    2730:	80 81       	ld	r24, Z
    2732:	86 95       	lsr	r24
    2734:	81 70       	andi	r24, 0x01	; 1
    2736:	88 2f       	mov	r24, r24
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	96 95       	lsr	r25
    273c:	98 2f       	mov	r25, r24
    273e:	88 27       	eor	r24, r24
    2740:	97 95       	ror	r25
    2742:	87 95       	ror	r24
    2744:	48 2f       	mov	r20, r24
    2746:	fe 01       	movw	r30, r28
    2748:	e2 57       	subi	r30, 0x72	; 114
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	c9 01       	movw	r24, r18
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	88 0f       	add	r24, r24
    275e:	99 1f       	adc	r25, r25
    2760:	88 0f       	add	r24, r24
    2762:	99 1f       	adc	r25, r25
    2764:	fc 01       	movw	r30, r24
    2766:	e5 5e       	subi	r30, 0xE5	; 229
    2768:	fe 4f       	sbci	r31, 0xFE	; 254
    276a:	80 81       	ld	r24, Z
    276c:	86 95       	lsr	r24
    276e:	86 95       	lsr	r24
    2770:	81 70       	andi	r24, 0x01	; 1
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	00 24       	eor	r0, r0
    2778:	96 95       	lsr	r25
    277a:	87 95       	ror	r24
    277c:	07 94       	ror	r0
    277e:	96 95       	lsr	r25
    2780:	87 95       	ror	r24
    2782:	07 94       	ror	r0
    2784:	98 2f       	mov	r25, r24
    2786:	80 2d       	mov	r24, r0
    2788:	84 2b       	or	r24, r20
    278a:	fe 01       	movw	r30, r28
    278c:	e3 57       	subi	r30, 0x73	; 115
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8LineNum<<7|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8Font<<6;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2792:	fe 01       	movw	r30, r28
    2794:	e2 57       	subi	r30, 0x72	; 114
    2796:	ff 4f       	sbci	r31, 0xFF	; 255
    2798:	de 01       	movw	r26, r28
    279a:	a3 57       	subi	r26, 0x73	; 115
    279c:	bf 4f       	sbci	r27, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	6c 91       	ld	r22, X
    27a2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    27a6:	80 e0       	ldi	r24, 0x00	; 0
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e8       	ldi	r26, 0x80	; 128
    27ac:	bf e3       	ldi	r27, 0x3F	; 63
    27ae:	8d ab       	std	Y+53, r24	; 0x35
    27b0:	9e ab       	std	Y+54, r25	; 0x36
    27b2:	af ab       	std	Y+55, r26	; 0x37
    27b4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b6:	6d a9       	ldd	r22, Y+53	; 0x35
    27b8:	7e a9       	ldd	r23, Y+54	; 0x36
    27ba:	8f a9       	ldd	r24, Y+55	; 0x37
    27bc:	98 ad       	ldd	r25, Y+56	; 0x38
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	4a ef       	ldi	r20, 0xFA	; 250
    27c4:	54 e4       	ldi	r21, 0x44	; 68
    27c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	89 ab       	std	Y+49, r24	; 0x31
    27d0:	9a ab       	std	Y+50, r25	; 0x32
    27d2:	ab ab       	std	Y+51, r26	; 0x33
    27d4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    27d6:	69 a9       	ldd	r22, Y+49	; 0x31
    27d8:	7a a9       	ldd	r23, Y+50	; 0x32
    27da:	8b a9       	ldd	r24, Y+51	; 0x33
    27dc:	9c a9       	ldd	r25, Y+52	; 0x34
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	40 e8       	ldi	r20, 0x80	; 128
    27e4:	5f e3       	ldi	r21, 0x3F	; 63
    27e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ea:	88 23       	and	r24, r24
    27ec:	2c f4       	brge	.+10     	; 0x27f8 <LCD_vidInit+0xb78>
		__ticks = 1;
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	98 ab       	std	Y+48, r25	; 0x30
    27f4:	8f a7       	std	Y+47, r24	; 0x2f
    27f6:	3f c0       	rjmp	.+126    	; 0x2876 <LCD_vidInit+0xbf6>
	else if (__tmp > 65535)
    27f8:	69 a9       	ldd	r22, Y+49	; 0x31
    27fa:	7a a9       	ldd	r23, Y+50	; 0x32
    27fc:	8b a9       	ldd	r24, Y+51	; 0x33
    27fe:	9c a9       	ldd	r25, Y+52	; 0x34
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	3f ef       	ldi	r19, 0xFF	; 255
    2804:	4f e7       	ldi	r20, 0x7F	; 127
    2806:	57 e4       	ldi	r21, 0x47	; 71
    2808:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    280c:	18 16       	cp	r1, r24
    280e:	4c f5       	brge	.+82     	; 0x2862 <LCD_vidInit+0xbe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2810:	6d a9       	ldd	r22, Y+53	; 0x35
    2812:	7e a9       	ldd	r23, Y+54	; 0x36
    2814:	8f a9       	ldd	r24, Y+55	; 0x37
    2816:	98 ad       	ldd	r25, Y+56	; 0x38
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e2       	ldi	r20, 0x20	; 32
    281e:	51 e4       	ldi	r21, 0x41	; 65
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	bc 01       	movw	r22, r24
    282a:	cd 01       	movw	r24, r26
    282c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2830:	dc 01       	movw	r26, r24
    2832:	cb 01       	movw	r24, r22
    2834:	98 ab       	std	Y+48, r25	; 0x30
    2836:	8f a7       	std	Y+47, r24	; 0x2f
    2838:	0f c0       	rjmp	.+30     	; 0x2858 <LCD_vidInit+0xbd8>
    283a:	88 ec       	ldi	r24, 0xC8	; 200
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9e a7       	std	Y+46, r25	; 0x2e
    2840:	8d a7       	std	Y+45, r24	; 0x2d
    2842:	8d a5       	ldd	r24, Y+45	; 0x2d
    2844:	9e a5       	ldd	r25, Y+46	; 0x2e
    2846:	01 97       	sbiw	r24, 0x01	; 1
    2848:	f1 f7       	brne	.-4      	; 0x2846 <LCD_vidInit+0xbc6>
    284a:	9e a7       	std	Y+46, r25	; 0x2e
    284c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2850:	98 a9       	ldd	r25, Y+48	; 0x30
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	98 ab       	std	Y+48, r25	; 0x30
    2856:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2858:	8f a5       	ldd	r24, Y+47	; 0x2f
    285a:	98 a9       	ldd	r25, Y+48	; 0x30
    285c:	00 97       	sbiw	r24, 0x00	; 0
    285e:	69 f7       	brne	.-38     	; 0x283a <LCD_vidInit+0xbba>
    2860:	14 c0       	rjmp	.+40     	; 0x288a <LCD_vidInit+0xc0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2862:	69 a9       	ldd	r22, Y+49	; 0x31
    2864:	7a a9       	ldd	r23, Y+50	; 0x32
    2866:	8b a9       	ldd	r24, Y+51	; 0x33
    2868:	9c a9       	ldd	r25, Y+52	; 0x34
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	98 ab       	std	Y+48, r25	; 0x30
    2874:	8f a7       	std	Y+47, r24	; 0x2f
    2876:	8f a5       	ldd	r24, Y+47	; 0x2f
    2878:	98 a9       	ldd	r25, Y+48	; 0x30
    287a:	9c a7       	std	Y+44, r25	; 0x2c
    287c:	8b a7       	std	Y+43, r24	; 0x2b
    287e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2880:	9c a5       	ldd	r25, Y+44	; 0x2c
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <LCD_vidInit+0xc02>
    2886:	9c a7       	std	Y+44, r25	; 0x2c
    2888:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);

			/*****Display ON/OFF Control*****/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    288a:	fe 01       	movw	r30, r28
    288c:	e3 57       	subi	r30, 0x73	; 115
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2892:	fe 01       	movw	r30, r28
    2894:	e2 57       	subi	r30, 0x72	; 114
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	de 01       	movw	r26, r28
    289a:	a3 57       	subi	r26, 0x73	; 115
    289c:	bf 4f       	sbci	r27, 0xFF	; 255
    289e:	80 81       	ld	r24, Z
    28a0:	6c 91       	ld	r22, X
    28a2:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			/*0b1DCB0000*/
			u8CmdLoc = 0b10000000|
    28a6:	fe 01       	movw	r30, r28
    28a8:	e2 57       	subi	r30, 0x72	; 114
    28aa:	ff 4f       	sbci	r31, 0xFF	; 255
    28ac:	80 81       	ld	r24, Z
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	c9 01       	movw	r24, r18
    28b4:	88 0f       	add	r24, r24
    28b6:	99 1f       	adc	r25, r25
    28b8:	82 0f       	add	r24, r18
    28ba:	93 1f       	adc	r25, r19
    28bc:	88 0f       	add	r24, r24
    28be:	99 1f       	adc	r25, r25
    28c0:	88 0f       	add	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	fc 01       	movw	r30, r24
    28c6:	e5 5e       	subi	r30, 0xE5	; 229
    28c8:	fe 4f       	sbci	r31, 0xFE	; 254
    28ca:	80 81       	ld	r24, Z
    28cc:	86 95       	lsr	r24
    28ce:	86 95       	lsr	r24
    28d0:	86 95       	lsr	r24
    28d2:	81 70       	andi	r24, 0x01	; 1
    28d4:	88 2f       	mov	r24, r24
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	00 24       	eor	r0, r0
    28da:	96 95       	lsr	r25
    28dc:	87 95       	ror	r24
    28de:	07 94       	ror	r0
    28e0:	96 95       	lsr	r25
    28e2:	87 95       	ror	r24
    28e4:	07 94       	ror	r0
    28e6:	98 2f       	mov	r25, r24
    28e8:	80 2d       	mov	r24, r0
    28ea:	48 2f       	mov	r20, r24
    28ec:	40 68       	ori	r20, 0x80	; 128
    28ee:	fe 01       	movw	r30, r28
    28f0:	e2 57       	subi	r30, 0x72	; 114
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	c9 01       	movw	r24, r18
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	82 0f       	add	r24, r18
    2902:	93 1f       	adc	r25, r19
    2904:	88 0f       	add	r24, r24
    2906:	99 1f       	adc	r25, r25
    2908:	88 0f       	add	r24, r24
    290a:	99 1f       	adc	r25, r25
    290c:	fc 01       	movw	r30, r24
    290e:	e5 5e       	subi	r30, 0xE5	; 229
    2910:	fe 4f       	sbci	r31, 0xFE	; 254
    2912:	80 81       	ld	r24, Z
    2914:	82 95       	swap	r24
    2916:	8f 70       	andi	r24, 0x0F	; 15
    2918:	81 70       	andi	r24, 0x01	; 1
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	82 95       	swap	r24
    2924:	92 95       	swap	r25
    2926:	90 7f       	andi	r25, 0xF0	; 240
    2928:	98 27       	eor	r25, r24
    292a:	80 7f       	andi	r24, 0xF0	; 240
    292c:	98 27       	eor	r25, r24
    292e:	48 2b       	or	r20, r24
    2930:	fe 01       	movw	r30, r28
    2932:	e2 57       	subi	r30, 0x72	; 114
    2934:	ff 4f       	sbci	r31, 0xFF	; 255
    2936:	80 81       	ld	r24, Z
    2938:	28 2f       	mov	r18, r24
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	c9 01       	movw	r24, r18
    293e:	88 0f       	add	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	fc 01       	movw	r30, r24
    2950:	e5 5e       	subi	r30, 0xE5	; 229
    2952:	fe 4f       	sbci	r31, 0xFE	; 254
    2954:	80 81       	ld	r24, Z
    2956:	82 95       	swap	r24
    2958:	86 95       	lsr	r24
    295a:	87 70       	andi	r24, 0x07	; 7
    295c:	81 70       	andi	r24, 0x01	; 1
    295e:	88 2f       	mov	r24, r24
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	82 95       	swap	r24
    2964:	92 95       	swap	r25
    2966:	90 7f       	andi	r25, 0xF0	; 240
    2968:	98 27       	eor	r25, r24
    296a:	80 7f       	andi	r24, 0xF0	; 240
    296c:	98 27       	eor	r25, r24
    296e:	84 2b       	or	r24, r20
    2970:	fe 01       	movw	r30, r28
    2972:	e3 57       	subi	r30, 0x73	; 115
    2974:	ff 4f       	sbci	r31, 0xFF	; 255
    2976:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8DisplayStatus<< 6|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8CursorStatus<<5|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8BlinkStatus<<4;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2978:	fe 01       	movw	r30, r28
    297a:	e2 57       	subi	r30, 0x72	; 114
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	de 01       	movw	r26, r28
    2980:	a3 57       	subi	r26, 0x73	; 115
    2982:	bf 4f       	sbci	r27, 0xFF	; 255
    2984:	80 81       	ld	r24, Z
    2986:	6c 91       	ld	r22, X
    2988:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e8       	ldi	r26, 0x80	; 128
    2992:	bf e3       	ldi	r27, 0x3F	; 63
    2994:	8f a3       	std	Y+39, r24	; 0x27
    2996:	98 a7       	std	Y+40, r25	; 0x28
    2998:	a9 a7       	std	Y+41, r26	; 0x29
    299a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6f a1       	ldd	r22, Y+39	; 0x27
    299e:	78 a5       	ldd	r23, Y+40	; 0x28
    29a0:	89 a5       	ldd	r24, Y+41	; 0x29
    29a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a ef       	ldi	r20, 0xFA	; 250
    29aa:	54 e4       	ldi	r21, 0x44	; 68
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8b a3       	std	Y+35, r24	; 0x23
    29b6:	9c a3       	std	Y+36, r25	; 0x24
    29b8:	ad a3       	std	Y+37, r26	; 0x25
    29ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    29bc:	6b a1       	ldd	r22, Y+35	; 0x23
    29be:	7c a1       	ldd	r23, Y+36	; 0x24
    29c0:	8d a1       	ldd	r24, Y+37	; 0x25
    29c2:	9e a1       	ldd	r25, Y+38	; 0x26
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <LCD_vidInit+0xd5e>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <LCD_vidInit+0xddc>
	else if (__tmp > 65535)
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <LCD_vidInit+0xdc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6f a1       	ldd	r22, Y+39	; 0x27
    29f8:	78 a5       	ldd	r23, Y+40	; 0x28
    29fa:	89 a5       	ldd	r24, Y+41	; 0x29
    29fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9a a3       	std	Y+34, r25	; 0x22
    2a1c:	89 a3       	std	Y+33, r24	; 0x21
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <LCD_vidInit+0xdbe>
    2a20:	88 ec       	ldi	r24, 0xC8	; 200
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	98 a3       	std	Y+32, r25	; 0x20
    2a26:	8f 8f       	std	Y+31, r24	; 0x1f
    2a28:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a2a:	98 a1       	ldd	r25, Y+32	; 0x20
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_vidInit+0xdac>
    2a30:	98 a3       	std	Y+32, r25	; 0x20
    2a32:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	89 a1       	ldd	r24, Y+33	; 0x21
    2a36:	9a a1       	ldd	r25, Y+34	; 0x22
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9a a3       	std	Y+34, r25	; 0x22
    2a3c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2a40:	9a a1       	ldd	r25, Y+34	; 0x22
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <LCD_vidInit+0xda0>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <LCD_vidInit+0xdf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6b a1       	ldd	r22, Y+35	; 0x23
    2a4a:	7c a1       	ldd	r23, Y+36	; 0x24
    2a4c:	8d a1       	ldd	r24, Y+37	; 0x25
    2a4e:	9e a1       	ldd	r25, Y+38	; 0x26
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9a a3       	std	Y+34, r25	; 0x22
    2a5a:	89 a3       	std	Y+33, r24	; 0x21
    2a5c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a5e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a60:	9e 8f       	std	Y+30, r25	; 0x1e
    2a62:	8d 8f       	std	Y+29, r24	; 0x1d
    2a64:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a66:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <LCD_vidInit+0xde8>
    2a6c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a6e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);

			/*****Display Clear******/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    2a70:	fe 01       	movw	r30, r28
    2a72:	e3 57       	subi	r30, 0x73	; 115
    2a74:	ff 4f       	sbci	r31, 0xFF	; 255
    2a76:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2a78:	fe 01       	movw	r30, r28
    2a7a:	e2 57       	subi	r30, 0x72	; 114
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	de 01       	movw	r26, r28
    2a80:	a3 57       	subi	r26, 0x73	; 115
    2a82:	bf 4f       	sbci	r27, 0xFF	; 255
    2a84:	80 81       	ld	r24, Z
    2a86:	6c 91       	ld	r22, X
    2a88:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			/*0b00010000*/
			u8CmdLoc = 0b00010000;
    2a8c:	fe 01       	movw	r30, r28
    2a8e:	e3 57       	subi	r30, 0x73	; 115
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	80 e1       	ldi	r24, 0x10	; 16
    2a94:	80 83       	st	Z, r24
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2a96:	fe 01       	movw	r30, r28
    2a98:	e2 57       	subi	r30, 0x72	; 114
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	de 01       	movw	r26, r28
    2a9e:	a3 57       	subi	r26, 0x73	; 115
    2aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa2:	80 81       	ld	r24, Z
    2aa4:	6c 91       	ld	r22, X
    2aa6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e4       	ldi	r27, 0x40	; 64
    2ab2:	89 8f       	std	Y+25, r24	; 0x19
    2ab4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ab6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ab8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aba:	69 8d       	ldd	r22, Y+25	; 0x19
    2abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	4a ef       	ldi	r20, 0xFA	; 250
    2ac8:	54 e4       	ldi	r21, 0x44	; 68
    2aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	8d 8b       	std	Y+21, r24	; 0x15
    2ad4:	9e 8b       	std	Y+22, r25	; 0x16
    2ad6:	af 8b       	std	Y+23, r26	; 0x17
    2ad8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ada:	6d 89       	ldd	r22, Y+21	; 0x15
    2adc:	7e 89       	ldd	r23, Y+22	; 0x16
    2ade:	8f 89       	ldd	r24, Y+23	; 0x17
    2ae0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aee:	88 23       	and	r24, r24
    2af0:	2c f4       	brge	.+10     	; 0x2afc <LCD_vidInit+0xe7c>
		__ticks = 1;
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	9c 8b       	std	Y+20, r25	; 0x14
    2af8:	8b 8b       	std	Y+19, r24	; 0x13
    2afa:	3f c0       	rjmp	.+126    	; 0x2b7a <LCD_vidInit+0xefa>
	else if (__tmp > 65535)
    2afc:	6d 89       	ldd	r22, Y+21	; 0x15
    2afe:	7e 89       	ldd	r23, Y+22	; 0x16
    2b00:	8f 89       	ldd	r24, Y+23	; 0x17
    2b02:	98 8d       	ldd	r25, Y+24	; 0x18
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	3f ef       	ldi	r19, 0xFF	; 255
    2b08:	4f e7       	ldi	r20, 0x7F	; 127
    2b0a:	57 e4       	ldi	r21, 0x47	; 71
    2b0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b10:	18 16       	cp	r1, r24
    2b12:	4c f5       	brge	.+82     	; 0x2b66 <LCD_vidInit+0xee6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b14:	69 8d       	ldd	r22, Y+25	; 0x19
    2b16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e2       	ldi	r20, 0x20	; 32
    2b22:	51 e4       	ldi	r21, 0x41	; 65
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b34:	dc 01       	movw	r26, r24
    2b36:	cb 01       	movw	r24, r22
    2b38:	9c 8b       	std	Y+20, r25	; 0x14
    2b3a:	8b 8b       	std	Y+19, r24	; 0x13
    2b3c:	0f c0       	rjmp	.+30     	; 0x2b5c <LCD_vidInit+0xedc>
    2b3e:	88 ec       	ldi	r24, 0xC8	; 200
    2b40:	90 e0       	ldi	r25, 0x00	; 0
    2b42:	9a 8b       	std	Y+18, r25	; 0x12
    2b44:	89 8b       	std	Y+17, r24	; 0x11
    2b46:	89 89       	ldd	r24, Y+17	; 0x11
    2b48:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4a:	01 97       	sbiw	r24, 0x01	; 1
    2b4c:	f1 f7       	brne	.-4      	; 0x2b4a <LCD_vidInit+0xeca>
    2b4e:	9a 8b       	std	Y+18, r25	; 0x12
    2b50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b52:	8b 89       	ldd	r24, Y+19	; 0x13
    2b54:	9c 89       	ldd	r25, Y+20	; 0x14
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	9c 8b       	std	Y+20, r25	; 0x14
    2b5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b60:	00 97       	sbiw	r24, 0x00	; 0
    2b62:	69 f7       	brne	.-38     	; 0x2b3e <LCD_vidInit+0xebe>
    2b64:	14 c0       	rjmp	.+40     	; 0x2b8e <LCD_vidInit+0xf0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b66:	6d 89       	ldd	r22, Y+21	; 0x15
    2b68:	7e 89       	ldd	r23, Y+22	; 0x16
    2b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	9c 8b       	std	Y+20, r25	; 0x14
    2b78:	8b 8b       	std	Y+19, r24	; 0x13
    2b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b7e:	98 8b       	std	Y+16, r25	; 0x10
    2b80:	8f 87       	std	Y+15, r24	; 0x0f
    2b82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b84:	98 89       	ldd	r25, Y+16	; 0x10
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <LCD_vidInit+0xf06>
    2b8a:	98 8b       	std	Y+16, r25	; 0x10
    2b8c:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);

			/*****Entry Mode Set*****/
			/*0b00000000*/
			u8CmdLoc = 0b00000000;
    2b8e:	fe 01       	movw	r30, r28
    2b90:	e3 57       	subi	r30, 0x73	; 115
    2b92:	ff 4f       	sbci	r31, 0xFF	; 255
    2b94:	10 82       	st	Z, r1
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2b96:	fe 01       	movw	r30, r28
    2b98:	e2 57       	subi	r30, 0x72	; 114
    2b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9c:	de 01       	movw	r26, r28
    2b9e:	a3 57       	subi	r26, 0x73	; 115
    2ba0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ba2:	80 81       	ld	r24, Z
    2ba4:	6c 91       	ld	r22, X
    2ba6:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
			//_delay_ms(1);
			/*0b01 I/D SH 0000*/
			u8CmdLoc = 0b01000000|
    2baa:	fe 01       	movw	r30, r28
    2bac:	e2 57       	subi	r30, 0x72	; 114
    2bae:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb0:	80 81       	ld	r24, Z
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	c9 01       	movw	r24, r18
    2bb8:	88 0f       	add	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	82 0f       	add	r24, r18
    2bbe:	93 1f       	adc	r25, r19
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	fc 01       	movw	r30, r24
    2bca:	e5 5e       	subi	r30, 0xE5	; 229
    2bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bce:	80 81       	ld	r24, Z
    2bd0:	82 95       	swap	r24
    2bd2:	86 95       	lsr	r24
    2bd4:	86 95       	lsr	r24
    2bd6:	83 70       	andi	r24, 0x03	; 3
    2bd8:	81 70       	andi	r24, 0x01	; 1
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	88 0f       	add	r24, r24
    2be0:	99 1f       	adc	r25, r25
    2be2:	82 95       	swap	r24
    2be4:	92 95       	swap	r25
    2be6:	90 7f       	andi	r25, 0xF0	; 240
    2be8:	98 27       	eor	r25, r24
    2bea:	80 7f       	andi	r24, 0xF0	; 240
    2bec:	98 27       	eor	r25, r24
    2bee:	48 2f       	mov	r20, r24
    2bf0:	40 64       	ori	r20, 0x40	; 64
    2bf2:	fe 01       	movw	r30, r28
    2bf4:	e2 57       	subi	r30, 0x72	; 114
    2bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf8:	80 81       	ld	r24, Z
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	c9 01       	movw	r24, r18
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	82 0f       	add	r24, r18
    2c06:	93 1f       	adc	r25, r19
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	fc 01       	movw	r30, r24
    2c12:	e5 5e       	subi	r30, 0xE5	; 229
    2c14:	fe 4f       	sbci	r31, 0xFE	; 254
    2c16:	80 81       	ld	r24, Z
    2c18:	88 1f       	adc	r24, r24
    2c1a:	88 27       	eor	r24, r24
    2c1c:	88 1f       	adc	r24, r24
    2c1e:	88 2f       	mov	r24, r24
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	82 95       	swap	r24
    2c24:	92 95       	swap	r25
    2c26:	90 7f       	andi	r25, 0xF0	; 240
    2c28:	98 27       	eor	r25, r24
    2c2a:	80 7f       	andi	r24, 0xF0	; 240
    2c2c:	98 27       	eor	r25, r24
    2c2e:	84 2b       	or	r24, r20
    2c30:	fe 01       	movw	r30, r28
    2c32:	e3 57       	subi	r30, 0x73	; 115
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 83       	st	Z, r24
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8In_DecrementMode<< 5|
					LCD_astrCfg[u8CntrLoc].strLcdInternalCfg.u8ShiftStatus<< 4;
			LCD_vidSendCmd(u8CntrLoc , u8CmdLoc);
    2c38:	fe 01       	movw	r30, r28
    2c3a:	e2 57       	subi	r30, 0x72	; 114
    2c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3e:	de 01       	movw	r26, r28
    2c40:	a3 57       	subi	r26, 0x73	; 115
    2c42:	bf 4f       	sbci	r27, 0xFF	; 255
    2c44:	80 81       	ld	r24, Z
    2c46:	6c 91       	ld	r22, X
    2c48:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <LCD_vidSendCmd>
    2c4c:	80 e0       	ldi	r24, 0x00	; 0
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	a0 e0       	ldi	r26, 0x00	; 0
    2c52:	b0 e4       	ldi	r27, 0x40	; 64
    2c54:	8b 87       	std	Y+11, r24	; 0x0b
    2c56:	9c 87       	std	Y+12, r25	; 0x0c
    2c58:	ad 87       	std	Y+13, r26	; 0x0d
    2c5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a ef       	ldi	r20, 0xFA	; 250
    2c6a:	54 e4       	ldi	r21, 0x44	; 68
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	8f 83       	std	Y+7, r24	; 0x07
    2c76:	98 87       	std	Y+8, r25	; 0x08
    2c78:	a9 87       	std	Y+9, r26	; 0x09
    2c7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7e:	78 85       	ldd	r23, Y+8	; 0x08
    2c80:	89 85       	ldd	r24, Y+9	; 0x09
    2c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	40 e8       	ldi	r20, 0x80	; 128
    2c8a:	5f e3       	ldi	r21, 0x3F	; 63
    2c8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c90:	88 23       	and	r24, r24
    2c92:	2c f4       	brge	.+10     	; 0x2c9e <LCD_vidInit+0x101e>
		__ticks = 1;
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	9e 83       	std	Y+6, r25	; 0x06
    2c9a:	8d 83       	std	Y+5, r24	; 0x05
    2c9c:	3f c0       	rjmp	.+126    	; 0x2d1c <LCD_vidInit+0x109c>
	else if (__tmp > 65535)
    2c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca0:	78 85       	ldd	r23, Y+8	; 0x08
    2ca2:	89 85       	ldd	r24, Y+9	; 0x09
    2ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	3f ef       	ldi	r19, 0xFF	; 255
    2caa:	4f e7       	ldi	r20, 0x7F	; 127
    2cac:	57 e4       	ldi	r21, 0x47	; 71
    2cae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cb2:	18 16       	cp	r1, r24
    2cb4:	4c f5       	brge	.+82     	; 0x2d08 <LCD_vidInit+0x1088>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e2       	ldi	r20, 0x20	; 32
    2cc4:	51 e4       	ldi	r21, 0x41	; 65
    2cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd6:	dc 01       	movw	r26, r24
    2cd8:	cb 01       	movw	r24, r22
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <LCD_vidInit+0x107e>
    2ce0:	88 ec       	ldi	r24, 0xC8	; 200
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9c 83       	std	Y+4, r25	; 0x04
    2ce6:	8b 83       	std	Y+3, r24	; 0x03
    2ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cea:	9c 81       	ldd	r25, Y+4	; 0x04
    2cec:	01 97       	sbiw	r24, 0x01	; 1
    2cee:	f1 f7       	brne	.-4      	; 0x2cec <LCD_vidInit+0x106c>
    2cf0:	9c 83       	std	Y+4, r25	; 0x04
    2cf2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf8:	01 97       	sbiw	r24, 0x01	; 1
    2cfa:	9e 83       	std	Y+6, r25	; 0x06
    2cfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    2d00:	9e 81       	ldd	r25, Y+6	; 0x06
    2d02:	00 97       	sbiw	r24, 0x00	; 0
    2d04:	69 f7       	brne	.-38     	; 0x2ce0 <LCD_vidInit+0x1060>
    2d06:	14 c0       	rjmp	.+40     	; 0x2d30 <LCD_vidInit+0x10b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d08:	6f 81       	ldd	r22, Y+7	; 0x07
    2d0a:	78 85       	ldd	r23, Y+8	; 0x08
    2d0c:	89 85       	ldd	r24, Y+9	; 0x09
    2d0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	9e 83       	std	Y+6, r25	; 0x06
    2d1a:	8d 83       	std	Y+5, r24	; 0x05
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	9a 83       	std	Y+2, r25	; 0x02
    2d22:	89 83       	std	Y+1, r24	; 0x01
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	9a 81       	ldd	r25, Y+2	; 0x02
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	f1 f7       	brne	.-4      	; 0x2d28 <LCD_vidInit+0x10a8>
    2d2c:	9a 83       	std	Y+2, r25	; 0x02
    2d2e:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);

			InitFinshed=1;
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 22 01 	sts	0x0122, r24
static uint8 InitFinshed=0;
void LCD_vidInit(void)
{
	uint8 u8CntrLoc ;
	uint8 u8CmdLoc =0;
	for(u8CntrLoc = 0 ;u8CntrLoc < LCD_MAX_NUM ; u8CntrLoc++ )
    2d36:	de 01       	movw	r26, r28
    2d38:	a2 57       	subi	r26, 0x72	; 114
    2d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	e2 57       	subi	r30, 0x72	; 114
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	80 81       	ld	r24, Z
    2d44:	8f 5f       	subi	r24, 0xFF	; 255
    2d46:	8c 93       	st	X, r24
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e2 57       	subi	r30, 0x72	; 114
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 23       	and	r24, r24
    2d52:	11 f4       	brne	.+4      	; 0x2d58 <LCD_vidInit+0x10d8>
    2d54:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <LCD_vidInit+0x2e>
			InitFinshed=1;
		}


	}
}
    2d58:	c2 57       	subi	r28, 0x72	; 114
    2d5a:	df 4f       	sbci	r29, 0xFF	; 255
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	08 95       	ret

00002d70 <LCD_vidSendCmd>:

void LCD_vidSendCmd(uint8 u8LcdNumCpy , uint8 u8CmdCpy)
{
    2d70:	df 93       	push	r29
    2d72:	cf 93       	push	r28
    2d74:	00 d0       	rcall	.+0      	; 0x2d76 <LCD_vidSendCmd+0x6>
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	89 83       	std	Y+1, r24	; 0x01
    2d7c:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RS,0);
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01
    2d80:	28 2f       	mov	r18, r24
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	c9 01       	movw	r24, r18
    2d86:	88 0f       	add	r24, r24
    2d88:	99 1f       	adc	r25, r25
    2d8a:	82 0f       	add	r24, r18
    2d8c:	93 1f       	adc	r25, r19
    2d8e:	88 0f       	add	r24, r24
    2d90:	99 1f       	adc	r25, r25
    2d92:	88 0f       	add	r24, r24
    2d94:	99 1f       	adc	r25, r25
    2d96:	fc 01       	movw	r30, r24
    2d98:	e0 5f       	subi	r30, 0xF0	; 240
    2d9a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d9c:	80 81       	ld	r24, Z
    2d9e:	60 e0       	ldi	r22, 0x00	; 0
    2da0:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	PutOnBus(u8LcdNumCpy , u8CmdCpy);
    2da4:	89 81       	ldd	r24, Y+1	; 0x01
    2da6:	6a 81       	ldd	r22, Y+2	; 0x02
    2da8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <PutOnBus>

}
    2dac:	0f 90       	pop	r0
    2dae:	0f 90       	pop	r0
    2db0:	cf 91       	pop	r28
    2db2:	df 91       	pop	r29
    2db4:	08 95       	ret

00002db6 <LCD_vidWriteData>:

void LCD_vidWriteData(uint8 u8LcdNumCpy , uint8 u8DataCpy)
{
    2db6:	df 93       	push	r29
    2db8:	cf 93       	push	r28
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <LCD_vidWriteData+0x6>
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RS,1);
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	c9 01       	movw	r24, r18
    2dcc:	88 0f       	add	r24, r24
    2dce:	99 1f       	adc	r25, r25
    2dd0:	82 0f       	add	r24, r18
    2dd2:	93 1f       	adc	r25, r19
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	fc 01       	movw	r30, r24
    2dde:	e0 5f       	subi	r30, 0xF0	; 240
    2de0:	fe 4f       	sbci	r31, 0xFE	; 254
    2de2:	80 81       	ld	r24, Z
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	PutOnBus(u8LcdNumCpy , u8DataCpy);
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	6a 81       	ldd	r22, Y+2	; 0x02
    2dee:	0e 94 93 17 	call	0x2f26	; 0x2f26 <PutOnBus>

}
    2df2:	0f 90       	pop	r0
    2df4:	0f 90       	pop	r0
    2df6:	cf 91       	pop	r28
    2df8:	df 91       	pop	r29
    2dfa:	08 95       	ret

00002dfc <LCD_vidWriteDecimal>:

void LCD_vidWriteDecimal(uint8 u8LcdNumCpy , uint16 u8DecimalCpy)
{
    2dfc:	0f 93       	push	r16
    2dfe:	1f 93       	push	r17
    2e00:	df 93       	push	r29
    2e02:	cf 93       	push	r28
    2e04:	cd b7       	in	r28, 0x3d	; 61
    2e06:	de b7       	in	r29, 0x3e	; 62
    2e08:	28 97       	sbiw	r28, 0x08	; 8
    2e0a:	0f b6       	in	r0, 0x3f	; 63
    2e0c:	f8 94       	cli
    2e0e:	de bf       	out	0x3e, r29	; 62
    2e10:	0f be       	out	0x3f, r0	; 63
    2e12:	cd bf       	out	0x3d, r28	; 61
    2e14:	8e 83       	std	Y+6, r24	; 0x06
    2e16:	78 87       	std	Y+8, r23	; 0x08
    2e18:	6f 83       	std	Y+7, r22	; 0x07

	uint8 u8digit;
	uint8 u8DigCount=0;
    2e1a:	1c 82       	std	Y+4, r1	; 0x04
	uint16 u16Rescpy = u8DecimalCpy;
    2e1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e1e:	98 85       	ldd	r25, Y+8	; 0x08
    2e20:	9b 83       	std	Y+3, r25	; 0x03
    2e22:	8a 83       	std	Y+2, r24	; 0x02
    2e24:	0d c0       	rjmp	.+26     	; 0x2e40 <LCD_vidWriteDecimal+0x44>
	//NumOfDigit
	while(u8DecimalCpy != 0)
	{
		u8DecimalCpy /= 10;
    2e26:	8f 81       	ldd	r24, Y+7	; 0x07
    2e28:	98 85       	ldd	r25, Y+8	; 0x08
    2e2a:	2a e0       	ldi	r18, 0x0A	; 10
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	b9 01       	movw	r22, r18
    2e30:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__udivmodhi4>
    2e34:	cb 01       	movw	r24, r22
    2e36:	98 87       	std	Y+8, r25	; 0x08
    2e38:	8f 83       	std	Y+7, r24	; 0x07
		u8DigCount++;
    2e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e3c:	8f 5f       	subi	r24, 0xFF	; 255
    2e3e:	8c 83       	std	Y+4, r24	; 0x04

	uint8 u8digit;
	uint8 u8DigCount=0;
	uint16 u16Rescpy = u8DecimalCpy;
	//NumOfDigit
	while(u8DecimalCpy != 0)
    2e40:	8f 81       	ldd	r24, Y+7	; 0x07
    2e42:	98 85       	ldd	r25, Y+8	; 0x08
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	79 f7       	brne	.-34     	; 0x2e26 <LCD_vidWriteDecimal+0x2a>
		u8DecimalCpy /= 10;
		u8DigCount++;
	}

	//ConvertIntToChar
	for(uint8 u8CntrLoc = u8DigCount ;u8CntrLoc >= 1 ; u8CntrLoc--)
    2e48:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4a:	89 83       	std	Y+1, r24	; 0x01
    2e4c:	30 c0       	rjmp	.+96     	; 0x2eae <LCD_vidWriteDecimal+0xb2>
	{
		u8digit = (u16Rescpy / Pow(10 , u8CntrLoc-1 ));
    2e4e:	89 81       	ldd	r24, Y+1	; 0x01
    2e50:	98 2f       	mov	r25, r24
    2e52:	91 50       	subi	r25, 0x01	; 1
    2e54:	8a e0       	ldi	r24, 0x0A	; 10
    2e56:	69 2f       	mov	r22, r25
    2e58:	0e 94 9c 19 	call	0x3338	; 0x3338 <Pow>
    2e5c:	9c 01       	movw	r18, r24
    2e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e60:	9b 81       	ldd	r25, Y+3	; 0x03
    2e62:	b9 01       	movw	r22, r18
    2e64:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <__udivmodhi4>
    2e68:	cb 01       	movw	r24, r22
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
		LCD_vidWriteData( u8LcdNumCpy , u8digit + 0x30);
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	98 2f       	mov	r25, r24
    2e70:	90 5d       	subi	r25, 0xD0	; 208
    2e72:	8e 81       	ldd	r24, Y+6	; 0x06
    2e74:	69 2f       	mov	r22, r25
    2e76:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_vidWriteData>
		u16Rescpy -= u8digit * (Pow(10 , u8CntrLoc-1 ));
    2e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e7c:	08 2f       	mov	r16, r24
    2e7e:	10 e0       	ldi	r17, 0x00	; 0
    2e80:	89 81       	ldd	r24, Y+1	; 0x01
    2e82:	98 2f       	mov	r25, r24
    2e84:	91 50       	subi	r25, 0x01	; 1
    2e86:	8a e0       	ldi	r24, 0x0A	; 10
    2e88:	69 2f       	mov	r22, r25
    2e8a:	0e 94 9c 19 	call	0x3338	; 0x3338 <Pow>
    2e8e:	08 9f       	mul	r16, r24
    2e90:	90 01       	movw	r18, r0
    2e92:	09 9f       	mul	r16, r25
    2e94:	30 0d       	add	r19, r0
    2e96:	18 9f       	mul	r17, r24
    2e98:	30 0d       	add	r19, r0
    2e9a:	11 24       	eor	r1, r1
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea0:	82 1b       	sub	r24, r18
    2ea2:	93 0b       	sbc	r25, r19
    2ea4:	9b 83       	std	Y+3, r25	; 0x03
    2ea6:	8a 83       	std	Y+2, r24	; 0x02
		u8DecimalCpy /= 10;
		u8DigCount++;
	}

	//ConvertIntToChar
	for(uint8 u8CntrLoc = u8DigCount ;u8CntrLoc >= 1 ; u8CntrLoc--)
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	81 50       	subi	r24, 0x01	; 1
    2eac:	89 83       	std	Y+1, r24	; 0x01
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	88 23       	and	r24, r24
    2eb2:	69 f6       	brne	.-102    	; 0x2e4e <LCD_vidWriteDecimal+0x52>
		u8digit = (u16Rescpy / Pow(10 , u8CntrLoc-1 ));
		LCD_vidWriteData( u8LcdNumCpy , u8digit + 0x30);
		u16Rescpy -= u8digit * (Pow(10 , u8CntrLoc-1 ));
	}

}
    2eb4:	28 96       	adiw	r28, 0x08	; 8
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	cf 91       	pop	r28
    2ec2:	df 91       	pop	r29
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	08 95       	ret

00002eca <LCD_vidWriteString>:


void LCD_vidWriteString(uint8 u8LcdNumCpy , sint8* u8StringCpy)
{
    2eca:	df 93       	push	r29
    2ecc:	cf 93       	push	r28
    2ece:	00 d0       	rcall	.+0      	; 0x2ed0 <LCD_vidWriteString+0x6>
    2ed0:	00 d0       	rcall	.+0      	; 0x2ed2 <LCD_vidWriteString+0x8>
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	8a 83       	std	Y+2, r24	; 0x02
    2ed8:	7c 83       	std	Y+4, r23	; 0x04
    2eda:	6b 83       	std	Y+3, r22	; 0x03
	uint8 index=0;
    2edc:	19 82       	std	Y+1, r1	; 0x01
    2ede:	11 c0       	rjmp	.+34     	; 0x2f02 <LCD_vidWriteString+0x38>

	while(u8StringCpy[index] != '\0')
	{
		LCD_vidWriteData(u8LcdNumCpy , u8StringCpy[index]);
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	30 e0       	ldi	r19, 0x00	; 0
    2ee6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eea:	fc 01       	movw	r30, r24
    2eec:	e2 0f       	add	r30, r18
    2eee:	f3 1f       	adc	r31, r19
    2ef0:	80 81       	ld	r24, Z
    2ef2:	98 2f       	mov	r25, r24
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	69 2f       	mov	r22, r25
    2ef8:	0e 94 db 16 	call	0x2db6	; 0x2db6 <LCD_vidWriteData>
		index++;
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	8f 5f       	subi	r24, 0xFF	; 255
    2f00:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidWriteString(uint8 u8LcdNumCpy , sint8* u8StringCpy)
{
	uint8 index=0;

	while(u8StringCpy[index] != '\0')
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	e2 0f       	add	r30, r18
    2f10:	f3 1f       	adc	r31, r19
    2f12:	80 81       	ld	r24, Z
    2f14:	88 23       	and	r24, r24
    2f16:	21 f7       	brne	.-56     	; 0x2ee0 <LCD_vidWriteString+0x16>
	{
		LCD_vidWriteData(u8LcdNumCpy , u8StringCpy[index]);
		index++;
	}
}
    2f18:	0f 90       	pop	r0
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	cf 91       	pop	r28
    2f22:	df 91       	pop	r29
    2f24:	08 95       	ret

00002f26 <PutOnBus>:


static void PutOnBus(uint8 u8LcdNumCpy , uint8 u8CmdOrDataCpy)
{
    2f26:	df 93       	push	r29
    2f28:	cf 93       	push	r28
    2f2a:	cd b7       	in	r28, 0x3d	; 61
    2f2c:	de b7       	in	r29, 0x3e	; 62
    2f2e:	6f 97       	sbiw	r28, 0x1f	; 31
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	8e 8f       	std	Y+30, r24	; 0x1e
    2f3c:	6f 8f       	std	Y+31, r22	; 0x1f
	uint8 u8CntrLoc;
	// wr 0 , en 1
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8RW,0);
    2f3e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f40:	28 2f       	mov	r18, r24
    2f42:	30 e0       	ldi	r19, 0x00	; 0
    2f44:	c9 01       	movw	r24, r18
    2f46:	88 0f       	add	r24, r24
    2f48:	99 1f       	adc	r25, r25
    2f4a:	82 0f       	add	r24, r18
    2f4c:	93 1f       	adc	r25, r19
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	fc 01       	movw	r30, r24
    2f58:	ef 5e       	subi	r30, 0xEF	; 239
    2f5a:	fe 4f       	sbci	r31, 0xFE	; 254
    2f5c:	80 81       	ld	r24, Z
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
    2f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	c9 01       	movw	r24, r18
    2f6c:	88 0f       	add	r24, r24
    2f6e:	99 1f       	adc	r25, r25
    2f70:	82 0f       	add	r24, r18
    2f72:	93 1f       	adc	r25, r19
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	88 0f       	add	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	fc 01       	movw	r30, r24
    2f80:	e0 5f       	subi	r30, 0xF0	; 240
    2f82:	fe 4f       	sbci	r31, 0xFE	; 254
    2f84:	80 81       	ld	r24, Z
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	// mode 8
	if (LCD_astrCfg[u8LcdNumCpy].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
    2f8c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	c9 01       	movw	r24, r18
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	82 0f       	add	r24, r18
    2f9a:	93 1f       	adc	r25, r19
    2f9c:	88 0f       	add	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	88 0f       	add	r24, r24
    2fa2:	99 1f       	adc	r25, r25
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	e5 5e       	subi	r30, 0xE5	; 229
    2fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    2faa:	80 81       	ld	r24, Z
    2fac:	81 70       	andi	r24, 0x01	; 1
    2fae:	81 30       	cpi	r24, 0x01	; 1
    2fb0:	89 f5       	brne	.+98     	; 0x3014 <PutOnBus+0xee>
	{

		for (u8CntrLoc = 0 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    2fb2:	1d 8e       	std	Y+29, r1	; 0x1d
    2fb4:	2b c0       	rjmp	.+86     	; 0x300c <PutOnBus+0xe6>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    2fb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fb8:	28 2f       	mov	r18, r24
    2fba:	30 e0       	ldi	r19, 0x00	; 0
    2fbc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fbe:	48 2f       	mov	r20, r24
    2fc0:	50 e0       	ldi	r21, 0x00	; 0
    2fc2:	c9 01       	movw	r24, r18
    2fc4:	88 0f       	add	r24, r24
    2fc6:	99 1f       	adc	r25, r25
    2fc8:	82 0f       	add	r24, r18
    2fca:	93 1f       	adc	r25, r19
    2fcc:	88 0f       	add	r24, r24
    2fce:	99 1f       	adc	r25, r25
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	84 0f       	add	r24, r20
    2fd6:	95 1f       	adc	r25, r21
    2fd8:	fc 01       	movw	r30, r24
    2fda:	ed 5e       	subi	r30, 0xED	; 237
    2fdc:	fe 4f       	sbci	r31, 0xFE	; 254
    2fde:	40 81       	ld	r20, Z
    2fe0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe8:	88 2f       	mov	r24, r24
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	b9 01       	movw	r22, r18
    2fee:	02 c0       	rjmp	.+4      	; 0x2ff4 <PutOnBus+0xce>
    2ff0:	75 95       	asr	r23
    2ff2:	67 95       	ror	r22
    2ff4:	8a 95       	dec	r24
    2ff6:	e2 f7       	brpl	.-8      	; 0x2ff0 <PutOnBus+0xca>
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	98 2f       	mov	r25, r24
    2ffc:	91 70       	andi	r25, 0x01	; 1
    2ffe:	84 2f       	mov	r24, r20
    3000:	69 2f       	mov	r22, r25
    3002:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
	// mode 8
	if (LCD_astrCfg[u8LcdNumCpy].strLcdInternalCfg.u8Mode == LCD_8BIT_MODE)
	{

		for (u8CntrLoc = 0 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    3006:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3008:	8f 5f       	subi	r24, 0xFF	; 255
    300a:	8d 8f       	std	Y+29, r24	; 0x1d
    300c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    300e:	88 30       	cpi	r24, 0x08	; 8
    3010:	90 f2       	brcs	.-92     	; 0x2fb6 <PutOnBus+0x90>
    3012:	03 c1       	rjmp	.+518    	; 0x321a <PutOnBus+0x2f4>

	}
	else
	{
		/* 4 bit mod task 3la 7drtk*/
		for (u8CntrLoc = 4 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    3014:	84 e0       	ldi	r24, 0x04	; 4
    3016:	8d 8f       	std	Y+29, r24	; 0x1d
    3018:	2b c0       	rjmp	.+86     	; 0x3070 <PutOnBus+0x14a>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    301a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    301c:	28 2f       	mov	r18, r24
    301e:	30 e0       	ldi	r19, 0x00	; 0
    3020:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3022:	48 2f       	mov	r20, r24
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	c9 01       	movw	r24, r18
    3028:	88 0f       	add	r24, r24
    302a:	99 1f       	adc	r25, r25
    302c:	82 0f       	add	r24, r18
    302e:	93 1f       	adc	r25, r19
    3030:	88 0f       	add	r24, r24
    3032:	99 1f       	adc	r25, r25
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	84 0f       	add	r24, r20
    303a:	95 1f       	adc	r25, r21
    303c:	fc 01       	movw	r30, r24
    303e:	ed 5e       	subi	r30, 0xED	; 237
    3040:	fe 4f       	sbci	r31, 0xFE	; 254
    3042:	40 81       	ld	r20, Z
    3044:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3046:	28 2f       	mov	r18, r24
    3048:	30 e0       	ldi	r19, 0x00	; 0
    304a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    304c:	88 2f       	mov	r24, r24
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	b9 01       	movw	r22, r18
    3052:	02 c0       	rjmp	.+4      	; 0x3058 <PutOnBus+0x132>
    3054:	75 95       	asr	r23
    3056:	67 95       	ror	r22
    3058:	8a 95       	dec	r24
    305a:	e2 f7       	brpl	.-8      	; 0x3054 <PutOnBus+0x12e>
    305c:	cb 01       	movw	r24, r22
    305e:	98 2f       	mov	r25, r24
    3060:	91 70       	andi	r25, 0x01	; 1
    3062:	84 2f       	mov	r24, r20
    3064:	69 2f       	mov	r22, r25
    3066:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>

	}
	else
	{
		/* 4 bit mod task 3la 7drtk*/
		for (u8CntrLoc = 4 ; u8CntrLoc < 8 ;u8CntrLoc ++)
    306a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    306c:	8f 5f       	subi	r24, 0xFF	; 255
    306e:	8d 8f       	std	Y+29, r24	; 0x1d
    3070:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3072:	88 30       	cpi	r24, 0x08	; 8
    3074:	90 f2       	brcs	.-92     	; 0x301a <PutOnBus+0xf4>
		{
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
		}

		if(InitFinshed)
    3076:	80 91 22 01 	lds	r24, 0x0122
    307a:	88 23       	and	r24, r24
    307c:	09 f4       	brne	.+2      	; 0x3080 <PutOnBus+0x15a>
    307e:	cd c0       	rjmp	.+410    	; 0x321a <PutOnBus+0x2f4>
    3080:	80 e0       	ldi	r24, 0x00	; 0
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	a0 e8       	ldi	r26, 0x80	; 128
    3086:	bf e3       	ldi	r27, 0x3F	; 63
    3088:	89 8f       	std	Y+25, r24	; 0x19
    308a:	9a 8f       	std	Y+26, r25	; 0x1a
    308c:	ab 8f       	std	Y+27, r26	; 0x1b
    308e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3090:	69 8d       	ldd	r22, Y+25	; 0x19
    3092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	4a ef       	ldi	r20, 0xFA	; 250
    309e:	54 e4       	ldi	r21, 0x44	; 68
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	8d 8b       	std	Y+21, r24	; 0x15
    30aa:	9e 8b       	std	Y+22, r25	; 0x16
    30ac:	af 8b       	std	Y+23, r26	; 0x17
    30ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30b0:	6d 89       	ldd	r22, Y+21	; 0x15
    30b2:	7e 89       	ldd	r23, Y+22	; 0x16
    30b4:	8f 89       	ldd	r24, Y+23	; 0x17
    30b6:	98 8d       	ldd	r25, Y+24	; 0x18
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	40 e8       	ldi	r20, 0x80	; 128
    30be:	5f e3       	ldi	r21, 0x3F	; 63
    30c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30c4:	88 23       	and	r24, r24
    30c6:	2c f4       	brge	.+10     	; 0x30d2 <PutOnBus+0x1ac>
		__ticks = 1;
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	9c 8b       	std	Y+20, r25	; 0x14
    30ce:	8b 8b       	std	Y+19, r24	; 0x13
    30d0:	3f c0       	rjmp	.+126    	; 0x3150 <PutOnBus+0x22a>
	else if (__tmp > 65535)
    30d2:	6d 89       	ldd	r22, Y+21	; 0x15
    30d4:	7e 89       	ldd	r23, Y+22	; 0x16
    30d6:	8f 89       	ldd	r24, Y+23	; 0x17
    30d8:	98 8d       	ldd	r25, Y+24	; 0x18
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	3f ef       	ldi	r19, 0xFF	; 255
    30de:	4f e7       	ldi	r20, 0x7F	; 127
    30e0:	57 e4       	ldi	r21, 0x47	; 71
    30e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30e6:	18 16       	cp	r1, r24
    30e8:	4c f5       	brge	.+82     	; 0x313c <PutOnBus+0x216>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ea:	69 8d       	ldd	r22, Y+25	; 0x19
    30ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	bc 01       	movw	r22, r24
    3104:	cd 01       	movw	r24, r26
    3106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	9c 8b       	std	Y+20, r25	; 0x14
    3110:	8b 8b       	std	Y+19, r24	; 0x13
    3112:	0f c0       	rjmp	.+30     	; 0x3132 <PutOnBus+0x20c>
    3114:	88 ec       	ldi	r24, 0xC8	; 200
    3116:	90 e0       	ldi	r25, 0x00	; 0
    3118:	9a 8b       	std	Y+18, r25	; 0x12
    311a:	89 8b       	std	Y+17, r24	; 0x11
    311c:	89 89       	ldd	r24, Y+17	; 0x11
    311e:	9a 89       	ldd	r25, Y+18	; 0x12
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <PutOnBus+0x1fa>
    3124:	9a 8b       	std	Y+18, r25	; 0x12
    3126:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	8b 89       	ldd	r24, Y+19	; 0x13
    312a:	9c 89       	ldd	r25, Y+20	; 0x14
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9c 8b       	std	Y+20, r25	; 0x14
    3130:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3132:	8b 89       	ldd	r24, Y+19	; 0x13
    3134:	9c 89       	ldd	r25, Y+20	; 0x14
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	69 f7       	brne	.-38     	; 0x3114 <PutOnBus+0x1ee>
    313a:	14 c0       	rjmp	.+40     	; 0x3164 <PutOnBus+0x23e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    313c:	6d 89       	ldd	r22, Y+21	; 0x15
    313e:	7e 89       	ldd	r23, Y+22	; 0x16
    3140:	8f 89       	ldd	r24, Y+23	; 0x17
    3142:	98 8d       	ldd	r25, Y+24	; 0x18
    3144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	9c 8b       	std	Y+20, r25	; 0x14
    314e:	8b 8b       	std	Y+19, r24	; 0x13
    3150:	8b 89       	ldd	r24, Y+19	; 0x13
    3152:	9c 89       	ldd	r25, Y+20	; 0x14
    3154:	98 8b       	std	Y+16, r25	; 0x10
    3156:	8f 87       	std	Y+15, r24	; 0x0f
    3158:	8f 85       	ldd	r24, Y+15	; 0x0f
    315a:	98 89       	ldd	r25, Y+16	; 0x10
    315c:	01 97       	sbiw	r24, 0x01	; 1
    315e:	f1 f7       	brne	.-4      	; 0x315c <PutOnBus+0x236>
    3160:	98 8b       	std	Y+16, r25	; 0x10
    3162:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
    3164:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	c9 01       	movw	r24, r18
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	82 0f       	add	r24, r18
    3172:	93 1f       	adc	r25, r19
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	01 96       	adiw	r24, 0x01	; 1
    317a:	88 0f       	add	r24, r24
    317c:	99 1f       	adc	r25, r25
    317e:	fc 01       	movw	r30, r24
    3180:	e0 5f       	subi	r30, 0xF0	; 240
    3182:	fe 4f       	sbci	r31, 0xFE	; 254
    3184:	80 81       	ld	r24, Z
    3186:	60 e0       	ldi	r22, 0x00	; 0
    3188:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
			//_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
    318c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	c9 01       	movw	r24, r18
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	82 0f       	add	r24, r18
    319a:	93 1f       	adc	r25, r19
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	88 0f       	add	r24, r24
    31a4:	99 1f       	adc	r25, r25
    31a6:	fc 01       	movw	r30, r24
    31a8:	e0 5f       	subi	r30, 0xF0	; 240
    31aa:	fe 4f       	sbci	r31, 0xFE	; 254
    31ac:	80 81       	ld	r24, Z
    31ae:	61 e0       	ldi	r22, 0x01	; 1
    31b0:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
			for (u8CntrLoc = 0 ; u8CntrLoc < 4 ;u8CntrLoc ++)
    31b4:	1d 8e       	std	Y+29, r1	; 0x1d
    31b6:	2e c0       	rjmp	.+92     	; 0x3214 <PutOnBus+0x2ee>
			{
				DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.au8DataPins[u8CntrLoc+4] , GET_BIT(u8CmdOrDataCpy,u8CntrLoc));
    31b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31ba:	28 2f       	mov	r18, r24
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	ac 01       	movw	r20, r24
    31c6:	4c 5f       	subi	r20, 0xFC	; 252
    31c8:	5f 4f       	sbci	r21, 0xFF	; 255
    31ca:	c9 01       	movw	r24, r18
    31cc:	88 0f       	add	r24, r24
    31ce:	99 1f       	adc	r25, r25
    31d0:	82 0f       	add	r24, r18
    31d2:	93 1f       	adc	r25, r19
    31d4:	88 0f       	add	r24, r24
    31d6:	99 1f       	adc	r25, r25
    31d8:	88 0f       	add	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	84 0f       	add	r24, r20
    31de:	95 1f       	adc	r25, r21
    31e0:	fc 01       	movw	r30, r24
    31e2:	ed 5e       	subi	r30, 0xED	; 237
    31e4:	fe 4f       	sbci	r31, 0xFE	; 254
    31e6:	40 81       	ld	r20, Z
    31e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31f0:	88 2f       	mov	r24, r24
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	b9 01       	movw	r22, r18
    31f6:	02 c0       	rjmp	.+4      	; 0x31fc <PutOnBus+0x2d6>
    31f8:	75 95       	asr	r23
    31fa:	67 95       	ror	r22
    31fc:	8a 95       	dec	r24
    31fe:	e2 f7       	brpl	.-8      	; 0x31f8 <PutOnBus+0x2d2>
    3200:	cb 01       	movw	r24, r22
    3202:	98 2f       	mov	r25, r24
    3204:	91 70       	andi	r25, 0x01	; 1
    3206:	84 2f       	mov	r24, r20
    3208:	69 2f       	mov	r22, r25
    320a:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
		{
			_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
			//_delay_ms(1);
			DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,1);
			for (u8CntrLoc = 0 ; u8CntrLoc < 4 ;u8CntrLoc ++)
    320e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3210:	8f 5f       	subi	r24, 0xFF	; 255
    3212:	8d 8f       	std	Y+29, r24	; 0x1d
    3214:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3216:	84 30       	cpi	r24, 0x04	; 4
    3218:	78 f2       	brcs	.-98     	; 0x31b8 <PutOnBus+0x292>
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	90 e0       	ldi	r25, 0x00	; 0
    321e:	a0 e0       	ldi	r26, 0x00	; 0
    3220:	b0 e4       	ldi	r27, 0x40	; 64
    3222:	8b 87       	std	Y+11, r24	; 0x0b
    3224:	9c 87       	std	Y+12, r25	; 0x0c
    3226:	ad 87       	std	Y+13, r26	; 0x0d
    3228:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    322a:	6b 85       	ldd	r22, Y+11	; 0x0b
    322c:	7c 85       	ldd	r23, Y+12	; 0x0c
    322e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3230:	9e 85       	ldd	r25, Y+14	; 0x0e
    3232:	20 e0       	ldi	r18, 0x00	; 0
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	4a ef       	ldi	r20, 0xFA	; 250
    3238:	54 e4       	ldi	r21, 0x44	; 68
    323a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	8f 83       	std	Y+7, r24	; 0x07
    3244:	98 87       	std	Y+8, r25	; 0x08
    3246:	a9 87       	std	Y+9, r26	; 0x09
    3248:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    324a:	6f 81       	ldd	r22, Y+7	; 0x07
    324c:	78 85       	ldd	r23, Y+8	; 0x08
    324e:	89 85       	ldd	r24, Y+9	; 0x09
    3250:	9a 85       	ldd	r25, Y+10	; 0x0a
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	40 e8       	ldi	r20, 0x80	; 128
    3258:	5f e3       	ldi	r21, 0x3F	; 63
    325a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    325e:	88 23       	and	r24, r24
    3260:	2c f4       	brge	.+10     	; 0x326c <PutOnBus+0x346>
		__ticks = 1;
    3262:	81 e0       	ldi	r24, 0x01	; 1
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	9e 83       	std	Y+6, r25	; 0x06
    3268:	8d 83       	std	Y+5, r24	; 0x05
    326a:	3f c0       	rjmp	.+126    	; 0x32ea <PutOnBus+0x3c4>
	else if (__tmp > 65535)
    326c:	6f 81       	ldd	r22, Y+7	; 0x07
    326e:	78 85       	ldd	r23, Y+8	; 0x08
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	9a 85       	ldd	r25, Y+10	; 0x0a
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	3f ef       	ldi	r19, 0xFF	; 255
    3278:	4f e7       	ldi	r20, 0x7F	; 127
    327a:	57 e4       	ldi	r21, 0x47	; 71
    327c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3280:	18 16       	cp	r1, r24
    3282:	4c f5       	brge	.+82     	; 0x32d6 <PutOnBus+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3284:	6b 85       	ldd	r22, Y+11	; 0x0b
    3286:	7c 85       	ldd	r23, Y+12	; 0x0c
    3288:	8d 85       	ldd	r24, Y+13	; 0x0d
    328a:	9e 85       	ldd	r25, Y+14	; 0x0e
    328c:	20 e0       	ldi	r18, 0x00	; 0
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e2       	ldi	r20, 0x20	; 32
    3292:	51 e4       	ldi	r21, 0x41	; 65
    3294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3298:	dc 01       	movw	r26, r24
    329a:	cb 01       	movw	r24, r22
    329c:	bc 01       	movw	r22, r24
    329e:	cd 01       	movw	r24, r26
    32a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a4:	dc 01       	movw	r26, r24
    32a6:	cb 01       	movw	r24, r22
    32a8:	9e 83       	std	Y+6, r25	; 0x06
    32aa:	8d 83       	std	Y+5, r24	; 0x05
    32ac:	0f c0       	rjmp	.+30     	; 0x32cc <PutOnBus+0x3a6>
    32ae:	88 ec       	ldi	r24, 0xC8	; 200
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	9c 83       	std	Y+4, r25	; 0x04
    32b4:	8b 83       	std	Y+3, r24	; 0x03
    32b6:	8b 81       	ldd	r24, Y+3	; 0x03
    32b8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ba:	01 97       	sbiw	r24, 0x01	; 1
    32bc:	f1 f7       	brne	.-4      	; 0x32ba <PutOnBus+0x394>
    32be:	9c 83       	std	Y+4, r25	; 0x04
    32c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	01 97       	sbiw	r24, 0x01	; 1
    32c8:	9e 83       	std	Y+6, r25	; 0x06
    32ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32cc:	8d 81       	ldd	r24, Y+5	; 0x05
    32ce:	9e 81       	ldd	r25, Y+6	; 0x06
    32d0:	00 97       	sbiw	r24, 0x00	; 0
    32d2:	69 f7       	brne	.-38     	; 0x32ae <PutOnBus+0x388>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <PutOnBus+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32d6:	6f 81       	ldd	r22, Y+7	; 0x07
    32d8:	78 85       	ldd	r23, Y+8	; 0x08
    32da:	89 85       	ldd	r24, Y+9	; 0x09
    32dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    32de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32e2:	dc 01       	movw	r26, r24
    32e4:	cb 01       	movw	r24, r22
    32e6:	9e 83       	std	Y+6, r25	; 0x06
    32e8:	8d 83       	std	Y+5, r24	; 0x05
    32ea:	8d 81       	ldd	r24, Y+5	; 0x05
    32ec:	9e 81       	ldd	r25, Y+6	; 0x06
    32ee:	9a 83       	std	Y+2, r25	; 0x02
    32f0:	89 83       	std	Y+1, r24	; 0x01
    32f2:	89 81       	ldd	r24, Y+1	; 0x01
    32f4:	9a 81       	ldd	r25, Y+2	; 0x02
    32f6:	01 97       	sbiw	r24, 0x01	; 1
    32f8:	f1 f7       	brne	.-4      	; 0x32f6 <PutOnBus+0x3d0>
    32fa:	9a 83       	std	Y+2, r25	; 0x02
    32fc:	89 83       	std	Y+1, r24	; 0x01



	// en 0
	_delay_ms(2);
	DIO_enuSetPinValue(LCD_astrCfg[u8LcdNumCpy].strLcdPinsCfg.u8EN,0);
    32fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	c9 01       	movw	r24, r18
    3306:	88 0f       	add	r24, r24
    3308:	99 1f       	adc	r25, r25
    330a:	82 0f       	add	r24, r18
    330c:	93 1f       	adc	r25, r19
    330e:	88 0f       	add	r24, r24
    3310:	99 1f       	adc	r25, r25
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	88 0f       	add	r24, r24
    3316:	99 1f       	adc	r25, r25
    3318:	fc 01       	movw	r30, r24
    331a:	e0 5f       	subi	r30, 0xF0	; 240
    331c:	fe 4f       	sbci	r31, 0xFE	; 254
    331e:	80 81       	ld	r24, Z
    3320:	60 e0       	ldi	r22, 0x00	; 0
    3322:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
	//_delay_ms(2);

}
    3326:	6f 96       	adiw	r28, 0x1f	; 31
    3328:	0f b6       	in	r0, 0x3f	; 63
    332a:	f8 94       	cli
    332c:	de bf       	out	0x3e, r29	; 62
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	cd bf       	out	0x3d, r28	; 61
    3332:	cf 91       	pop	r28
    3334:	df 91       	pop	r29
    3336:	08 95       	ret

00003338 <Pow>:

uint16 Pow(uint8 u16Rescpy , uint8 u8Bascpy)
{
    3338:	df 93       	push	r29
    333a:	cf 93       	push	r28
    333c:	00 d0       	rcall	.+0      	; 0x333e <Pow+0x6>
    333e:	00 d0       	rcall	.+0      	; 0x3340 <Pow+0x8>
    3340:	0f 92       	push	r0
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	8c 83       	std	Y+4, r24	; 0x04
    3348:	6d 83       	std	Y+5, r22	; 0x05
	uint16 u16POW = 1;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	90 e0       	ldi	r25, 0x00	; 0
    334e:	9b 83       	std	Y+3, r25	; 0x03
    3350:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 u8CntrLoc=1 ; u8CntrLoc <= u8Bascpy ; u8CntrLoc++)
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	89 83       	std	Y+1, r24	; 0x01
    3356:	12 c0       	rjmp	.+36     	; 0x337c <Pow+0x44>
	{
		u16POW *= u16Rescpy;
    3358:	8c 81       	ldd	r24, Y+4	; 0x04
    335a:	28 2f       	mov	r18, r24
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	8a 81       	ldd	r24, Y+2	; 0x02
    3360:	9b 81       	ldd	r25, Y+3	; 0x03
    3362:	ac 01       	movw	r20, r24
    3364:	42 9f       	mul	r20, r18
    3366:	c0 01       	movw	r24, r0
    3368:	43 9f       	mul	r20, r19
    336a:	90 0d       	add	r25, r0
    336c:	52 9f       	mul	r21, r18
    336e:	90 0d       	add	r25, r0
    3370:	11 24       	eor	r1, r1
    3372:	9b 83       	std	Y+3, r25	; 0x03
    3374:	8a 83       	std	Y+2, r24	; 0x02
}

uint16 Pow(uint8 u16Rescpy , uint8 u8Bascpy)
{
	uint16 u16POW = 1;
	for(uint8 u8CntrLoc=1 ; u8CntrLoc <= u8Bascpy ; u8CntrLoc++)
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	8f 5f       	subi	r24, 0xFF	; 255
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	99 81       	ldd	r25, Y+1	; 0x01
    337e:	8d 81       	ldd	r24, Y+5	; 0x05
    3380:	89 17       	cp	r24, r25
    3382:	50 f7       	brcc	.-44     	; 0x3358 <Pow+0x20>
	{
		u16POW *= u16Rescpy;
	}
	return u16POW;
    3384:	8a 81       	ldd	r24, Y+2	; 0x02
    3386:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	0f 90       	pop	r0
    338e:	0f 90       	pop	r0
    3390:	0f 90       	pop	r0
    3392:	cf 91       	pop	r28
    3394:	df 91       	pop	r29
    3396:	08 95       	ret

00003398 <rain_read>:
 *          (E_OK) : The function done successfully
 *          (E_NOT_OK) : The function has issue to
 */

void rain_read(uint8 u8rainNumCpy, uint8 u8pinNum , rain_t *rain_status)
{
    3398:	df 93       	push	r29
    339a:	cf 93       	push	r28
    339c:	00 d0       	rcall	.+0      	; 0x339e <rain_read+0x6>
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <rain_read+0x8>
    33a0:	0f 92       	push	r0
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	8a 83       	std	Y+2, r24	; 0x02
    33a8:	6b 83       	std	Y+3, r22	; 0x03
    33aa:	5d 83       	std	Y+5, r21	; 0x05
    33ac:	4c 83       	std	Y+4, r20	; 0x04

		uint8 logic=0;
    33ae:	19 82       	std	Y+1, r1	; 0x01

        DIO_enuReadPinValue (u8pinNum, &logic);
    33b0:	8b 81       	ldd	r24, Y+3	; 0x03
    33b2:	9e 01       	movw	r18, r28
    33b4:	2f 5f       	subi	r18, 0xFF	; 255
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	b9 01       	movw	r22, r18
    33ba:	0e 94 8e 0a 	call	0x151c	; 0x151c <DIO_enuReadPinValue>
        if (logic == RAIN_HIGH)
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	81 30       	cpi	r24, 0x01	; 1
    33c2:	29 f4       	brne	.+10     	; 0x33ce <rain_read+0x36>
        {
            *rain_status = Is_rain;
    33c4:	ec 81       	ldd	r30, Y+4	; 0x04
    33c6:	fd 81       	ldd	r31, Y+5	; 0x05
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	80 83       	st	Z, r24
    33cc:	03 c0       	rjmp	.+6      	; 0x33d4 <rain_read+0x3c>
        }
        else
        {
            *rain_status = No_rain;
    33ce:	ec 81       	ldd	r30, Y+4	; 0x04
    33d0:	fd 81       	ldd	r31, Y+5	; 0x05
    33d2:	10 82       	st	Z, r1
        }
}
    33d4:	0f 90       	pop	r0
    33d6:	0f 90       	pop	r0
    33d8:	0f 90       	pop	r0
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	cf 91       	pop	r28
    33e0:	df 91       	pop	r29
    33e2:	08 95       	ret

000033e4 <servo_init>:

#include <util/delay.h>
#include "SERVO.h"

void servo_init(void)
{
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	6c 97       	sbiw	r28, 0x1c	; 28
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61

	DIO_enuSetPinValue(9 , 1);
    33f8:	89 e0       	ldi	r24, 0x09	; 9
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	61 e0       	ldi	r22, 0x01	; 1
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    3404:	80 e0       	ldi	r24, 0x00	; 0
    3406:	90 e0       	ldi	r25, 0x00	; 0
    3408:	a0 ec       	ldi	r26, 0xC0	; 192
    340a:	bf e3       	ldi	r27, 0x3F	; 63
    340c:	89 8f       	std	Y+25, r24	; 0x19
    340e:	9a 8f       	std	Y+26, r25	; 0x1a
    3410:	ab 8f       	std	Y+27, r26	; 0x1b
    3412:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3414:	69 8d       	ldd	r22, Y+25	; 0x19
    3416:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3418:	8b 8d       	ldd	r24, Y+27	; 0x1b
    341a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    341c:	20 e0       	ldi	r18, 0x00	; 0
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	4a ef       	ldi	r20, 0xFA	; 250
    3422:	54 e4       	ldi	r21, 0x44	; 68
    3424:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3428:	dc 01       	movw	r26, r24
    342a:	cb 01       	movw	r24, r22
    342c:	8d 8b       	std	Y+21, r24	; 0x15
    342e:	9e 8b       	std	Y+22, r25	; 0x16
    3430:	af 8b       	std	Y+23, r26	; 0x17
    3432:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3434:	6d 89       	ldd	r22, Y+21	; 0x15
    3436:	7e 89       	ldd	r23, Y+22	; 0x16
    3438:	8f 89       	ldd	r24, Y+23	; 0x17
    343a:	98 8d       	ldd	r25, Y+24	; 0x18
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	40 e8       	ldi	r20, 0x80	; 128
    3442:	5f e3       	ldi	r21, 0x3F	; 63
    3444:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3448:	88 23       	and	r24, r24
    344a:	2c f4       	brge	.+10     	; 0x3456 <servo_init+0x72>
		__ticks = 1;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	90 e0       	ldi	r25, 0x00	; 0
    3450:	9c 8b       	std	Y+20, r25	; 0x14
    3452:	8b 8b       	std	Y+19, r24	; 0x13
    3454:	3f c0       	rjmp	.+126    	; 0x34d4 <servo_init+0xf0>
	else if (__tmp > 65535)
    3456:	6d 89       	ldd	r22, Y+21	; 0x15
    3458:	7e 89       	ldd	r23, Y+22	; 0x16
    345a:	8f 89       	ldd	r24, Y+23	; 0x17
    345c:	98 8d       	ldd	r25, Y+24	; 0x18
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	3f ef       	ldi	r19, 0xFF	; 255
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	57 e4       	ldi	r21, 0x47	; 71
    3466:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    346a:	18 16       	cp	r1, r24
    346c:	4c f5       	brge	.+82     	; 0x34c0 <servo_init+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    346e:	69 8d       	ldd	r22, Y+25	; 0x19
    3470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3476:	20 e0       	ldi	r18, 0x00	; 0
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	40 e2       	ldi	r20, 0x20	; 32
    347c:	51 e4       	ldi	r21, 0x41	; 65
    347e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3482:	dc 01       	movw	r26, r24
    3484:	cb 01       	movw	r24, r22
    3486:	bc 01       	movw	r22, r24
    3488:	cd 01       	movw	r24, r26
    348a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	9c 8b       	std	Y+20, r25	; 0x14
    3494:	8b 8b       	std	Y+19, r24	; 0x13
    3496:	0f c0       	rjmp	.+30     	; 0x34b6 <servo_init+0xd2>
    3498:	88 ec       	ldi	r24, 0xC8	; 200
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	9a 8b       	std	Y+18, r25	; 0x12
    349e:	89 8b       	std	Y+17, r24	; 0x11
    34a0:	89 89       	ldd	r24, Y+17	; 0x11
    34a2:	9a 89       	ldd	r25, Y+18	; 0x12
    34a4:	01 97       	sbiw	r24, 0x01	; 1
    34a6:	f1 f7       	brne	.-4      	; 0x34a4 <servo_init+0xc0>
    34a8:	9a 8b       	std	Y+18, r25	; 0x12
    34aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ac:	8b 89       	ldd	r24, Y+19	; 0x13
    34ae:	9c 89       	ldd	r25, Y+20	; 0x14
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	9c 8b       	std	Y+20, r25	; 0x14
    34b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34b6:	8b 89       	ldd	r24, Y+19	; 0x13
    34b8:	9c 89       	ldd	r25, Y+20	; 0x14
    34ba:	00 97       	sbiw	r24, 0x00	; 0
    34bc:	69 f7       	brne	.-38     	; 0x3498 <servo_init+0xb4>
    34be:	14 c0       	rjmp	.+40     	; 0x34e8 <servo_init+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34c0:	6d 89       	ldd	r22, Y+21	; 0x15
    34c2:	7e 89       	ldd	r23, Y+22	; 0x16
    34c4:	8f 89       	ldd	r24, Y+23	; 0x17
    34c6:	98 8d       	ldd	r25, Y+24	; 0x18
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	8b 89       	ldd	r24, Y+19	; 0x13
    34d6:	9c 89       	ldd	r25, Y+20	; 0x14
    34d8:	98 8b       	std	Y+16, r25	; 0x10
    34da:	8f 87       	std	Y+15, r24	; 0x0f
    34dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    34de:	98 89       	ldd	r25, Y+16	; 0x10
    34e0:	01 97       	sbiw	r24, 0x01	; 1
    34e2:	f1 f7       	brne	.-4      	; 0x34e0 <servo_init+0xfc>
    34e4:	98 8b       	std	Y+16, r25	; 0x10
    34e6:	8f 87       	std	Y+15, r24	; 0x0f
  // Delay for the high state duration (0.01 seconds)
    _delay_ms(1.5);
  // Set the output pin low
    DIO_enuSetPinValue(9 , 0);
    34e8:	89 e0       	ldi	r24, 0x09	; 9
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    34f4:	80 e0       	ldi	r24, 0x00	; 0
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	a4 e9       	ldi	r26, 0x94	; 148
    34fa:	b1 e4       	ldi	r27, 0x41	; 65
    34fc:	8b 87       	std	Y+11, r24	; 0x0b
    34fe:	9c 87       	std	Y+12, r25	; 0x0c
    3500:	ad 87       	std	Y+13, r26	; 0x0d
    3502:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3504:	6b 85       	ldd	r22, Y+11	; 0x0b
    3506:	7c 85       	ldd	r23, Y+12	; 0x0c
    3508:	8d 85       	ldd	r24, Y+13	; 0x0d
    350a:	9e 85       	ldd	r25, Y+14	; 0x0e
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4a ef       	ldi	r20, 0xFA	; 250
    3512:	54 e4       	ldi	r21, 0x44	; 68
    3514:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8f 83       	std	Y+7, r24	; 0x07
    351e:	98 87       	std	Y+8, r25	; 0x08
    3520:	a9 87       	std	Y+9, r26	; 0x09
    3522:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3524:	6f 81       	ldd	r22, Y+7	; 0x07
    3526:	78 85       	ldd	r23, Y+8	; 0x08
    3528:	89 85       	ldd	r24, Y+9	; 0x09
    352a:	9a 85       	ldd	r25, Y+10	; 0x0a
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	40 e8       	ldi	r20, 0x80	; 128
    3532:	5f e3       	ldi	r21, 0x3F	; 63
    3534:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3538:	88 23       	and	r24, r24
    353a:	2c f4       	brge	.+10     	; 0x3546 <servo_init+0x162>
		__ticks = 1;
    353c:	81 e0       	ldi	r24, 0x01	; 1
    353e:	90 e0       	ldi	r25, 0x00	; 0
    3540:	9e 83       	std	Y+6, r25	; 0x06
    3542:	8d 83       	std	Y+5, r24	; 0x05
    3544:	3f c0       	rjmp	.+126    	; 0x35c4 <servo_init+0x1e0>
	else if (__tmp > 65535)
    3546:	6f 81       	ldd	r22, Y+7	; 0x07
    3548:	78 85       	ldd	r23, Y+8	; 0x08
    354a:	89 85       	ldd	r24, Y+9	; 0x09
    354c:	9a 85       	ldd	r25, Y+10	; 0x0a
    354e:	20 e0       	ldi	r18, 0x00	; 0
    3550:	3f ef       	ldi	r19, 0xFF	; 255
    3552:	4f e7       	ldi	r20, 0x7F	; 127
    3554:	57 e4       	ldi	r21, 0x47	; 71
    3556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    355a:	18 16       	cp	r1, r24
    355c:	4c f5       	brge	.+82     	; 0x35b0 <servo_init+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    355e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3560:	7c 85       	ldd	r23, Y+12	; 0x0c
    3562:	8d 85       	ldd	r24, Y+13	; 0x0d
    3564:	9e 85       	ldd	r25, Y+14	; 0x0e
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e2       	ldi	r20, 0x20	; 32
    356c:	51 e4       	ldi	r21, 0x41	; 65
    356e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	bc 01       	movw	r22, r24
    3578:	cd 01       	movw	r24, r26
    357a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    357e:	dc 01       	movw	r26, r24
    3580:	cb 01       	movw	r24, r22
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <servo_init+0x1c2>
    3588:	88 ec       	ldi	r24, 0xC8	; 200
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	9c 83       	std	Y+4, r25	; 0x04
    358e:	8b 83       	std	Y+3, r24	; 0x03
    3590:	8b 81       	ldd	r24, Y+3	; 0x03
    3592:	9c 81       	ldd	r25, Y+4	; 0x04
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <servo_init+0x1b0>
    3598:	9c 83       	std	Y+4, r25	; 0x04
    359a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    359c:	8d 81       	ldd	r24, Y+5	; 0x05
    359e:	9e 81       	ldd	r25, Y+6	; 0x06
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35a6:	8d 81       	ldd	r24, Y+5	; 0x05
    35a8:	9e 81       	ldd	r25, Y+6	; 0x06
    35aa:	00 97       	sbiw	r24, 0x00	; 0
    35ac:	69 f7       	brne	.-38     	; 0x3588 <servo_init+0x1a4>
    35ae:	14 c0       	rjmp	.+40     	; 0x35d8 <servo_init+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b0:	6f 81       	ldd	r22, Y+7	; 0x07
    35b2:	78 85       	ldd	r23, Y+8	; 0x08
    35b4:	89 85       	ldd	r24, Y+9	; 0x09
    35b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35bc:	dc 01       	movw	r26, r24
    35be:	cb 01       	movw	r24, r22
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	8d 81       	ldd	r24, Y+5	; 0x05
    35c6:	9e 81       	ldd	r25, Y+6	; 0x06
    35c8:	9a 83       	std	Y+2, r25	; 0x02
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	9a 81       	ldd	r25, Y+2	; 0x02
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <servo_init+0x1ec>
    35d4:	9a 83       	std	Y+2, r25	; 0x02
    35d6:	89 83       	std	Y+1, r24	; 0x01
  // Delay for the low state duration (0.01 seconds)
    _delay_ms(18.5);

}
    35d8:	6c 96       	adiw	r28, 0x1c	; 28
    35da:	0f b6       	in	r0, 0x3f	; 63
    35dc:	f8 94       	cli
    35de:	de bf       	out	0x3e, r29	; 62
    35e0:	0f be       	out	0x3f, r0	; 63
    35e2:	cd bf       	out	0x3d, r28	; 61
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <servo_ON>:

void servo_ON(void)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
    35f2:	6c 97       	sbiw	r28, 0x1c	; 28
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
	// Set the output pin high
	DIO_enuSetPinValue(9 , 1);
    35fe:	89 e0       	ldi	r24, 0x09	; 9
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	61 e0       	ldi	r22, 0x01	; 1
    3604:	70 e0       	ldi	r23, 0x00	; 0
    3606:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	a0 e0       	ldi	r26, 0x00	; 0
    3610:	b0 e4       	ldi	r27, 0x40	; 64
    3612:	89 8f       	std	Y+25, r24	; 0x19
    3614:	9a 8f       	std	Y+26, r25	; 0x1a
    3616:	ab 8f       	std	Y+27, r26	; 0x1b
    3618:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    361a:	69 8d       	ldd	r22, Y+25	; 0x19
    361c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    361e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3620:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3622:	20 e0       	ldi	r18, 0x00	; 0
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	4a ef       	ldi	r20, 0xFA	; 250
    3628:	54 e4       	ldi	r21, 0x44	; 68
    362a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362e:	dc 01       	movw	r26, r24
    3630:	cb 01       	movw	r24, r22
    3632:	8d 8b       	std	Y+21, r24	; 0x15
    3634:	9e 8b       	std	Y+22, r25	; 0x16
    3636:	af 8b       	std	Y+23, r26	; 0x17
    3638:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    363a:	6d 89       	ldd	r22, Y+21	; 0x15
    363c:	7e 89       	ldd	r23, Y+22	; 0x16
    363e:	8f 89       	ldd	r24, Y+23	; 0x17
    3640:	98 8d       	ldd	r25, Y+24	; 0x18
    3642:	20 e0       	ldi	r18, 0x00	; 0
    3644:	30 e0       	ldi	r19, 0x00	; 0
    3646:	40 e8       	ldi	r20, 0x80	; 128
    3648:	5f e3       	ldi	r21, 0x3F	; 63
    364a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    364e:	88 23       	and	r24, r24
    3650:	2c f4       	brge	.+10     	; 0x365c <servo_ON+0x72>
		__ticks = 1;
    3652:	81 e0       	ldi	r24, 0x01	; 1
    3654:	90 e0       	ldi	r25, 0x00	; 0
    3656:	9c 8b       	std	Y+20, r25	; 0x14
    3658:	8b 8b       	std	Y+19, r24	; 0x13
    365a:	3f c0       	rjmp	.+126    	; 0x36da <servo_ON+0xf0>
	else if (__tmp > 65535)
    365c:	6d 89       	ldd	r22, Y+21	; 0x15
    365e:	7e 89       	ldd	r23, Y+22	; 0x16
    3660:	8f 89       	ldd	r24, Y+23	; 0x17
    3662:	98 8d       	ldd	r25, Y+24	; 0x18
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	3f ef       	ldi	r19, 0xFF	; 255
    3668:	4f e7       	ldi	r20, 0x7F	; 127
    366a:	57 e4       	ldi	r21, 0x47	; 71
    366c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3670:	18 16       	cp	r1, r24
    3672:	4c f5       	brge	.+82     	; 0x36c6 <servo_ON+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3674:	69 8d       	ldd	r22, Y+25	; 0x19
    3676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    367a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    367c:	20 e0       	ldi	r18, 0x00	; 0
    367e:	30 e0       	ldi	r19, 0x00	; 0
    3680:	40 e2       	ldi	r20, 0x20	; 32
    3682:	51 e4       	ldi	r21, 0x41	; 65
    3684:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	bc 01       	movw	r22, r24
    368e:	cd 01       	movw	r24, r26
    3690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3694:	dc 01       	movw	r26, r24
    3696:	cb 01       	movw	r24, r22
    3698:	9c 8b       	std	Y+20, r25	; 0x14
    369a:	8b 8b       	std	Y+19, r24	; 0x13
    369c:	0f c0       	rjmp	.+30     	; 0x36bc <servo_ON+0xd2>
    369e:	88 ec       	ldi	r24, 0xC8	; 200
    36a0:	90 e0       	ldi	r25, 0x00	; 0
    36a2:	9a 8b       	std	Y+18, r25	; 0x12
    36a4:	89 8b       	std	Y+17, r24	; 0x11
    36a6:	89 89       	ldd	r24, Y+17	; 0x11
    36a8:	9a 89       	ldd	r25, Y+18	; 0x12
    36aa:	01 97       	sbiw	r24, 0x01	; 1
    36ac:	f1 f7       	brne	.-4      	; 0x36aa <servo_ON+0xc0>
    36ae:	9a 8b       	std	Y+18, r25	; 0x12
    36b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b2:	8b 89       	ldd	r24, Y+19	; 0x13
    36b4:	9c 89       	ldd	r25, Y+20	; 0x14
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	9c 8b       	std	Y+20, r25	; 0x14
    36ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36bc:	8b 89       	ldd	r24, Y+19	; 0x13
    36be:	9c 89       	ldd	r25, Y+20	; 0x14
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	69 f7       	brne	.-38     	; 0x369e <servo_ON+0xb4>
    36c4:	14 c0       	rjmp	.+40     	; 0x36ee <servo_ON+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c6:	6d 89       	ldd	r22, Y+21	; 0x15
    36c8:	7e 89       	ldd	r23, Y+22	; 0x16
    36ca:	8f 89       	ldd	r24, Y+23	; 0x17
    36cc:	98 8d       	ldd	r25, Y+24	; 0x18
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9c 8b       	std	Y+20, r25	; 0x14
    36d8:	8b 8b       	std	Y+19, r24	; 0x13
    36da:	8b 89       	ldd	r24, Y+19	; 0x13
    36dc:	9c 89       	ldd	r25, Y+20	; 0x14
    36de:	98 8b       	std	Y+16, r25	; 0x10
    36e0:	8f 87       	std	Y+15, r24	; 0x0f
    36e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e4:	98 89       	ldd	r25, Y+16	; 0x10
    36e6:	01 97       	sbiw	r24, 0x01	; 1
    36e8:	f1 f7       	brne	.-4      	; 0x36e6 <servo_ON+0xfc>
    36ea:	98 8b       	std	Y+16, r25	; 0x10
    36ec:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay for the high state duration (0.01 seconds)
	_delay_ms(2);   //+90
	// Set the output pin low
	DIO_enuSetPinValue(9 , 0);
    36ee:	89 e0       	ldi	r24, 0x09	; 9
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	70 e0       	ldi	r23, 0x00	; 0
    36f6:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e9       	ldi	r26, 0x90	; 144
    3700:	b1 e4       	ldi	r27, 0x41	; 65
    3702:	8b 87       	std	Y+11, r24	; 0x0b
    3704:	9c 87       	std	Y+12, r25	; 0x0c
    3706:	ad 87       	std	Y+13, r26	; 0x0d
    3708:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	6b 85       	ldd	r22, Y+11	; 0x0b
    370c:	7c 85       	ldd	r23, Y+12	; 0x0c
    370e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3710:	9e 85       	ldd	r25, Y+14	; 0x0e
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8f 83       	std	Y+7, r24	; 0x07
    3724:	98 87       	std	Y+8, r25	; 0x08
    3726:	a9 87       	std	Y+9, r26	; 0x09
    3728:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    372a:	6f 81       	ldd	r22, Y+7	; 0x07
    372c:	78 85       	ldd	r23, Y+8	; 0x08
    372e:	89 85       	ldd	r24, Y+9	; 0x09
    3730:	9a 85       	ldd	r25, Y+10	; 0x0a
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <servo_ON+0x162>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9e 83       	std	Y+6, r25	; 0x06
    3748:	8d 83       	std	Y+5, r24	; 0x05
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <servo_ON+0x1e0>
	else if (__tmp > 65535)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <servo_ON+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3764:	6b 85       	ldd	r22, Y+11	; 0x0b
    3766:	7c 85       	ldd	r23, Y+12	; 0x0c
    3768:	8d 85       	ldd	r24, Y+13	; 0x0d
    376a:	9e 85       	ldd	r25, Y+14	; 0x0e
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9e 83       	std	Y+6, r25	; 0x06
    378a:	8d 83       	std	Y+5, r24	; 0x05
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <servo_ON+0x1c2>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9c 83       	std	Y+4, r25	; 0x04
    3794:	8b 83       	std	Y+3, r24	; 0x03
    3796:	8b 81       	ldd	r24, Y+3	; 0x03
    3798:	9c 81       	ldd	r25, Y+4	; 0x04
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <servo_ON+0x1b0>
    379e:	9c 83       	std	Y+4, r25	; 0x04
    37a0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	8d 81       	ldd	r24, Y+5	; 0x05
    37a4:	9e 81       	ldd	r25, Y+6	; 0x06
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9e 83       	std	Y+6, r25	; 0x06
    37aa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ac:	8d 81       	ldd	r24, Y+5	; 0x05
    37ae:	9e 81       	ldd	r25, Y+6	; 0x06
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <servo_ON+0x1a4>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <servo_ON+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	6f 81       	ldd	r22, Y+7	; 0x07
    37b8:	78 85       	ldd	r23, Y+8	; 0x08
    37ba:	89 85       	ldd	r24, Y+9	; 0x09
    37bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	8d 81       	ldd	r24, Y+5	; 0x05
    37cc:	9e 81       	ldd	r25, Y+6	; 0x06
    37ce:	9a 83       	std	Y+2, r25	; 0x02
    37d0:	89 83       	std	Y+1, r24	; 0x01
    37d2:	89 81       	ldd	r24, Y+1	; 0x01
    37d4:	9a 81       	ldd	r25, Y+2	; 0x02
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <servo_ON+0x1ec>
    37da:	9a 83       	std	Y+2, r25	; 0x02
    37dc:	89 83       	std	Y+1, r24	; 0x01
	// Delay for the low state duration (0.01 seconds)
	_delay_ms(18);

}
    37de:	6c 96       	adiw	r28, 0x1c	; 28
    37e0:	0f b6       	in	r0, 0x3f	; 63
    37e2:	f8 94       	cli
    37e4:	de bf       	out	0x3e, r29	; 62
    37e6:	0f be       	out	0x3f, r0	; 63
    37e8:	cd bf       	out	0x3d, r28	; 61
    37ea:	cf 91       	pop	r28
    37ec:	df 91       	pop	r29
    37ee:	08 95       	ret

000037f0 <servo_OFF>:
void servo_OFF(void)
{
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
    37f8:	6c 97       	sbiw	r28, 0x1c	; 28
    37fa:	0f b6       	in	r0, 0x3f	; 63
    37fc:	f8 94       	cli
    37fe:	de bf       	out	0x3e, r29	; 62
    3800:	0f be       	out	0x3f, r0	; 63
    3802:	cd bf       	out	0x3d, r28	; 61
	DIO_enuSetPinValue(9 , 1);
    3804:	89 e0       	ldi	r24, 0x09	; 9
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	61 e0       	ldi	r22, 0x01	; 1
    380a:	70 e0       	ldi	r23, 0x00	; 0
    380c:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    3810:	80 e0       	ldi	r24, 0x00	; 0
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	a0 e8       	ldi	r26, 0x80	; 128
    3816:	bf e3       	ldi	r27, 0x3F	; 63
    3818:	89 8f       	std	Y+25, r24	; 0x19
    381a:	9a 8f       	std	Y+26, r25	; 0x1a
    381c:	ab 8f       	std	Y+27, r26	; 0x1b
    381e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3820:	69 8d       	ldd	r22, Y+25	; 0x19
    3822:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3824:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3826:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3828:	20 e0       	ldi	r18, 0x00	; 0
    382a:	30 e0       	ldi	r19, 0x00	; 0
    382c:	4a ef       	ldi	r20, 0xFA	; 250
    382e:	54 e4       	ldi	r21, 0x44	; 68
    3830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3834:	dc 01       	movw	r26, r24
    3836:	cb 01       	movw	r24, r22
    3838:	8d 8b       	std	Y+21, r24	; 0x15
    383a:	9e 8b       	std	Y+22, r25	; 0x16
    383c:	af 8b       	std	Y+23, r26	; 0x17
    383e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3840:	6d 89       	ldd	r22, Y+21	; 0x15
    3842:	7e 89       	ldd	r23, Y+22	; 0x16
    3844:	8f 89       	ldd	r24, Y+23	; 0x17
    3846:	98 8d       	ldd	r25, Y+24	; 0x18
    3848:	20 e0       	ldi	r18, 0x00	; 0
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	40 e8       	ldi	r20, 0x80	; 128
    384e:	5f e3       	ldi	r21, 0x3F	; 63
    3850:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3854:	88 23       	and	r24, r24
    3856:	2c f4       	brge	.+10     	; 0x3862 <servo_OFF+0x72>
		__ticks = 1;
    3858:	81 e0       	ldi	r24, 0x01	; 1
    385a:	90 e0       	ldi	r25, 0x00	; 0
    385c:	9c 8b       	std	Y+20, r25	; 0x14
    385e:	8b 8b       	std	Y+19, r24	; 0x13
    3860:	3f c0       	rjmp	.+126    	; 0x38e0 <servo_OFF+0xf0>
	else if (__tmp > 65535)
    3862:	6d 89       	ldd	r22, Y+21	; 0x15
    3864:	7e 89       	ldd	r23, Y+22	; 0x16
    3866:	8f 89       	ldd	r24, Y+23	; 0x17
    3868:	98 8d       	ldd	r25, Y+24	; 0x18
    386a:	20 e0       	ldi	r18, 0x00	; 0
    386c:	3f ef       	ldi	r19, 0xFF	; 255
    386e:	4f e7       	ldi	r20, 0x7F	; 127
    3870:	57 e4       	ldi	r21, 0x47	; 71
    3872:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3876:	18 16       	cp	r1, r24
    3878:	4c f5       	brge	.+82     	; 0x38cc <servo_OFF+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    387a:	69 8d       	ldd	r22, Y+25	; 0x19
    387c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    387e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3880:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	40 e2       	ldi	r20, 0x20	; 32
    3888:	51 e4       	ldi	r21, 0x41	; 65
    388a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	bc 01       	movw	r22, r24
    3894:	cd 01       	movw	r24, r26
    3896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    389a:	dc 01       	movw	r26, r24
    389c:	cb 01       	movw	r24, r22
    389e:	9c 8b       	std	Y+20, r25	; 0x14
    38a0:	8b 8b       	std	Y+19, r24	; 0x13
    38a2:	0f c0       	rjmp	.+30     	; 0x38c2 <servo_OFF+0xd2>
    38a4:	88 ec       	ldi	r24, 0xC8	; 200
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	9a 8b       	std	Y+18, r25	; 0x12
    38aa:	89 8b       	std	Y+17, r24	; 0x11
    38ac:	89 89       	ldd	r24, Y+17	; 0x11
    38ae:	9a 89       	ldd	r25, Y+18	; 0x12
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	f1 f7       	brne	.-4      	; 0x38b0 <servo_OFF+0xc0>
    38b4:	9a 8b       	std	Y+18, r25	; 0x12
    38b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38b8:	8b 89       	ldd	r24, Y+19	; 0x13
    38ba:	9c 89       	ldd	r25, Y+20	; 0x14
    38bc:	01 97       	sbiw	r24, 0x01	; 1
    38be:	9c 8b       	std	Y+20, r25	; 0x14
    38c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38c2:	8b 89       	ldd	r24, Y+19	; 0x13
    38c4:	9c 89       	ldd	r25, Y+20	; 0x14
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	69 f7       	brne	.-38     	; 0x38a4 <servo_OFF+0xb4>
    38ca:	14 c0       	rjmp	.+40     	; 0x38f4 <servo_OFF+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38cc:	6d 89       	ldd	r22, Y+21	; 0x15
    38ce:	7e 89       	ldd	r23, Y+22	; 0x16
    38d0:	8f 89       	ldd	r24, Y+23	; 0x17
    38d2:	98 8d       	ldd	r25, Y+24	; 0x18
    38d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	9c 8b       	std	Y+20, r25	; 0x14
    38de:	8b 8b       	std	Y+19, r24	; 0x13
    38e0:	8b 89       	ldd	r24, Y+19	; 0x13
    38e2:	9c 89       	ldd	r25, Y+20	; 0x14
    38e4:	98 8b       	std	Y+16, r25	; 0x10
    38e6:	8f 87       	std	Y+15, r24	; 0x0f
    38e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ea:	98 89       	ldd	r25, Y+16	; 0x10
    38ec:	01 97       	sbiw	r24, 0x01	; 1
    38ee:	f1 f7       	brne	.-4      	; 0x38ec <servo_OFF+0xfc>
    38f0:	98 8b       	std	Y+16, r25	; 0x10
    38f2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);   //-90

	DIO_enuSetPinValue(9 , 0);
    38f4:	89 e0       	ldi	r24, 0x09	; 9
    38f6:	90 e0       	ldi	r25, 0x00	; 0
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	70 e0       	ldi	r23, 0x00	; 0
    38fc:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_enuSetPinValue>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	a8 e9       	ldi	r26, 0x98	; 152
    3906:	b1 e4       	ldi	r27, 0x41	; 65
    3908:	8b 87       	std	Y+11, r24	; 0x0b
    390a:	9c 87       	std	Y+12, r25	; 0x0c
    390c:	ad 87       	std	Y+13, r26	; 0x0d
    390e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3910:	6b 85       	ldd	r22, Y+11	; 0x0b
    3912:	7c 85       	ldd	r23, Y+12	; 0x0c
    3914:	8d 85       	ldd	r24, Y+13	; 0x0d
    3916:	9e 85       	ldd	r25, Y+14	; 0x0e
    3918:	20 e0       	ldi	r18, 0x00	; 0
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	4a ef       	ldi	r20, 0xFA	; 250
    391e:	54 e4       	ldi	r21, 0x44	; 68
    3920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3924:	dc 01       	movw	r26, r24
    3926:	cb 01       	movw	r24, r22
    3928:	8f 83       	std	Y+7, r24	; 0x07
    392a:	98 87       	std	Y+8, r25	; 0x08
    392c:	a9 87       	std	Y+9, r26	; 0x09
    392e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3930:	6f 81       	ldd	r22, Y+7	; 0x07
    3932:	78 85       	ldd	r23, Y+8	; 0x08
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	9a 85       	ldd	r25, Y+10	; 0x0a
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	40 e8       	ldi	r20, 0x80	; 128
    393e:	5f e3       	ldi	r21, 0x3F	; 63
    3940:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3944:	88 23       	and	r24, r24
    3946:	2c f4       	brge	.+10     	; 0x3952 <servo_OFF+0x162>
		__ticks = 1;
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	9e 83       	std	Y+6, r25	; 0x06
    394e:	8d 83       	std	Y+5, r24	; 0x05
    3950:	3f c0       	rjmp	.+126    	; 0x39d0 <servo_OFF+0x1e0>
	else if (__tmp > 65535)
    3952:	6f 81       	ldd	r22, Y+7	; 0x07
    3954:	78 85       	ldd	r23, Y+8	; 0x08
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	3f ef       	ldi	r19, 0xFF	; 255
    395e:	4f e7       	ldi	r20, 0x7F	; 127
    3960:	57 e4       	ldi	r21, 0x47	; 71
    3962:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3966:	18 16       	cp	r1, r24
    3968:	4c f5       	brge	.+82     	; 0x39bc <servo_OFF+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    396a:	6b 85       	ldd	r22, Y+11	; 0x0b
    396c:	7c 85       	ldd	r23, Y+12	; 0x0c
    396e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3970:	9e 85       	ldd	r25, Y+14	; 0x0e
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	40 e2       	ldi	r20, 0x20	; 32
    3978:	51 e4       	ldi	r21, 0x41	; 65
    397a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	bc 01       	movw	r22, r24
    3984:	cd 01       	movw	r24, r26
    3986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    398a:	dc 01       	movw	r26, r24
    398c:	cb 01       	movw	r24, r22
    398e:	9e 83       	std	Y+6, r25	; 0x06
    3990:	8d 83       	std	Y+5, r24	; 0x05
    3992:	0f c0       	rjmp	.+30     	; 0x39b2 <servo_OFF+0x1c2>
    3994:	88 ec       	ldi	r24, 0xC8	; 200
    3996:	90 e0       	ldi	r25, 0x00	; 0
    3998:	9c 83       	std	Y+4, r25	; 0x04
    399a:	8b 83       	std	Y+3, r24	; 0x03
    399c:	8b 81       	ldd	r24, Y+3	; 0x03
    399e:	9c 81       	ldd	r25, Y+4	; 0x04
    39a0:	01 97       	sbiw	r24, 0x01	; 1
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <servo_OFF+0x1b0>
    39a4:	9c 83       	std	Y+4, r25	; 0x04
    39a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	01 97       	sbiw	r24, 0x01	; 1
    39ae:	9e 83       	std	Y+6, r25	; 0x06
    39b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	69 f7       	brne	.-38     	; 0x3994 <servo_OFF+0x1a4>
    39ba:	14 c0       	rjmp	.+40     	; 0x39e4 <servo_OFF+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	9e 83       	std	Y+6, r25	; 0x06
    39ce:	8d 83       	std	Y+5, r24	; 0x05
    39d0:	8d 81       	ldd	r24, Y+5	; 0x05
    39d2:	9e 81       	ldd	r25, Y+6	; 0x06
    39d4:	9a 83       	std	Y+2, r25	; 0x02
    39d6:	89 83       	std	Y+1, r24	; 0x01
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	9a 81       	ldd	r25, Y+2	; 0x02
    39dc:	01 97       	sbiw	r24, 0x01	; 1
    39de:	f1 f7       	brne	.-4      	; 0x39dc <servo_OFF+0x1ec>
    39e0:	9a 83       	std	Y+2, r25	; 0x02
    39e2:	89 83       	std	Y+1, r24	; 0x01
	// Delay for the low state duration (0.01 seconds)
	_delay_ms(19);
}
    39e4:	6c 96       	adiw	r28, 0x1c	; 28
    39e6:	0f b6       	in	r0, 0x3f	; 63
    39e8:	f8 94       	cli
    39ea:	de bf       	out	0x3e, r29	; 62
    39ec:	0f be       	out	0x3f, r0	; 63
    39ee:	cd bf       	out	0x3d, r28	; 61
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	08 95       	ret

000039f6 <__udivmodhi4>:
    39f6:	aa 1b       	sub	r26, r26
    39f8:	bb 1b       	sub	r27, r27
    39fa:	51 e1       	ldi	r21, 0x11	; 17
    39fc:	07 c0       	rjmp	.+14     	; 0x3a0c <__udivmodhi4_ep>

000039fe <__udivmodhi4_loop>:
    39fe:	aa 1f       	adc	r26, r26
    3a00:	bb 1f       	adc	r27, r27
    3a02:	a6 17       	cp	r26, r22
    3a04:	b7 07       	cpc	r27, r23
    3a06:	10 f0       	brcs	.+4      	; 0x3a0c <__udivmodhi4_ep>
    3a08:	a6 1b       	sub	r26, r22
    3a0a:	b7 0b       	sbc	r27, r23

00003a0c <__udivmodhi4_ep>:
    3a0c:	88 1f       	adc	r24, r24
    3a0e:	99 1f       	adc	r25, r25
    3a10:	5a 95       	dec	r21
    3a12:	a9 f7       	brne	.-22     	; 0x39fe <__udivmodhi4_loop>
    3a14:	80 95       	com	r24
    3a16:	90 95       	com	r25
    3a18:	bc 01       	movw	r22, r24
    3a1a:	cd 01       	movw	r24, r26
    3a1c:	08 95       	ret

00003a1e <__prologue_saves__>:
    3a1e:	2f 92       	push	r2
    3a20:	3f 92       	push	r3
    3a22:	4f 92       	push	r4
    3a24:	5f 92       	push	r5
    3a26:	6f 92       	push	r6
    3a28:	7f 92       	push	r7
    3a2a:	8f 92       	push	r8
    3a2c:	9f 92       	push	r9
    3a2e:	af 92       	push	r10
    3a30:	bf 92       	push	r11
    3a32:	cf 92       	push	r12
    3a34:	df 92       	push	r13
    3a36:	ef 92       	push	r14
    3a38:	ff 92       	push	r15
    3a3a:	0f 93       	push	r16
    3a3c:	1f 93       	push	r17
    3a3e:	cf 93       	push	r28
    3a40:	df 93       	push	r29
    3a42:	cd b7       	in	r28, 0x3d	; 61
    3a44:	de b7       	in	r29, 0x3e	; 62
    3a46:	ca 1b       	sub	r28, r26
    3a48:	db 0b       	sbc	r29, r27
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	09 94       	ijmp

00003a56 <__epilogue_restores__>:
    3a56:	2a 88       	ldd	r2, Y+18	; 0x12
    3a58:	39 88       	ldd	r3, Y+17	; 0x11
    3a5a:	48 88       	ldd	r4, Y+16	; 0x10
    3a5c:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a5e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a60:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a62:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a64:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a66:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a68:	b9 84       	ldd	r11, Y+9	; 0x09
    3a6a:	c8 84       	ldd	r12, Y+8	; 0x08
    3a6c:	df 80       	ldd	r13, Y+7	; 0x07
    3a6e:	ee 80       	ldd	r14, Y+6	; 0x06
    3a70:	fd 80       	ldd	r15, Y+5	; 0x05
    3a72:	0c 81       	ldd	r16, Y+4	; 0x04
    3a74:	1b 81       	ldd	r17, Y+3	; 0x03
    3a76:	aa 81       	ldd	r26, Y+2	; 0x02
    3a78:	b9 81       	ldd	r27, Y+1	; 0x01
    3a7a:	ce 0f       	add	r28, r30
    3a7c:	d1 1d       	adc	r29, r1
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	ed 01       	movw	r28, r26
    3a8a:	08 95       	ret

00003a8c <_exit>:
    3a8c:	f8 94       	cli

00003a8e <__stop_program>:
    3a8e:	ff cf       	rjmp	.-2      	; 0x3a8e <__stop_program>
